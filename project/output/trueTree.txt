[
{Label: start_2
[,,,
Assign "default_mouse" = Val (String "default")
,
Assign "blade_held" = Val (Bool False)
,
Assign "current_loop" = Val (Int 2)
,
Assign "quick_menu" = Val (Bool False)
,
Assign "config.menu_include_disabled" = Val (Bool False)
,
[If Var "current_princess" == Val (String "adversary") [
Assign "adversary_encountered" = Val (Bool True)
,
Jump to adversary_1_start
]]
,
[Elif Var "current_princess" == Val (String "beast") [
Assign "beast_encountered" = Val (Bool True)
,
Jump to beast_1_start
]]
,
[Elif Var "current_princess" == Val (String "damsel") [
Assign "damsel_encountered" = Val (Bool True)
,
Jump to damsel_1_start
]]
,
[Elif Var "current_princess" == Val (String "nightmare") [
Assign "nightmare_encountered" = Val (Bool True)
,
Jump to nightmare_1_start
]]
,
[Elif Var "current_princess" == Val (String "prisoner") [
Assign "prisoner_encountered" = Val (Bool True)
,
Jump to prisoner_1_start
]]
,
[Elif Var "current_princess" == Val (String "razor") [
Assign "razor_encountered" = Val (Bool True)
,
Jump to razor_1_start
]]
,
[Elif Var "current_princess" == Val (String "spectre") [
Assign "spectre_encountered" = Val (Bool True)
,
Jump to spectre_1_start
]]
,
[Elif Var "current_princess" == Val (String "stranger") [
Assign "stranger_encountered" = Val (Bool True)
,
Jump to stranger_1_start
]]
,
[Elif Var "current_princess" == Val (String "tower") [
Assign "tower_encountered" = Val (Bool True)
,
Jump to tower_1_start
]]
,
[Elif Var "current_princess" == Val (String "witch") [
Assign "witch_encountered" = Val (Bool True)
,
Jump to witch_1_start
]]
,
[Else [
Assign "stranger_encountered" = Val (Bool True)
,
Jump to stranger_1_start
]]
]}
,
{Label: chapter_2_stranger_rejoin_1
[
[If Var "current_princess" == Val (String "adversary") [
Jump to adversary_1_cabin_arrival
]]
,
[Elif Var "current_princess" == Val (String "beast") [
Jump to beast_1_cabin_arrival
]]
,
[Elif Var "current_princess" == Val (String "damsel") [
Jump to damsel_1_cabin_arrival
]]
,
[Elif Var "current_princess" == Val (String "nightmare") [
Jump to nightmare_1_cabin_arrival
]]
,
[Elif Var "current_princess" == Val (String "prisoner") [
Jump to prisoner_1_cabin_arrival
]]
,
[Elif Var "current_princess" == Val (String "razor") [
Jump to razor_1_cabin_arrival
]]
,
[Elif Var "current_princess" == Val (String "spectre") [
Jump to spectre_1_cabin_arrival
]]
,
[Elif Var "current_princess" == Val (String "tower") [
Jump to tower_1_cabin_arrival
]]
,
[Elif Var "current_princess" == Val (String "witch") [
Jump to witch_1_cabin_arrival
]]
,
[Else [
Jump to prisoner_1_cabin_arrival
]]
]}
,
{Label: chapter_2_stranger_rejoin
[
[If Var "current_princess" == Val (String "adversary") [
Jump to adversary_stranger_rejoin
]]
,
[Elif Var "current_princess" == Val (String "beast") [
Jump to beast_stranger_rejoin
]]
,
[Elif Var "current_princess" == Val (String "damsel") [
Jump to damsel_stranger_rejoin
]]
,
[Elif Var "current_princess" == Val (String "nightmare") [
Jump to nightmare_stranger_rejoin
]]
,
[Elif Var "current_princess" == Val (String "prisoner") [
Jump to prisoner_stranger_rejoin
]]
,
[Elif Var "current_princess" == Val (String "razor") [
Jump to razor_stranger_rejoin
]]
,
[Elif Var "current_princess" == Val (String "spectre") [
Jump to spectre_stranger_rejoin
]]
,
[Elif Var "current_princess" == Val (String "tower") [
Jump to tower_stranger_rejoin
]]
,
[Elif Var "current_princess" == Val (String "witch") [
Jump to witch_stranger_rejoin
]]
]}
,
{Label: basement_1_empty_start
[,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - ''Hi!''
[,],Choice - ''Just checking in on you.''
[,],Choice - ''I'm here to save you!''If Var "damsel_encountered" == Val (Bool False) || Var "witch_encountered" == Val (Bool False) []
[
Assign "basement_1_empty_save_explore" = Val (Bool True)
,,,,,,],Choice - (Lie) ''I'm here to save yo...
[
Assign "basement_1_empty_save_explore" = Val (Bool True)
,
Assign "basement_1_empty_save_lie_explore" = Val (Bool True)
,,,,,,],Choice - ''Hey, I think I'm here to ...
[
Assign "basement_1_empty_kill_joke" = Val (Bool True)
,,,,],Choice - Continue down the stairs.
[,]]}
,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,
[If "basement_1_empty_kill_joke" [,,]]
,
[Elif "basement_1_empty_save_explore" [,,,,,,,
[If Var "basement_1_empty_save_lie_explore" == Val (Bool False) [,]]
,
[Else [,]]
]]
,
[Else [,,]]
,,
{Choice Branch: [Choice - ''Hold on. Let's talk a bit...
[,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
{Label: basement_1_empty_talk
[
Assign "basement_1_talked" = Val (Bool True)
,
{Choice Branch: [Choice - (Explore) ''What's your nam...If Var "basement_1_name_ask" == Val (Bool False) []
[
Assign "basement_1_name_ask" = Val (Bool True)
,,,,,,,,,,,,,,,,,
Jump to basement_1_empty_talk
],Choice - (Explore) ''So is Princess ...If "basement_1_name_ask" && Var "basement_1_name_ask_follow_up" == Val (Bool False) []
[
Assign "basement_1_name_ask_follow_up" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,
Jump to basement_1_empty_talk
],Choice - (Explore) ''I don't know an...If Var "basement_1_why_imprisoned" == Val (Bool False) []
[
Assign "basement_1_why_imprisoned" = Val (Bool True)
,,,,,,,,,,,,,
Jump to basement_1_empty_talk
],Choice - (Explore) ''I wasn't kiddin...If "basement_1_empty_kill_joke" && Var "basement_1_shared_task" == Val (Bool False) []
[
{Label: basement_1_empty_task_share
[
Assign "basement_1_shared_task" = Val (Bool True)
,,,,,,,,,,,,,,,,
{Label: basement_1_empty_task_share_late_join
[
{Choice Branch: [Choice - (Deflect) ''What are you go...If Var "what_would_you_do_1" == Val (Bool False) []
[
Assign "what_would_you_do_1" = Val (Bool True)
,,,,,,,,,,,,,
Jump to basement_1_philosophy
],Choice - ''I've been told enough.''
[,,,,,,,,
Jump to basement_1_philosophy
],Choice - ''I was hoping you'd tell m...
[,,,,,,,,,,
Jump to basement_1_philosophy
],Choice - ''No. But I'm sure they hav...
[,,,,,,,,
Jump to basement_1_philosophy
],Choice - ''No. Which is why I don't ...
[,,,,,,,,
{Choice Branch: [Choice - ''I still have a few more q...
[,,,,
Jump to basement_1_empty_talk
],Choice - (Examine the chains) ''I'll...
[
Jump to basement_1_empty_rescue
]]}
],Choice - [[Remain silent.]
[,,,,
Jump to basement_1_philosophy
]]}
,
{Label: basement_1_philosophy
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to basement_1_empty_talk
]}
]}
]}
],Choice - (Explore) ''If I'm the firs...If Var "basement_1_eating_ask" == Val (Bool False) []
[
Assign "basement_1_eating_ask" = Val (Bool True)
,,,,,,,,,,,
Jump to basement_1_empty_talk
],Choice - (Explore) ''I was sent here...If Var "basement_1_empty_kill_joke" == Val (Bool False) && Var "basement_1_shared_task" == Val (Bool False) []
[,,
{Choice Branch: [Choice - ''But I don't think you're ...
[
Jump to basement_1_empty_task_share
],Choice - ''But I wanted to see you f...
[
Jump to basement_1_empty_task_share
],Choice - ''I'm starting to think it'...
[
Assign "basement_1_shared_task" = Val (Bool True)
,,,,,,,,,,,,,
Jump to basement_1_empty_task_share_late_join
]]}
],Choice - (Explore) ''What are you go...If Var "what_would_you_do_1" == Val (Bool False) && Var "basement_1_shared_task" == Val (Bool False) []
[
Assign "what_would_you_do_1" = Val (Bool True)
,,,,,,,,,,,,,,,,,,
Jump to basement_1_empty_talk
],Choice - ''I won't kill you, but I c...If "basement_1_shared_task" || "basement_1_empty_kill_joke" []
[
{Label: basement_1_empty_no_kill
[,,,,
[If "basement_1_empty_kill_joke" && Var "basement_1_shared_task" == Val (Bool False) [,,,]]
,
[Else [,,,]]
,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Retrieve the blade.]If Var "beast_encountered" == Val (Bool False) || Var "witch_encountered" == Val (Bool False) []
[,,,,,,,,,,,,,
Jump to basement_1_empty_retrieve_knife_early_join
],Choice - ''Okay. Let's get you out o...If Var "damsel_encountered" == Val (Bool False) || Var "nightmare_encountered" == Val (Bool False) []
[,,,,,,,,,,,,,,
Jump to basement_1_empty_rescue
],Choice - [[Lock her in the basement.]If Var "nightmare_encountered" == Val (Bool False) []
[,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - No, we're sticking to the p...
[
Assign "nightmare_no_wounds" = Val (Bool True)
,,,,,
Jump to nightmare_join
],Choice - Oh that's a relief! I was a...If Var "beast_encountered" == Val (Bool False) || Var "witch_encountered" == Val (Bool False) []
[,,,,
Jump to basement_1_empty_retrieve_knife
]]}
]]}
]}
],Choice - ''I'm going to keep you loc...If Var "nightmare_encountered" == Val (Bool False) []
[
Jump to basement_1_empty_no_kill
],Choice - ''I'm sorry, but I just can...If Var "beast_encountered" == Val (Bool False) || Var "witch_encountered" == Val (Bool False) []
[,,,
Assign "basement_1_empty_not_worth_risk" = Val (Bool True)
,,,,,,,,,,
[If "basement_1_empty_kill_joke" && Var "basement_1_shared_task" == Val (Bool False) [,]]
,
[Elif Var "basement_1_shared_task" == Val (Bool False) [,]]
,,,,,,,,
{Label: basement_1_empty_retrieve_knife_early_join
[,,,]}
,
Jump to basement_1_empty_retrieve_knife
],Choice - [[Go back upstairs to retri...If Var "beast_encountered" == Val (Bool False) || Var "witch_encountered" == Val (Bool False) []
[,,,,,,,,,,,,,,,,,,,,,,
Jump to basement_1_empty_retrieve_knife
],Choice - ''I can't believe they've b...If Var "witch_encountered" == Val (Bool False) || Var "damsel_encountered" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_join
],Choice - ''Okay, I'm going to get yo...If Var "witch_encountered" == Val (Bool False) || Var "damsel_encountered" == Val (Bool False) []
[,
Assign "basement_1_empty_rescue_dont_regret" = Val (Bool True)
,
Jump to basement_1_empty_rescue_join
]]}
]}
],Choice - ''I'll see what I can do.''...If Var "witch_encountered" == Val (Bool False) || Var "damsel_encountered" == Val (Bool False) []
[,
Assign "quick_menu" = Val (Bool False)
,,,,,
{Label: basement_1_empty_rescue_join
[,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,
[If Var "basement_1_empty_rescue_dont_regret" == Val (Bool False) [,]]
,
[Else [,]]
,,,,,]}
,
Jump to basement_1_empty_rescue
]]}
]}
,
{Label: basement_1_empty_rescue
[,,,,,,,,,,,,,,,
{Choice Branch: [Choice - ''And if there isn't a key....
[,,,,,,,,,,,,],Choice - ''I'm going to check upstai...
[,,]]}
,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,
{Label: basement_1_empty_rescue_door
[,,,
{Choice Branch: [Choice - (Explore) ''Hey! Let me out...If Var "basement_1_empty_rescue_door_shout_explore" == Val (Bool False) []
[
Assign "basement_1_empty_rescue_door_shout_explore" = Val (Bool True)
,,,
[If Var "basement_1_empty_rescue_door_try_explore" == Val (Bool False) [,]]
,
[Else [,]]
,
Jump to basement_1_empty_rescue_door
],Choice - (Explore) [[Try the door.]If Var "basement_1_empty_rescue_door_try_explore" == Val (Bool False) []
[,
Assign "basement_1_empty_rescue_door_try_explore" = Val (Bool True)
,,,
Jump to basement_1_empty_rescue_door
],Choice - [[Return to the bottom of t...
[,,
Assign "quick_menu" = Val (Bool False)
,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,]]}
,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Save the Princess.]If Var "damsel_encountered" == Val (Bool False) || Var "witch_encountered" == Val (Bool False) []
[
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Approach the locked door.]
[,,,,,,,,,,,,,,,,,,,,,,,,
[If "witch_encountered" || "damsel_encountered" && Var "preferences.self_voicing" == Val (Bool False) [
Assign "config.menu_include_disabled" = Val (Bool True)
]]
,
Assign "small_yadj" = Val (Bool True)
,
{Choice Branch: [Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) []
[
{Label: basement_1_empty_rescue_controlled_start
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: basement_1_empty_beast
[
Assign "small_yadj" = Val (Bool False)
,
Assign "config.menu_include_disabled" = Val (Bool False)
,
Assign "current_princess" = Val (String "witch")
,,
Assign "witch_rescue_path" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,
Assign "persistent.death_count" += Val (Int 1)
,,,,,,,,,]}
,
Jump to start_2
]}
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_start
],Choice - [[Warn her.]
[,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) []
[
{Label: basement_1_empty_rescue_controlled_2_start
[
Assign "small_yadj" = Val (Bool False)
,
Assign "config.menu_include_disabled" = Val (Bool False)
,,,,,,,,,,,
Jump to basement_1_empty_beast
]}
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_2_start
],Choice - [[Resist.]If Var "damsel_encountered" == Val (Bool False) []
[
Assign "config.menu_include_disabled" = Val (Bool False)
,
Assign "current_princess" = Val (String "damsel")
,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,
Assign "small_yadj" = Val (Bool False)
,
Jump to start_2
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_2_start
]]}
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "witch_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_empty_rescue_controlled_start
]]}
]]}
],Choice - [[Slay the Princess.]If "basement_1_empty_save_lie_explore" || Var "basement_1_empty_save_explore" == Val (Bool False) && Var "beast_encountered" == Val (Bool False) || Var "witch_encountered" == Val (Bool False) || Var "nightmare_encountered" == Val (Bool False) []
[,
Assign "basement_1_empty_wounded" = Val (Bool True)
,
Assign "beast_1_both_arms" = Val (Bool True)
,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Slay the Princess.]
[,,,,,,,,,,,,
{Choice Branch: [Choice - [[Give up.]If Var "beast_encountered" == Val (Bool False) []
[
Assign "current_princess" = Val (String "beast")
,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,
Assign "persistent.death_count" += Val (Int 1)
,,,,,,,,,,
Jump to start_2
],Choice - [[Finish the job.]If Var "witch_encountered" == Val (Bool False) []
[,
Assign "witch_betrayal_mutual" = Val (Bool True)
,
Assign "loop_1_princess_killed" = Val (Bool True)
,
Assign "current_princess" = Val (String "witch")
,
Assign "current_mutual_death" += Val (Int 1)
,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,
Assign "persistent.death_count" += Val (Int 1)
,,,,,,,,,,
Jump to start_2
],Choice - [[Run for the stairs and lo...If Var "nightmare_encountered" == Val (Bool False) []
[
Assign "nightmare_join_fled" = Val (Bool True)
,
Assign "current_princess" = Val (String "nightmare")
,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,
Jump to nightmare_join
]]}
]]}
]]}
]}
]}
,
{Label: basement_1_empty_retrieve_knife
[
Assign "basement_1_empty_wounded" = Val (Bool True)
,
Assign "basement_1_empty_arm_loss_known" = Val (Bool True)
,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,
{Label: basement_1_empty_retrieve_knife_stairs
[,,,
{Choice Branch: [Choice - (Explore) ''Hello?''If Var "basement_1_empty_retrieve_knife_stairs_explore_hello" == Val (Bool False) && Var "beast_encountered" == Val (Bool False) []
[
Assign "basement_1_empty_retrieve_knife_stairs_explore_hello" = Val (Bool True)
,
Assign "basement_1_empty_knife_hesitate" = Val (Bool True)
,
Assign "empty_1_can_witch" = Val (Bool False)
,,,
Jump to basement_1_empty_retrieve_knife_stairs
],Choice - (Explore) ''I think we got ...If Var "basement_1_empty_retrieve_knife_stairs_explore_hello" == Val (Bool False) && Var "beast_encountered" == Val (Bool False) []
[
Assign "basement_1_empty_retrieve_knife_stairs_explore_hello" = Val (Bool True)
,
Assign "basement_1_empty_knife_hesitate" = Val (Bool True)
,
Assign "empty_1_can_witch" = Val (Bool False)
,,,,,,,
Jump to basement_1_empty_retrieve_knife_stairs
],Choice - She's lost an arm. I'm lock...If Var "nightmare_encountered" == Val (Bool False) []
[,,,,
{Choice Branch: [Choice - (Lock her away) Tell you wh...
[
{Label: nightmare_join
[
Assign "current_princess" = Val (String "nightmare")
,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
[If "nightmare_no_wounds" [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - ''Threaten me all you want!...
[,],Choice - ''Whatever you are, you're ...If "blade_held" []
[,],Choice - ''So all of that was just a...If Var "blade_held" == Val (Bool False) []
[,],Choice - ''Bang on the door all you ...If "basement_1_empty_wounded" []
[
[If "basement_1_empty_arm_loss_known" [,]]
,
[Else [,]]
],Choice - Ignore her and go to sleep.
[,]]}
,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,
[If "basement_1_empty_arm_loss_known" [,,]]
,
[Else [,]]
,,,,
[If "basement_1_empty_arm_loss_known" [,,]]
,
[Else [,]]
,,,,,,,,,,,,
[If "basement_1_empty_arm_loss_known" [,,]]
,
[Else [,]]
,,,,
[If "basement_1_empty_arm_loss_known" [,,]]
,
[Else [,,]]
,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,,
Assign "persistent.death_count" += Val (Int 1)
,,,,
Jump to start_2
]}
],Choice - You're right. Let's finish ...If Var "witch_encountered" == Val (Bool False) || Var "beast_encountered" == Val (Bool False) && Var "empty_1_can_witch" == Val (Bool False) []
[
Jump to beast_arm_missing_finish_join
]]}
],Choice - Let's finish this.
[
{Label: beast_arm_missing_finish_join
[]}
,,,,,
{Choice Branch: [Choice - Investigate the arm.If Var "witch_encountered" == Val (Bool False) []
[,
Assign "loop_1_locked" = Val (Bool True)
,
Assign "current_princess" = Val (String "witch")
,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,
[If "basement_1_empty_not_worth_risk" [,]]
,,,,,,,,,,,
Assign "persistent.death_count" += Val (Int 1)
,,,,,,,,,,,
Jump to start_2
],Choice - [[Close the door behind you.]
[,,
Assign "quick_menu" = Val (Bool False)
,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
{Choice Branch: [Choice - [[Investigate the arm.]
[,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: basement_1_empty_sneak_join
[
[If "basement_1_empty_knife_hesitate" [
Assign "current_princess" = Val (String "beast")
,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,
Jump to empty_beast_join
]]
,,,
{Choice Branch: [Choice - [[Give up.]If Var "beast_encountered" == Val (Bool False) []
[
Assign "current_princess" = Val (String "beast")
,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,
{Label: empty_beast_join
[,,,,
[If "basement_1_empty_knife_hesitate" [,]]
,
Assign "persistent.death_count" += Val (Int 1)
,,,,,,,,,,,
Jump to start_2
]}
],Choice - [[Fight back.]If Var "witch_encountered" == Val (Bool False) []
[
Assign "loop_1_princess_killed" = Val (Bool True)
,
{Label: loop_1_knife_roll_death
[
Assign "default_mouse" = Val (String "blood")
,
Assign "current_princess" = Val (String "witch")
,
Assign "current_mutual_death" += Val (Int 1)
,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,
Assign "persistent.death_count" += Val (Int 1)
,,,,,,,,,,,
Jump to start_2
]}
]]}
]}
],Choice - ''Come on out. Let's just g...If Var "beast_encountered" == Val (Bool False) []
[
Assign "basement_1_empty_knife_hesitate" = Val (Bool True)
,,,
{Choice Branch: [Choice - [[Wait.]If Var "beast_encountered" == Val (Bool False) []
[
Jump to basement_1_empty_waiting_join
],Choice - [[Venture into the shadows.]
[
Jump to basement_1_empty_shadows_join
]]}
],Choice - ''I'll wait.''If Var "beast_encountered" == Val (Bool False) []
[,,
{Label: basement_1_empty_waiting_join
[,,,,,,
{Choice Branch: [Choice - [[Keep waiting.]
[
Assign "current_princess" = Val (String "beast")
,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,
Assign "persistent.death_count" += Val (Int 1)
,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,
Jump to start_2
],Choice - [[Venture into the shadows.]
[
{Label: basement_1_empty_shadows_join
[
Assign "basement_1_empty_knife_hesitate" = Val (Bool True)
,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
Jump to basement_1_empty_sneak_join
]}
]]}
]}
]]}
]]}
]]}
]}
]}
,
{Label: basement_1_knife_start
[,,
[If "tower_encountered" && "prisoner_encountered" && "nightmare_encountered" && "adversary_encountered" [
Assign "must_spectre" = Val (Bool True)
]]
,
[If "tower_encountered" && "nightmare_encountered" && "adversary_encountered" [
Assign "can_slay" = Val (Bool False)
]]
,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,
{Choice Branch: [Choice - ''Hi!''
[,],Choice - ''Just checking in on you.''
[,],Choice - ''Hey, I think I'm here to ...
[
Assign "basement_1_knife_kill_joke" = Val (Bool True)
,,,,],Choice - [[Continue down the stairs.]
[,]]}
,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,
[If "basement_1_knife_kill_joke" [,]]
,
[Else [,]]
,,,
{Label: basement_1_knife_confronted
[
{Choice Branch: [Choice - ''What? No way. Why would y...If Var "must_spectre" == Val (Bool False) []
[
Assign "basement_1_nerves_steeled_hesitated" = Val (Bool True)
,
Assign "can_spectre" = Val (Bool False)
,,,,,,],Choice - ''Yeah, it wasn't a joke.''If "basement_1_knife_kill_joke" []
[,,,,,],Choice - ''Okay, yeah, you caught me...If Var "basement_1_knife_kill_joke" == Val (Bool False) && Var "must_spectre" == Val (Bool False) []
[
Assign "can_spectre" = Val (Bool False)
,,,,,,],Choice - ''Nuh... nuh uh!''If Var "basement_1_knife_kill_joke" == Val (Bool False) && Var "must_spectre" == Val (Bool False) []
[
Assign "basement_1_nerves_steeled_hesitated" = Val (Bool True)
,
Assign "can_spectre" = Val (Bool False)
,,,,,,],Choice - ''I haven't decided yet.''If Var "must_spectre" == Val (Bool False) []
[,
Assign "basement_1_nerves_steeled_hesitated" = Val (Bool True)
,
Assign "knife_queue_undecided" = Val (Bool True)
,
Assign "can_spectre" = Val (Bool False)
,,,,,,],Choice - ''I'm just here to talk.''If Var "must_spectre" == Val (Bool False) []
[
Assign "basement_1_nerves_steeled_hesitated" = Val (Bool True)
,
Assign "can_spectre" = Val (Bool False)
,,,,,,],Choice - [[Steel your nerves and ste...
[
Assign "basement_1_knife_confronted_steel" = Val (Bool True)
,
Jump to basement_1_nerves_steeled
]]}
]}
,,,,,,
{Choice Branch: [Choice - [[Drop it.]If Var "must_spectre" == Val (Bool False) []
[
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,
[If Var "knife_queue_undecided" == Val (Bool False) [,]]
,
[Else [,]]
,
Jump to basement_1_knife_dropped
],Choice - [[Tighten your grip.]
[,,,,,,,
Jump to basement_1_nerves_steeled
]]}
]}
,
{Label: basement_1_nerves_steeled
[,,,,,,
Assign "basement_1_nerves_steeled" = Val (Bool True)
,,,,,
[If Var "basement_1_nerves_steeled_hesitated" == Val (Bool False) [,,]]
,,,,,,,,,,
{Label: basement_1_nerves_steeled_menu
[
{Choice Branch: [Choice - (Explore) What if she isn't...If Var "basement_1_nerves_steeled_hesitated_explore" == Val (Bool False) && Var "tower_encountered" == Val (Bool False) && Var "must_spectre" == Val (Bool False) []
[
Assign "basement_1_nerves_steeled_hesitated" = Val (Bool True)
,
Assign "basement_1_nerves_steeled_hesitated_explore" = Val (Bool True)
,
Assign "basement_1_nerves_fear" = Val (Bool True)
,
Assign "can_spectre" = Val (Bool False)
,,,,,,
Jump to basement_1_nerves_steeled_menu
],Choice - (Explore) Are you {b}sure{/...If Var "basement_1_nerves_steeled_hesitated_explore" == Val (Bool False) && Var "razor_encountered" == Val (Bool False) []
[
Assign "basement_1_nerves_steeled_hesitated_explore" = Val (Bool True)
,
Assign "basement_1_nerves_steeled_hesitated" = Val (Bool True)
,
Assign "basement_1_nerves_armed" = Val (Bool True)
,
Assign "can_spectre" = Val (Bool False)
,,,,,,,,
Jump to basement_1_nerves_steeled_menu
],Choice - (Explore) ''I'm sorry. Can ...If Var "basement_1_nerves_steeled_hesitated_explore" == Val (Bool False) && Var "must_spectre" == Val (Bool False) []
[
Assign "basement_1_nerves_steeled_hesitated_explore" = Val (Bool True)
,
Assign "basement_1_nerves_steeled_hesitated" = Val (Bool True)
,
Assign "can_spectre" = Val (Bool False)
,,,,,,,,
Jump to basement_1_nerves_steeled_menu
],Choice - ''I'm not dropping the blad...If Var "must_spectre" == Val (Bool False) []
[,
Assign "basement_1_nerves_steeled_hesitated" = Val (Bool True)
,
Assign "can_spectre" = Val (Bool False)
,,,,,
{Choice Branch: [Choice - ''Fine then, I guess we're ...
[,,,,,,,],Choice - [[Squint at the Princess wh...
[
Assign "basement_1_not_dropping_stare" = Val (Bool True)
,,,,,,,],Choice - [[Drop the blade.]
[
Assign "can_spectre" = Val (Bool False)
,
Jump to basement_1_knife_dropped_steeled
],Choice - [[Slay the Princess.]If "can_spectre" && Var "spectre_encountered" == Val (Bool False) || Var "razor_encountered" == Val (Bool False) || "basement_1_nerves_armed" && Var "razor_encountered" == Val (Bool False) || "basement_1_nerves_steeled_hesitated" && Var "adversary_encountered" == Val (Bool False) || Var "tower_encountered" == Val (Bool False) || Var "nightmare_encountered" == Val (Bool False) || "basement_1_nerves_fear" && Var "tower_encountered" == Val (Bool False) && "can_slay" []
[
Jump to basement_1_knife_slay_join
]]}
,
{Choice Branch: [Choice - ''Are you sure you don't wa...
[
Assign "basement_1_not_dropping_stare" = Val (Bool True)
,,,,,,],Choice - [[Squint at the Princess ev...If "basement_1_not_dropping_stare" []
[,,,,,,,],Choice - [[Stare at the Princess whi...If Var "basement_1_not_dropping_stare" == Val (Bool False) []
[
Assign "basement_1_not_dropping_stare" = Val (Bool True)
,,,,,,,,,],Choice - [[Drop the blade.]
[
Jump to basement_1_knife_dropped_steeled
],Choice - [[Slay the Princess.]If "can_spectre" && Var "spectre_encountered" == Val (Bool False) || Var "razor_encountered" == Val (Bool False) || "basement_1_nerves_armed" && Var "razor_encountered" == Val (Bool False) || "basement_1_nerves_steeled_hesitated" && Var "adversary_encountered" == Val (Bool False) || Var "tower_encountered" == Val (Bool False) || Var "nightmare_encountered" == Val (Bool False) || "basement_1_nerves_fear" && Var "tower_encountered" == Val (Bool False) && "can_slay" []
[
Jump to basement_1_knife_slay_join
]]}
,
{Choice Branch: [Choice - [[Drop the blade.]
[
Jump to basement_1_knife_dropped_steeled
],Choice - [[Slay the Princess.]If "can_spectre" && Var "spectre_encountered" == Val (Bool False) || Var "razor_encountered" == Val (Bool False) || "basement_1_nerves_armed" && Var "razor_encountered" == Val (Bool False) || "basement_1_nerves_steeled_hesitated" && Var "adversary_encountered" == Val (Bool False) || Var "tower_encountered" == Val (Bool False) || Var "nightmare_encountered" == Val (Bool False) || "basement_1_nerves_fear" && Var "tower_encountered" == Val (Bool False) && "can_slay" []
[
Jump to basement_1_knife_slay_join
]]}
],Choice - [[Drop the blade.]If Var "must_spectre" == Val (Bool False) []
[
{Label: basement_1_knife_dropped_steeled
[
Assign "can_spectre" = Val (Bool False)
,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,]}
,
Jump to basement_1_knife_dropped
],Choice - [[Slay the Princess.]If "can_spectre" && Var "spectre_encountered" == Val (Bool False) || Var "razor_encountered" == Val (Bool False) || "basement_1_nerves_armed" && Var "razor_encountered" == Val (Bool False) || "basement_1_nerves_steeled_hesitated" && Var "adversary_encountered" == Val (Bool False) || Var "tower_encountered" == Val (Bool False) || Var "nightmare_encountered" == Val (Bool False) || "basement_1_nerves_fear" && Var "tower_encountered" == Val (Bool False) && "can_slay" []
[
{Label: basement_1_knife_slay_join
[,
[If "basement_1_nerves_steeled_hesitated" [
[If "basement_1_nerves_armed" [
Assign "current_princess" = Val (String "razor")
,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Die.]
[
Assign "current_princess" = Val (String "razor")
,
Assign "razor_pathetic" = Val (Bool True)
,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,
Assign "persistent.death_count" += Val (Int 1)
,,,
Jump to start_2
],Choice - [[Finish the job.]
[,
Assign "current_princess" = Val (String "razor")
,
Assign "loop_1_princess_killed" = Val (Bool True)
,
Assign "current_mutual_death" += Val (Int 1)
,
Assign "razor_loop1_killed" = Val (Bool True)
,,,,,,,
Assign "default_mouse" = Val (String "blood")
,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,
Assign "persistent.death_count" += Val (Int 1)
,,,,,,,,,,
Jump to start_2
]]}
]]
,
[Elif "basement_1_nerves_fear" [
Assign "tower_unharmed" = Val (Bool True)
,
Assign "current_princess" = Val (String "tower")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,
Assign "persistent.death_count" += Val (Int 1)
,,,,,,,,,,
Jump to start_2
]]
,
[Else [,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,
Assign "config.menu_include_disabled" = Val (Bool True)
,
{Choice Branch: [Choice - [[Give up.]If Var "tower_encountered" == Val (Bool False) []
[,
Assign "tower_pathetic" = Val (Bool True)
,
Assign "config.menu_include_disabled" = Val (Bool False)
,
Assign "current_princess" = Val (String "tower")
,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "persistent.death_count" += Val (Int 1)
,,,,,,,,,,
Jump to start_2
],Choice - [[Finish the job.]If Var "adversary_encountered" == Val (Bool False) []
[
Assign "config.menu_include_disabled" = Val (Bool False)
,
Assign "loop_1_princess_killed" = Val (Bool True)
,
Assign "current_princess" = Val (String "adversary")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,
Assign "persistent.death_count" += Val (Int 1)
,,,,,,,,,,
Jump to start_2
],Choice - [[Flee and lock her in the ...If Var "nightmare_encountered" == Val (Bool False) []
[
Assign "config.menu_include_disabled" = Val (Bool False)
,
Assign "nightmare_join_fled" = Val (Bool True)
,
Assign "current_princess" = Val (String "nightmare")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,
Jump to nightmare_join
]]}
]]
]]
,
[Else [
Assign "loop_1_princess_killed" = Val (Bool True)
,
Assign "current_princess" = Val (String "spectre")
,,,,,,,,,,,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,
Assign "config.menu_include_disabled" = Val (Bool True)
,
{Choice Branch: [Choice - Of course it is. She's dead.If Var "spectre_encountered" == Val (Bool False) []
[,],Choice - I'm not sure. I feel like s...If Var "razor_encountered" == Val (Bool False) []
[,,
{Label: ch1_razor_alt_start
[,,,,,,,,,
{Choice Branch: [Choice - [[Remove the blade.]
[
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,,,,,,,,,
Jump to alt_razor_final_join
],Choice - [[Check for a pulse.]
[
Assign "ch1_razor_pulse" = Val (Bool True)
,
Assign "blade_held" = Val (Bool False)
,,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: alt_razor_final_join
[
Assign "razor_revival" = Val (Bool True)
,
Assign "current_princess" = Val (String "razor")
,
Assign "current_mutual_death" += Val (Int 1)
,,,,,
[If "blade_held" [,,,,,]]
,
[Else [,,,,]]
,,
[If "blade_held" [,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
]]
,,,,,,,
[If "ch1_razor_pulse" []]
,
[Else []]
,,,,,,,
[If "ch1_razor_pulse" []]
,
[Else []]
,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,
Assign "persistent.death_count" += Val (Int 1)
,,,,
Jump to start_2
]}
],Choice - You're right. She's dead. L...If Var "spectre_encountered" == Val (Bool False) []
[,,
Assign "config.menu_include_disabled" = Val (Bool False)
]]}
]}
],Choice - Of course not. That was too...If Var "razor_encountered" == Val (Bool False) []
[,,
Jump to ch1_razor_alt_start
]]}
,
Assign "config.menu_include_disabled" = Val (Bool False)
,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,
{Choice Branch: [Choice - [[Leave.]
[,,,
Assign "quick_menu" = Val (Bool False)
,,,,,]]}
,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,
{Choice Branch: [Choice - Wait, is this my prize? Thi...If "forest_1_prize" []
[,],Choice - Wait, is this my prize? Thi...If "forest_1_prize" []
[,],Choice - That's bullshit! Let me out...
[
[If "forest_1_prize" [,]]
,
[Else [,]]
],Choice - Oh. Okay.
[,],Choice - I was kind of hoping I'd ge...
[,]]}
,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,
{Label: cycle_1_princess_slain_offer
[,,
{Choice Branch: [Choice - (Explore) Didn't you hear T...If Var "cycle_1_princess_slain_offer_explore" == Val (Bool False) []
[
Assign "cycle_1_princess_slain_offer_explore" = Val (Bool True)
,,,
Jump to cycle_1_princess_slain_offer
],Choice - Hmm, okay maybe I'm not hap...If "cycle_1_princess_slain_offer_explore" || "ch1_mound" []
[,],Choice - No, we're happy. I'm sure o...If "cycle_1_princess_slain_offer_explore" && Var "ch1_mound" == Val (Bool False) []
[
Assign "cycle_1_princess_slain_offer_rejected" = Val (Bool True)
,,],Choice - Hell no, do you have any id...If Var "cycle_1_princess_slain_offer_explore" == Val (Bool False) && Var "ch1_mound" == Val (Bool False) || Var "ch1_mound_fresh" == Val (Bool False) []
[,],Choice - Of course we are. I like it...If Var "cycle_1_princess_slain_offer_explore" == Val (Bool False) && Var "ch1_mound" == Val (Bool False) []
[
Assign "cycle_1_princess_slain_offer_rejected" = Val (Bool True)
,,]]}
]}
,
[If "cycle_1_princess_slain_offer_rejected" [
{Label: cycle_1_princess_slain_eternity
[,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,
[If Var "_preferences.language" != Val (String "None") []]
,,
[If Var "loops_finished" > Val (Int 0) [,,,
Assign "ch1_mound" = Val (Bool True)
,
Assign "ch1_mound_fresh" = Val (Bool True)
,
Assign "cycle_1_princess_slain_offer_rejected" = Val (Bool False)
,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,
Jump to cycle_1_princess_slain_offer
]]
,,,,,,,,,
Assign "final_ending" = Val (String "good")
,
Jump to credits
]}
]]
,
[Else [,,,,,,,,,,,,
{Label: cycle_1_princess_slain_offer_heard_menu
[,
{Choice Branch: [Choice - (Explore) Wouldn't 'using' ...If Var "cycle_1_princess_slain_offer_heard_menu_explore" == Val (Bool False) []
[
Assign "cycle_1_princess_slain_offer_heard_menu_explore" = Val (Bool True)
,,,,,,,,,
Jump to cycle_1_princess_slain_offer_heard_menu
],Choice - You'd better be right about...If "cycle_1_princess_slain_offer_heard_menu_explore" []
[,,
{Label: cycle_1_princess_slain_die
[,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,
Assign "default_mouse" = Val (String "blood")
,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,,,,
Assign "persistent.death_count" += Val (Int 1)
,,,,
Assign "quick_menu" = Val (Bool False)
,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,
Jump to start_2
]}
],Choice - I'm not risking {b}death{/b...If "cycle_1_princess_slain_offer_heard_menu_explore" && Var "ch1_mound" == Val (Bool False) []
[,,
Jump to cycle_1_princess_slain_eternity
],Choice - Anything to get out of this...
[,,
Jump to cycle_1_princess_slain_die
],Choice - You're right. I didn't like...If Var "ch1_mound" == Val (Bool False) []
[,,,,
Jump to cycle_1_princess_slain_eternity
]]}
]}
]]
]]
]}
]]}
]}
]}
,
{Label: basement_1_knife_dropped
[
Assign "basement_1_talked" = Val (Bool True)
,
Assign "can_spectre" = Val (Bool False)
,,
Assign "basement_1_nerves_steeled_hesitated" = Val (Bool True)
,
[If "basement_1_nerves_steeled" [
Assign "basement_1_threatening_tension" = Val (Bool True)
]]
,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,
{Label: basement_1_knife_dropped_menu
[,,
{Choice Branch: [Choice - (Explore) ''Yeah, it's uh.....If Var "basement_1_knife_dropped_awkward" == Val (Bool False) && Var "basement_1_knife_dropped_relationship_explore" == Val (Bool False) && Var "basement_1_shared_task" == Val (Bool False) []
[
Assign "basement_1_knife_dropped_relationship_explore" = Val (Bool True)
,
Assign "basement_1_knife_dropped_awkward" = Val (Bool True)
,,,,,
{Choice Branch: [Choice - ''I have my reasons. Do you...
[,
[If "basement_1_nerves_steeled_hesitated" [,]]
,
[Elif "basement_1_nerves_steeled" [,]]
,
[Else [,]]
,,,,,,,,,,,,,
Jump to basement_1_knife_dropped_menu
],Choice - ''Do you know why I'm here ...
[,,,,
[If Var "basement_1_threatening_tension" == Val (Bool False) [,,,]]
,
[Else [,,,]]
,,,,,,,,
Jump to basement_1_knife_dropped_menu
],Choice - ''You're supposed to end th...If Var "basement_1_shared_task" == Val (Bool False) && Var "tower_encountered" == Val (Bool False) []
[
{Label: basement_1_shared_task_join
[
Assign "basement_1_nerves_fear" = Val (Bool True)
,
Assign "basement_1_shared_task" = Val (Bool True)
,,,,
[If Var "basement_1_threatening_tension" == Val (Bool False) [,,,,,,,,]]
,
[Else [,,]]
,,,,,
{Choice Branch: [Choice - (Deflect) ''What are you go...If Var "what_would_you_do_1" == Val (Bool False) []
[
Assign "what_would_you_do_1" = Val (Bool True)
,,,,,,,,,,,
Jump to basement_1_philosophy_knife
],Choice - ''I've been told enough.''
[,,,,,,
Jump to basement_1_philosophy_knife
],Choice - ''I was hoping you'd tell m...
[
Assign "basement_1_nerves_fear" = Val (Bool False)
,,,,,,,,,
Jump to basement_1_philosophy_knife
],Choice - ''No. But I'm sure they hav...
[,,,,,,
Jump to basement_1_philosophy_knife
],Choice - ''No. And if I'm being hone...
[
Assign "basement_1_nerves_fear" = Val (Bool False)
,
Assign "basement_1_nerves_doubt" = Val (Bool True)
,,,,,,,,
{Choice Branch: [Choice - ''I still have a few more q...
[,,,,
Assign "previous_dialogue" = Val (String "Fine. What do you want to know?\\n")
,
Assign "speaker" = Var "p"
,
Jump to basement_1_knife_dropped_menu
],Choice - [[Slay the Princess] ''Actu...If "can_spectre" && Var "spectre_encountered" == Val (Bool False) || Var "razor_encountered" == Val (Bool False) || "basement_1_nerves_armed" && Var "razor_encountered" == Val (Bool False) || "basement_1_nerves_steeled_hesitated" && Var "adversary_encountered" == Val (Bool False) || Var "tower_encountered" == Val (Bool False) || Var "nightmare_encountered" == Val (Bool False) || "basement_1_nerves_fear" && Var "tower_encountered" == Val (Bool False) && "can_slay" []
[,,
Jump to basement_1_knife_slay_join
],Choice - [[Examine the chains] ''I'l...If Var "prisoner_encountered" == Val (Bool False) || Var "tower_encountered" == Val (Bool False) || Var "adversary_encountered" == Val (Bool False) []
[,
Jump to basement_1_knife_rescue
]]}
],Choice - [[Remain silent.]
[,,
Jump to basement_1_philosophy_knife
,
{Label: basement_1_philosophy_knife
[,,
Assign "basement_1_philosophy_knife_flag" = Val (Bool True)
,
Assign "basement_1_knife_vague_count" += Val (Int 1)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to basement_1_knife_dropped_menu
]}
]]}
]}
],Choice - ''I've been told things, bu...
[,,,,,,,
Jump to basement_1_knife_dropped_menu
]]}
],Choice - (Explore) ''A 'relationship...If Var "basement_1_knife_dropped_relationship_explore" == Val (Bool False) && Var "basement_1_knife_dropped_awkward" == Val (Bool False) []
[
Assign "basement_1_knife_dropped_awkward" = Val (Bool True)
,
Assign "basement_1_knife_dropped_relationship_explore" = Val (Bool True)
,,,,,
Jump to basement_1_knife_dropped_menu
],Choice - (Explore) ''How would I get...If Var "basement_1_knife_how_escape" == Val (Bool False) []
[,
Assign "basement_1_knife_how_escape" = Val (Bool True)
,,,,,,,,,,,,,,,,,
Jump to basement_1_knife_dropped_menu
],Choice - (Explore) ''I'm here becaus...If Var "basement_1_shared_task" == Val (Bool False) && Var "tower_encountered" == Val (Bool False) []
[
Jump to basement_1_shared_task_join
],Choice - (Explore) ''There's people ...If Var "basement_1_shared_task" == Val (Bool False) && Var "tower_encountered" == Val (Bool False) []
[
Jump to basement_1_shared_task_join
],Choice - (Explore) ''What's your nam...If Var "basement_1_name_ask" == Val (Bool False) []
[
Assign "basement_1_knife_vague_count" += Val (Int 1)
,
Assign "basement_1_name_ask" = Val (Bool True)
,,,,,,,,
[If Var "basement_1_knife_vague_count" == Val (Int 1) [,]]
,
[Elif Var "basement_1_knife_vague_count" == Val (Int 2) [,]]
,
Jump to basement_1_knife_dropped_menu
],Choice - (Explore) ''How long have y...If Var "basement_1_knife_how_long" == Val (Bool False) []
[,
Assign "basement_1_knife_vague_count" += Val (Int 1)
,
Assign "basement_1_knife_how_long" = Val (Bool True)
,,,,,
[If Var "basement_1_knife_vague_count" == Val (Int 1) [,]]
,
[Elif Var "basement_1_knife_vague_count" == Val (Int 2) [,]]
,
Jump to basement_1_knife_dropped_menu
],Choice - (Explore) ''Do you know {i}...If Var "basement_1_knife_why_here_explore" == Val (Bool False) && Var "basement_1_shared_task" == Val (Bool False) []
[,
Assign "basement_1_knife_why_here_explore" = Val (Bool True)
,,,,
{Choice Branch: [Choice - ''You're apparently going t...If Var "tower_encountered" == Val (Bool False) []
[
Jump to basement_1_shared_task_join
],Choice - ''I know what I've been tol...
[,,,,
Jump to basement_1_knife_dropped_menu
],Choice - (Lie) ''No.''
[,,,,,,,,,,
Jump to basement_1_knife_dropped_menu
],Choice - [[Remain silent.]
[,,,,
Jump to basement_1_knife_dropped_menu
]]}
],Choice - ''Okay, we've talked enough...
[,,,,,,
{Choice Branch: [Choice - [[Slay the Princess.]If "can_spectre" && Var "spectre_encountered" == Val (Bool False) || Var "razor_encountered" == Val (Bool False) || "basement_1_nerves_armed" && Var "razor_encountered" == Val (Bool False) || "basement_1_nerves_steeled_hesitated" && Var "adversary_encountered" == Val (Bool False) || Var "tower_encountered" == Val (Bool False) || Var "nightmare_encountered" == Val (Bool False) || "basement_1_nerves_fear" && Var "tower_encountered" == Val (Bool False) && "can_slay" []
[,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,
Jump to basement_1_knife_slay_join
],Choice - ''I'm getting you out of he...If Var "prisoner_encountered" == Val (Bool False) || Var "tower_encountered" == Val (Bool False) || Var "adversary_encountered" == Val (Bool False) []
[,,,
Jump to basement_1_knife_rescue
],Choice - ''I'm going to keep you loc...If Var "nightmare_encountered" == Val (Bool False) []
[
{Label: basement_1_knife_nightmare_join
[,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) || "basement_1_nerves_armed" && Var "razor_encountered" == Val (Bool False) []
[
Assign "basement_1_nerves_fear" = Val (Bool True)
,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "blade")
,
Jump to basement_1_knife_slay_join
],Choice - ''Okay. Let's get you out o...If Var "prisoner_encountered" == Val (Bool False) || Var "tower_encountered" == Val (Bool False) || Var "adversary_encountered" == Val (Bool False) []
[,,,,,,,,,,,
Jump to basement_1_knife_rescue
],Choice - Uh, I {i}made{/i} my choice...
[,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "blade")
,
Assign "quick_menu" = Val (Bool False)
,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,
{Choice Branch: [Choice - No, we're sticking to the p...
[,
Assign "nightmare_no_wounds" = Val (Bool True)
,,,,
Assign "quick_menu" = Val (Bool False)
,,,,
Jump to nightmare_join
],Choice - Oh that's a relief! I was a...If Var "tower_encountered" == Val (Bool False) []
[
Assign "basement_1_nerves_fear" = Val (Bool True)
,,,
Assign "quick_menu" = Val (Bool False)
,,,,
Jump to basement_1_knife_slay_join
]]}
]]}
]}
]]}
]]}
]}
]}
,
{Label: basement_1_knife_rescue
[,,,,,,,
[If Var "basement_1_knife_how_escape" == Val (Bool False) [,,,,]]
,
[Else [,,]]
,,,
{Choice Branch: [Choice - ''And if there isn't a key....If "basement_1_knife_how_escape" []
[,,,,,,,],Choice - ''And if there isn't a key....If Var "basement_1_knife_how_escape" == Val (Bool False) []
[,,,,,,,],Choice - ''I'm going to check upstai...
[,,]]}
,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,
{Label: basement_1_knife_rescue_door
[,,,
{Choice Branch: [Choice - (Explore) ''Hey! Let me out...If Var "basement_1_knife_rescue_door_shout_explore" == Val (Bool False) []
[
Assign "basement_1_knife_rescue_door_shout_explore" = Val (Bool True)
,,,
[If Var "basement_1_knife_rescue_door_try_explore" == Val (Bool True) [,]]
,
[Else [,]]
,
Jump to basement_1_knife_rescue_door
],Choice - (Explore) [[Try the door.]If Var "basement_1_knife_rescue_door_try_explore" == Val (Bool False) []
[,
Assign "basement_1_knife_rescue_door_try_explore" = Val (Bool True)
,,,
[If Var "basement_1_knife_rescue_door_shout_explore" == Val (Bool True) [,]]
,
[Else [,]]
,
Jump to basement_1_knife_rescue_door
],Choice - [[Return to the bottom of t...
[,,
Assign "quick_menu" = Val (Bool False)
,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,]]}
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,
[If Var "preferences.self_voicing" == Val (Bool False) [
Assign "config.menu_include_disabled" = Val (Bool True)
]]
,
{Choice Branch: [Choice - [[Save the Princess.]If Var "prisoner_encountered" == Val (Bool False) || Var "tower_encountered" == Val (Bool False) []
[
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Approach the locked door.]
[,,,,,,,,,,,,,,,,,,
[If "tower_encountered" && Var "preferences.self_voicing" == Val (Bool False) [
Assign "config.menu_include_disabled" = Val (Bool True)
]]
,
Assign "small_yadj" = Val (Bool True)
,
{Choice Branch: [Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) []
[
{Label: basement_1_knife_rescue_controlled_start
[
Assign "small_yadj" = Val (Bool False)
,
Assign "config.menu_include_disabled" = Val (Bool False)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Slay the Princess.]
[
Jump to basement_1_knife_rescue_controlled_2_start
],Choice - [[Give up.]
[
Assign "tower_pathetic" = Val (Bool True)
,
Jump to basement_1_knife_fury
]]}
,
{Label: basement_1_knife_fury
[,
Assign "default_mouse" = Val (String "default")
,
Assign "current_princess" = Val (String "tower")
,
Assign "config.menu_include_disabled" = Val (Bool False)
,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,
Assign "persistent.death_count" += Val (Int 1)
,,,,,,,,,,
Jump to start_2
]}
]}
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_start
],Choice - [[Warn her.]
[,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) []
[
{Label: basement_1_knife_rescue_controlled_2_start
[
Assign "small_yadj" = Val (Bool False)
,
Assign "config.menu_include_disabled" = Val (Bool False)
,,,
Assign "current_princess" = Val (String "tower")
,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,
Assign "persistent.death_count" += Val (Int 1)
,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,
Jump to start_2
]}
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_2_start
],Choice - [[Resist.]If Var "prisoner_encountered" == Val (Bool False) []
[
Assign "small_yadj" = Val (Bool False)
,
Assign "config.menu_include_disabled" = Val (Bool False)
,
Assign "current_princess" = Val (String "prisoner")
,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,,,
Assign "persistent.death_count" += Val (Int 1)
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,
Jump to start_2
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_2_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_2_start
]]}
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_start
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) && Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to basement_1_knife_rescue_controlled_start
]]}
]]}
],Choice - [[Slay the Princess.]If Var "tower_encountered" == Val (Bool False) || Var "adversary_encountered" == Val (Bool False) || Var "nightmare_encountered" == Val (Bool False) []
[
Assign "basement_1_knife_wounded" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Slay the Princess.]
[,,,,,,,,,,,,,,
Assign "config.menu_include_disabled" = Val (Bool True)
,
{Choice Branch: [Choice - [[Give up.]If Var "tower_encountered" == Val (Bool False) []
[
Assign "tower_pathetic" = Val (Bool True)
,
Assign "current_princess" = Val (String "tower")
,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,
Assign "config.menu_include_disabled" = Val (Bool False)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "persistent.death_count" += Val (Int 1)
,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,
Jump to start_2
],Choice - [[Finish the job.]If Var "adversary_encountered" == Val (Bool False) []
[
Assign "loop_1_princess_killed" = Val (Bool True)
,
Assign "config.menu_include_disabled" = Val (Bool False)
,
Assign "current_princess" = Val (String "adversary")
,,,,,,,,,,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,
Assign "persistent.death_count" += Val (Int 1)
,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,
Jump to start_2
],Choice - [[Run for the stairs and lo...If Var "nightmare_encountered" == Val (Bool False) []
[
Assign "nightmare_join_fled" = Val (Bool True)
,
Assign "current_princess" = Val (String "nightmare")
,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
Assign "quick_menu" = Val (Bool False)
,,,,
Jump to nightmare_join
]]}
]]}
]]}
]}
]}
,
{Label: start
[,,
Assign "quick_menu" = Val (Bool False)
,
Assign "_window_during_transitions" = Val (Bool True)
,,,,,,
Assign "current_loop" = Val (Int 1)
,,
Assign "quick_menu" = Val (Bool False)
,
Assign "current_princess" = Val (String "base")
,
Assign "trait_hero" = Val (Bool True)
,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
[If Var "loops_finished" > Val (Int 0) || Var "loops_destroyed" > Val (Int 0) []]
,,,,,,,,
[If "adversary_encountered" && "prisoner_encountered" && "tower_encountered" && "spectre_encountered" && "razor_encountered" && "nightmare_encountered" && "damsel_encountered" && "beast_encountered" && "witch_encountered" [
Assign "ch1_can_cabin" = Val (Bool False)
]]
,
Assign "config.menu_include_disabled" = Val (Bool False)
,
{Label: forest_dialogue
[,,,,,,,,,,,,,
{Choice Branch: [Choice - (Explore) The end of the wo...If Var "forest_1_questioning_start" == Val (Bool False) []
[
Assign "forest_1_questioning_start" = Val (Bool True)
,,,
Jump to forest_dialogue
],Choice - (Explore) But how can a pri...If "forest_1_questioning_start" && Var "forest_1_questioning_followup" == Val (Bool False) []
[
Assign "forest_1_questioning_followup" = Val (Bool True)
,,,
Jump to forest_dialogue
],Choice - (Explore) If you don't tell...If "forest_1_questioning_start" && Var "forest_1_questioning_followup" == Val (Bool False) []
[
Assign "forest_1_why_dangerous" = Val (Bool True)
,
Assign "forest_1_questioning_followup" = Val (Bool True)
,,,
Jump to forest_dialogue
],Choice - (Explore) Okay. What happen...If "forest_1_why_dangerous" && Var "forest_1_what_happens" == Val (Bool False) []
[
Assign "forest_1_what_happens" = Val (Bool True)
,,,
Jump to forest_dialogue
],Choice - (Explore) Do you have any e...If Var "forest_1_questioning_evidence" == Val (Bool False) && "forest_1_questioning_start" []
[
Assign "forest_1_questioning_evidence" = Val (Bool True)
,,,
Jump to forest_dialogue
],Choice - (Explore) Have you consider...If Var "forest_1_casuality_explore" == Val (Bool False) []
[
Assign "forest_1_casuality_explore" = Val (Bool True)
,,,,,,,,,,,,,
Jump to forest_dialogue
],Choice - (Explore) Killing a princes...If Var "forest_1_conscientious_objector_explore" == Val (Bool False) []
[
Assign "forest_1_conscientious_objector_explore" = Val (Bool True)
,,,
Jump to forest_dialogue
],Choice - (Explore) Can't someone els...If Var "forest_1_someone_else_explore" == Val (Bool False) []
[
Assign "forest_1_someone_else_explore" = Val (Bool True)
,
[If "forest_1_questioning_followup" [,,,,,]]
,
[Else [,]]
,
Jump to forest_dialogue
],Choice - (Explore) Forget it, I'm no...If Var "forest_1_refuse_explore" == Val (Bool False) []
[
Assign "forest_1_refuse_explore" = Val (Bool True)
,,,
Jump to forest_dialogue
],Choice - (Explore) Have you consider...If Var "forest_1_let_it_burn" == Val (Bool False) []
[
Assign "forest_1_let_it_burn" = Val (Bool True)
,,,,,
Jump to forest_dialogue
],Choice - (Explore) Do I get some sor...If Var "forest_1_prize" == Val (Bool False) []
[
Assign "forest_1_prize" = Val (Bool True)
,,,
Jump to forest_dialogue
],Choice - (Explore) Can you tell me w...If "forest_1_prize" && Var "forest_1_prize_follow_up" == Val (Bool False) []
[
Assign "forest_1_prize_follow_up" = Val (Bool True)
,,,
Jump to forest_dialogue
],Choice - Look, I'll go to the cabin ...If "forest_1_refuse_explore" || "forest_1_questioning_start" && "ch1_can_cabin" []
[,
Assign "forest_1_reluctant_visit" = Val (Bool True)
,
Assign "forest_1_web_of_lies" = Val (Bool True)
,,,,,,],Choice - Okay. Fine. I'll go to the ...If "forest_1_refuse_explore" && "ch1_can_cabin" []
[
Jump to start_get_this_over_with_join
],Choice - Okay, I'm sold. Let's get t...If "forest_1_questioning_start" && "ch1_can_cabin" []
[
{Label: start_get_this_over_with_join
[,]}
,
Jump to cabin_arrival_1
],Choice - Oh, okay. Thanks for tellin...If "ch1_can_cabin" []
[,,
Jump to cabin_arrival_1
],Choice - Sweet! I've always wanted t...If Var "forest_1_conscientious_objector_explore" == Val (Bool False) && "ch1_can_cabin" []
[,,
Jump to cabin_arrival_1
],Choice - [[Silently continue to the ...If "ch1_can_cabin" []
[
Jump to cabin_arrival_1
],Choice - [[Turn around and leave.]If Var "stranger_encountered" == Val (Bool False) []
[,
Assign "forest_1_leave_attempt" = Val (Bool True)
,
{Label: turn_and_leave_join
[,,
{Choice Branch: [Choice - Okay, fine. You're persiste...If "ch1_can_cabin" []
[,,
[If Var "current_loop" == Val (Int 2) [
[If "trait_stubborn" [,]]
,
[Elif "trait_hunted" [,]]
,
[Elif "trait_smitten" [,]]
,
[Elif "trait_paranoid" [,,,]]
,
[Elif "trait_skeptic" [,]]
,
[Elif "trait_flinching" [,]]
,
[Elif "trait_cold" [,]]
,
[Elif "trait_opportunist" [,]]
,
[Elif "trait_broken" [,]]
,
Assign "stranger_override" = Val (Bool False)
,
Jump to chapter_2_stranger_rejoin_1
]]
,
Jump to cabin_arrival_1
],Choice - Okay, fine. I'll go to the ...If "ch1_can_cabin" []
[,,
[If Var "current_loop" == Val (Int 2) [
Assign "stranger_override" = Val (Bool False)
,
[If "trait_stubborn" [,]]
,
[Elif "trait_hunted" [,]]
,
[Elif "trait_smitten" [,]]
,
[Elif "trait_paranoid" [,,,]]
,
[Elif "trait_skeptic" [,]]
,
[Elif "trait_flinching" [,]]
,
[Elif "trait_cold" [,]]
,
[Elif "trait_opportunist" [,]]
,
[Elif "trait_broken" [,]]
,
Jump to chapter_2_stranger_rejoin_1
]]
,
Jump to cabin_arrival_1
],Choice - (Lie) Yes, I definitely kno...
[,,,,,,,,,,,,
Jump to turn_around_1_late_join
],Choice - Nope!
[
Jump to turn_around_1
],Choice - The only thing that matters...
[
Jump to turn_around_1
],Choice - It's like I said, I'm prett...If "forest_1_let_it_burn" []
[
Jump to forest_1_nihilism_walk
],Choice - I'm actually pretty okay wi...If Var "forest_1_let_it_burn" == Val (Bool False) []
[
{Label: forest_1_nihilism_walk
[,,]}
,
Jump to turn_around_1
],Choice - [[Quietly continue down the...
[
{Label: turn_around_1
[,
Assign "forest_1_flee_hero_spoke" = Val (Bool True)
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
{Label: turn_around_1_late_join
[
[If Var "current_loop" == Val (Int 1) [,,,]]
,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
[If "trait_cold" [,]]
,
{Choice Branch: [Choice - Okay, okay! I'm going into ...If "ch1_can_cabin" []
[,,
[If Var "current_loop" == Val (Int 2) [
Assign "stranger_override" = Val (Bool False)
,
[If "trait_stubborn" [,]]
,
[Elif "trait_hunted" [,]]
,
[Elif "trait_smitten" [,]]
,
[Elif "trait_paranoid" [,,,]]
,
[Elif "trait_skeptic" [,]]
,
[Elif "trait_flinching" [,]]
,
[Elif "trait_cold" [,]]
,
[Elif "trait_opportunist" [,]]
,
[Elif "trait_broken" [,]]
,
Jump to chapter_2_stranger_rejoin
]]
,,,,,,,,,
Jump to cabin_arrival_1_menu
],Choice - [[Turn around (again) and l...
[,,
[If Var "current_loop" != Val (Int 2) [
{Choice Branch: [Choice - I don't care! I'm not killi...
[,],Choice - Good! Maybe everyone {b}sho...
[,,,],Choice - You're not emotionally blac...
[,],Choice - [[Quietly continue down the...
[,]]}
]]
,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
[If Var "current_loop" == Val (Int 2) [,,,
Jump to caught_start
]]
,,,,,,,,,,,,,
[If "trait_stubborn" [,]]
,
[Elif "trait_hunted" [,]]
,
[Elif "trait_smitten" [,,]]
,
[Elif "trait_paranoid" [,]]
,
[Elif "trait_skeptic" [,]]
,
[Elif "trait_flinching" [,]]
,
[Elif "trait_opportunist" [,]]
,
[Elif "trait_broken" [,]]
,
{Choice Branch: [Choice - There's no fighting this, i...If "ch1_can_cabin" []
[,,
[If Var "current_loop" == Val (Int 2) [
Assign "stranger_override" = Val (Bool False)
,
[If "trait_stubborn" [,]]
,
[Elif "trait_hunted" [,]]
,
[Elif "trait_paranoid" [,]]
,
[Elif "trait_skeptic" [,]]
,
[Elif "trait_flinching" [,]]
,
[Elif "trait_cold" [,]]
,
[Elif "trait_opportunist" [,]]
,
[Elif "trait_broken" [,]]
,
Jump to chapter_2_stranger_rejoin
]]
,,,
Jump to cabin_arrival_1_menu
],Choice - Oh, yeah? Well I guess I st...
[
[If Var "current_princess" == Val (String "base") [
Assign "current_princess" = Val (String "stranger")
]]
,
Assign "config.menu_include_disabled" = Val (Bool True)
,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "persistent.death_count" += Val (Int 1)
,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,
Assign "current_princess" = Val (String "stranger")
,,
[If Var "current_princess" == Val (String "stranger") [
Jump to start_2
]]
]]}
]]}
]}
]}
]]}
]}
]]}
]}
]}
,
{Label: cabin_arrival_1
[,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,
[If Var "forest_1_web_of_lies" == Val (Bool False) [,,,]]
,
[If Var "forest_1_flee_hero_spoke" == Val (Bool False) [,,,]]
,
{Label: cabin_arrival_1_menu
[
{Choice Branch: [Choice - [[Proceed into the cabin.]
[,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,
Jump to cabin_interrior_1
]]}
]}
]}
,
{Label: cabin_interrior_1
[,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,
[If "beast_encountered" && "damsel_encountered" && "witch_encountered" [
Assign "ch1_can_empty" = Val (Bool False)
,
Assign "config.menu_include_disabled" = Val (Bool True)
]]
,
[If "adversary_encountered" && "prisoner_encountered" && "tower_encountered" && "spectre_encountered" && "razor_encountered" && "nightmare_encountered" [
Assign "ch1_can_knife" = Val (Bool False)
,
Assign "config.menu_include_disabled" = Val (Bool True)
]]
,
{Label: cabin_interrior_1_menu
[
[If "blade_held" [
Assign "config.menu_include_disabled" = Val (Bool False)
]]
,,,,
{Choice Branch: [Choice - (Explore) [[Take the blade.]If Var "blade_held" == Val (Bool False) && "ch1_can_knife" []
[
Assign "blade_taken_1" = Val (Bool True)
,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,,,,
Jump to cabin_interrior_1_menu
],Choice - [[Enter the basement.]If "ch1_can_empty" && Var "blade_held" == Val (Bool False) || "blade_held" []
[
Assign "config.menu_include_disabled" = Val (Bool False)
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,
[If "blade_held" [
Jump to basement_1_knife_start
]]
,
[Else [
Jump to basement_1_empty_start
]]
]]}
]}
]}
,
{Label: adversary_1_fight_immediate
[,,,,,,,,,
Jump to adversary_1_fight_immediate_late_join
]}
,
{Label: adversary_1_fight_immediate_late_join
[
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Keep pushing.]
[,,,,,,
Assign "adversary_understanding_comment" = Val (Bool True)
,
[If "adversary_attack_immediate" [,,,,]]
,
[Else [,,,,]]
,,
{Label: adversary_1_blade_fight_push_menu
[
{Choice Branch: [Choice - ''I do.''
[
Assign "adversary_understanding" = Val (String "agree")
,
Jump to adversary_1_blade_task_explain_join
],Choice - (Lie) ''I do.''
[
Assign "adversary_understanding" = Val (String "lie")
,
Jump to adversary_1_blade_task_explain_join
],Choice - ''What are you talking abou...
[
Assign "adversary_understanding" = Val (String "question")
,,,,
{Label: adversary_1_blade_task_explain_join
[
[If "basement_1_shared_task" [,,,,,,]]
,
[Else [,,,,,]]
,
[If Var "adversary_understanding" != Val (String "agree") [,,,,,,,,,,,,]]
,
[Else [,]]
]}
],Choice - [[Silently continue pushing.]
[
Assign "adversary_understanding_agree" = Val (Bool True)
,,,],Choice - [[Unlodge the blade.]
[
Jump to adversary_1_blade_fight_unlodge_join
]]}
]}
,,,,,,,,,,,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) [
Assign "adversary_1_chains_broken" = Val (Bool True)
,,]]
,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: adversary_1_blade_fight_first_join
[,,,,
{Choice Branch: [Choice - (Explore) I hope you heard ...If "adversary_1_forest_share_loop" && Var "adversary_1_narrator_proof" == Val (Bool False) []
[
Assign "adversary_1_narrator_proof" = Val (Bool True)
,
[If "adversary_blade_can_understanding" [
Assign "adversary_blade_can_understanding" = Val (Bool False)
]]
,
[If "adversary_1_forest_share_loop_insist" [,]]
,
[Else [,]]
,,,,,,,
Jump to adversary_1_blade_fight_first_join
],Choice - (Explore) ''Aren't you jump...If Var "adversary_blade_first_gun_jump" == Val (Bool False) []
[
Assign "adversary_blade_first_gun_jump" = Val (Bool True)
,
[If "adversary_blade_can_understanding" [
Assign "adversary_blade_can_understanding" = Val (Bool False)
]]
,,,,,,,,,,,,,,,,,,,,,,,
{Label: adversary_blade_kill_me_menu
[,,
{Choice Branch: [Choice - (Explore) ''How do I know y...If Var "adversary_blade_kill_me_trick_explore" == Val (Bool False) && Var "adversary_blade_kill_me_dropped" == Val (Bool False) []
[
Assign "adversary_blade_kill_me_trick_explore" = Val (Bool True)
,,,,,,,
Jump to adversary_blade_kill_me_menu
],Choice - (Explore) ''Cut it out, wil...If Var "adversary_blade_kill_me_dropped" == Val (Bool False) []
[
Assign "adversary_blade_kill_me_dropped" = Val (Bool True)
,,,,,,,,,
Jump to adversary_blade_kill_me_menu
],Choice - [[Slay the Princess.]
[
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blood")
,,
[If Var "adversary_blade_kill_me_dropped" == Val (Bool False) [
Jump to adversary_stabbed_heart
]]
,
[Else [
Jump to adversary_penultimate
]]
]]}
]}
],Choice - (Explore) ''Were you being ...If Var "adversary_blade_first_metaphor" == Val (Bool False) []
[
Assign "adversary_blade_first_metaphor" = Val (Bool True)
,
Assign "adversary_blade_can_understanding" = Val (Bool True)
,,,,,,,,,
Jump to adversary_1_blade_fight_first_join
],Choice - (Explore) ''Don't you want ...If Var "adversary_free_offer" == Val (Bool False) []
[
Assign "adversary_free_offer" = Val (Bool True)
,
[If "adversary_blade_can_understanding" [
Assign "adversary_blade_can_understanding" = Val (Bool False)
]]
,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - ''Oh I get it, so you're li...
[,,,,],Choice - ''There will always be anot...
[,,,,],Choice - ''There's no getting throug...
[,,,,],Choice - [[Say nothing.]
[,,,,],Choice - ''Okay, sure, I get it now....
[
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blood")
,,
Jump to adversary_penultimate
]]}
,
Jump to adversary_1_blade_fight_first_join
],Choice - (Explore) ''Is that what yo...If Var "adversary_blade_first_understanding" == Val (Bool False) && "adversary_blade_first_metaphor" && "adversary_blade_can_understanding" []
[
Assign "adversary_blade_first_understanding" = Val (Bool True)
,,,,,,,,,,,,,,
Jump to adversary_1_blade_fight_first_join
],Choice - (Explore) ''Yes! The two of...If Var "adversary_blade_first_understanding" == Val (Bool False) && "adversary_blade_first_metaphor" && "adversary_blade_can_understanding" []
[
Assign "adversary_blade_first_understanding" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,
Jump to adversary_1_blade_fight_first_join
],Choice - ''Actually, I think I'm don...If "adversary_can_fury" []
[
[If "fury_encountered" [
Assign "adversary_can_fury" = Val (Bool False)
,,,
Jump to adversary_1_blade_fight_first_join
]]
,
Assign "adversary_combat_to_pacifism" = Val (Bool True)
,,,,,,,,,,,
Jump to adversary_pacifism_explore
],Choice - [[Pick up the blade and att...
[
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blood")
,,
Jump to adversary_penultimate
]]}
]}
],Choice - [[Unlodge the blade and att...
[
{Label: adversary_1_blade_fight_unlodge_join
[,,,,,,,,,,,,,,,,,,,,,,
[If "adversary_understanding_comment" [,,,]]
,
Jump to adversary_1_fight_agile
]}
]]}
]}
,
{Label: adversary_stabbed_heart
[,,,,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Watch her body for a litt...
[,,,],Choice - [[Turn and leave.]
[
Assign "adversary_stabbed_heart_accept" = Val (Bool True)
,,,,,,,,,,,,]]}
,,,,,,,,,,,,,,,,,
[If "adversary_stabbed_heart_accept" [,,,,,,,,,,,,,,,,,,,,,,
Jump to adversary_no_die_join
]]
,
[Else [,,,,,,,,,,,,,,,,,,,,]]
,,,,,,,,
Jump to adversary_no_die_join
]}
,
{Label: adversary_no_die_join
[,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: adversary_stabbed_heart_menu
[,,
{Choice Branch: [Choice - (Explore) 'Close to untethe...
[,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - The Princess Can't Die.
[
Jump to adversary_stabbed_heart_cant_die
],Choice - The Princess Can't Die.If Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to adversary_stabbed_heart_cant_die
],Choice - The Princess Can't Die.If Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to adversary_stabbed_heart_cant_die
],Choice - The Princess Can't Die.If Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to adversary_stabbed_heart_cant_die
],Choice - The Princess Can't Die.If Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to adversary_stabbed_heart_cant_die
],Choice - The Princess Can't Die.If Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to adversary_stabbed_heart_cant_die
],Choice - The Princess Can't Die.If Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to adversary_stabbed_heart_cant_die
],Choice - The Princess Can't Die.If Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to adversary_stabbed_heart_cant_die
],Choice - The Princess Can't Die.If Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to adversary_stabbed_heart_cant_die
],Choice - The Princess Can't Die.If Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to adversary_stabbed_heart_cant_die
],Choice - The Princess Can't Die.If Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to adversary_stabbed_heart_cant_die
],Choice - The Princess Can't Die.If Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to adversary_stabbed_heart_cant_die
],Choice - You mean like 'The Princess...
[
{Label: adversary_stabbed_heart_cant_die
[,,,
[If Var "adversary_cant_die_thought" == Val (Bool False) [,]]
,
[Else [,]]
,
Assign "adversary_cant_die_thought" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Join your Adversary.]
[
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blood")
,,
Jump to adversary_end
]]}
]}
],Choice - The Princess Can't Die.
[
Jump to adversary_stabbed_heart_cant_die
],Choice - The Princess Can't Die.If Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to adversary_stabbed_heart_cant_die
],Choice - The Princess Can't Die.If Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to adversary_stabbed_heart_cant_die
],Choice - I'm not going to say The Pr...
[
Assign "adversary_cant_die_thought" = Val (Bool True)
,
Jump to adversary_stabbed_heart_cant_die
],Choice - The Princess Can't Die.
[
Jump to adversary_stabbed_heart_cant_die
],Choice - (Lie) 'The Princess Can Die.'
[
Assign "adversary_cant_die_thought" = Val (Bool True)
,
Assign "adversary_cant_die_lie" = Val (Bool True)
,
Jump to adversary_stabbed_heart_cant_die
],Choice - The Princess Can't Die.
[
Jump to adversary_stabbed_heart_cant_die
],Choice - The Princess Can't Die.If Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to adversary_stabbed_heart_cant_die
],Choice - The Princess Can't Die.If Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to adversary_stabbed_heart_cant_die
],Choice - The Princess Can't Die.If Var "preferences.self_voicing" == Val (Bool False) []
[
Jump to adversary_stabbed_heart_cant_die
]]}
],Choice - [[Attack her again.]
[
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blood")
,,
Jump to adversary_end
]]}
]}
]}
,
{Label: adversary_penultimate
[,
Assign "adversary_penultimate_seen" = Val (Bool True)
,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,
{Choice Branch: [Choice - [[Get up.]
[
Assign "adversary_respawn_count" += Val (Int 1)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to adversary_no_die_join
]]}
]}
,
{Label: adversary_end
[,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,
[If Var "adversary_respawn_count" == Val (Int 0) [
[If "adversary_cant_die_thought" [,,,,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Wake up.]
[,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Join your Adversary.]
[
Assign "adversary_respawn_count" += Val (Int 1)
]]}
]]}
]]
,
[Else [,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Get up.]
[,,,,,,,,,,,
{Choice Branch: [Choice - [[Slay the Princess.]
[
Assign "adversary_respawn_count" += Val (Int 1)
]]}
]]}
]]
,,,,,,,,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,,,,,,,,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" == Val (Int 0) [
{Choice Branch: [Choice - ''Chin up! Isn't this what ...
[
Jump to adversary_whisk_join
],Choice - ''Are you okay?''
[
Jump to adversary_whisk_join
],Choice - ''We ended the world, didn'...
[
Jump to adversary_whisk_join
],Choice - ''We've been fighting for a...
[
Jump to adversary_whisk_join
],Choice - [[Remain silent.]
[
Assign "adversary_whisk_silent" = Val (Bool True)
,
Jump to adversary_whisk_join
]]}
]]
]}
,
{Label: adversary_whisk_join
[,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Elif "adversary_whisk_silent" []]
,
[Else []]
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 1)
,
Jump to mirror_start
]}
,
{Label: adversary_1_assorted_variables
[,,,,,]}
,
{Label: adversary_1_distant_chat
[,,,,,,,,
Assign "adversary_1_narrator_accepts_origin" = Val (String "distant")
,,
[If Var "adversary_1_narrator_proof" == Val (Bool False) && "adversary_proof_toggle" [
Assign "adversary_1_narrator_accepts_origin" = Val (String "distant")
,
Assign "adversary_1_narrator_proof" = Val (Bool True)
,
Jump to adversary_1_narrator_accepts
]]
,
{Choice Branch: [Choice - (Explore) I hope you heard ...If "adversary_1_forest_share_loop" && Var "adversary_1_narrator_proof" == Val (Bool False) []
[
Assign "adversary_can_attack_immediate" = Val (Bool False)
,
Assign "adversary_1_narrator_proof" = Val (Bool True)
,
[If "adversary_1_forest_share_loop_insist" [,]]
,
[Else [,]]
,,,,,,,
Jump to adversary_1_distant_chat
],Choice - (Explore) ''You look... dif...If Var "adversary_different_comment" == Val (Bool False) []
[
Assign "adversary_can_attack_immediate" = Val (Bool False)
,
Assign "adversary_different_comment" = Val (Bool True)
,
Assign "adversary_proof_toggle" = Val (Bool True)
,
[If "blade_held" [,,,,]]
,
[Else [,,,,]]
,
Jump to adversary_1_distant_chat
],Choice - (Explore) ''So you {b}do{/b...If Var "adversary_memory_comment" == Val (Bool False) []
[
Assign "adversary_can_attack_immediate" = Val (Bool False)
,
Assign "adversary_memory_comment" = Val (Bool True)
,
Assign "adversary_proof_toggle" = Val (Bool True)
,
[If "blade_held" [,,,,,,
[If Var "adversary_1_narrator_proof" == Val (Bool False) [
Assign "adversary_1_narrator_accepts_origin" = Val (String "distant")
,
Jump to adversary_1_narrator_accepts
]]
]]
,
[Else [,,,,
[If Var "adversary_1_narrator_proof" == Val (Bool False) [
Assign "adversary_1_narrator_accepts_origin" = Val (String "distant")
,
Jump to adversary_1_narrator_accepts
]]
,,,,,,]]
,
Jump to adversary_1_distant_chat
],Choice - (Explore) ''I actually am j...If Var "adversary_chat_comment" == Val (Bool False) && Var "blade_held" == Val (Bool False) []
[
Assign "adversary_can_attack_immediate" = Val (Bool False)
,
Assign "adversary_chat_comment" = Val (Bool True)
,
Assign "adversary_proof_toggle" = Val (Bool True)
,
[If "basement_1_talked" [,,,,]]
,
[Else [,,,,]]
,
[If Var "adversary_1_narrator_proof" == Val (Bool False) [
Assign "adversary_1_narrator_accepts_origin" = Val (String "distant")
,
Jump to adversary_1_narrator_accepts
]]
,
Jump to adversary_1_distant_chat
],Choice - (Explore) ''I'm not scared ...If "adversary_scared_comment" && Var "adversary_closer_comment" == Val (Bool False) []
[
Assign "adversary_closer_comment" = Val (Bool True)
,
Assign "adversary_can_attack_immediate" = Val (Bool False)
,,,,,,
Jump to adversary_1_distant_chat
],Choice - (Explore) ''I'm actually he...If Var "adversary_free_offer" == Val (Bool False) []
[
Assign "adversary_free_offer" = Val (Bool True)
,
Assign "adversary_can_attack_immediate" = Val (Bool False)
,,,,,,,,,,
{Choice Branch: [Choice - ''You don't want to be free...
[,,,,,,,,
[If "blade_held" [,,,]]
,
[Else [,,,]]
,,,,,,
[If "blade_held" [,,,]]
,
[Else [,,,]]
,,,,,,],Choice - ''If you don't want to be f...
[
Assign "adversary_proof_toggle" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,
[If Var "adversary_1_narrator_proof" == Val (Bool False) [
Assign "adversary_1_narrator_accepts_origin" = Val (String "distant")
,
Jump to adversary_1_narrator_accepts
]]
],Choice - ''Me? Anyone? Why wouldn't ...
[,,
{Label: adversary_free_explore_join
[,,,,,,,,,,,,,,,,]}
],Choice - [[Remain silent.]
[,,
Jump to adversary_free_explore_join
]]}
,
Jump to adversary_1_distant_chat
],Choice - (Explore) ''I'm not saying ...If Var "adversary_unpack" == Val (Bool False) []
[
Assign "adversary_can_attack_immediate" = Val (Bool False)
,
Assign "adversary_unpack" = Val (Bool True)
,
Assign "adversary_proof_toggle" = Val (Bool True)
,,,,,,,,,,,
[If Var "adversary_1_narrator_proof" == Val (Bool False) [
Assign "adversary_1_narrator_accepts_origin" = Val (String "distant")
,
Jump to adversary_1_narrator_accepts
]]
,
Jump to adversary_1_distant_chat
],Choice - (Explore) ''I haven't decid...If Var "adversary_closer_comment" == Val (Bool False) []
[
Assign "adversary_can_attack_immediate" = Val (Bool False)
,
Assign "adversary_closer_comment" = Val (Bool True)
,
Assign "adversary_proof_toggle" = Val (Bool True)
,
[If "basement_1_talked" [,,,]]
,
[Else [,,,]]
,,,,,
[If Var "adversary_1_narrator_proof" == Val (Bool False) [
Assign "adversary_1_narrator_accepts_origin" = Val (String "distant")
,
Jump to adversary_1_narrator_accepts
]]
,
Jump to adversary_1_distant_chat
],Choice - (Explore) ''Don't worry, I'...If Var "adversary_unarmed_banter" == Val (Bool False) && Var "blade_held" == Val (Bool False) []
[
Assign "adversary_can_attack_immediate" = Val (Bool False)
,
Assign "adversary_unarmed_banter" = Val (Bool True)
,,,,,,,,,,
Jump to adversary_1_distant_chat
],Choice - [[Slay the Princess.]If "blade_held" && "adversary_can_attack_immediate" []
[,
Assign "adversary_attack_immediate" = Val (Bool True)
,,,,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,
Jump to adversary_1_fight_immediate
],Choice - [[Attack the Princess.]If "blade_held" && Var "adversary_can_attack_immediate" == Val (Bool False) []
[,,,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,
Jump to adversary_1_fight
],Choice - ''Fine. Let's do this.'' [[...If Var "blade_held" == Val (Bool False) && "adversary_unarmed_banter" && "adversary_can_fury" []
[
[If "fury_encountered" [
Assign "adversary_can_fury" = Val (Bool False)
,,,
Jump to adversary_1_distant_chat
]]
,
Jump to adversary_1_fight_unarmed
],Choice - [[Attack her unarmed.]If Var "blade_held" == Val (Bool False) && "adversary_can_fury" []
[
[If "fury_encountered" [
Assign "adversary_can_fury" = Val (Bool False)
,,,
Jump to adversary_1_distant_chat
]]
,
Jump to adversary_1_fight_unarmed
],Choice - ''The blade's upstairs. I'l...If Var "adversary_1_cabin_blade_taken" == Val (Bool False) []
[,,,,
Jump to adversary_1_retrieve_knife
],Choice - [[Step closer.]If "adversary_closer_comment" []
[
Jump to adversary_1_close_join
],Choice - ''I don't know what happene...If "adversary_can_fury" []
[
[If "fury_encountered" [
Assign "adversary_can_fury" = Val (Bool False)
,,,
Jump to adversary_1_distant_chat
]]
,
Jump to adversary_1_empty_leave
],Choice - [[Attempt to free the Princ...If "adversary_free_offer" && "blade_held" []
[
Jump to adversary_free_attempt
],Choice - [[Turn around and leave wit...If "adversary_can_fury" []
[
[If "fury_encountered" [
Assign "adversary_can_fury" = Val (Bool False)
,,,
Jump to adversary_1_distant_chat
]]
,
Jump to adversary_1_empty_leave
]]}
]}
,
{Label: adversary_1_narrator_accepts
[,
Assign "adversary_1_narrator_proof" = Val (Bool True)
,
[If "adversary_1_forest_share_loop" [,]]
,
[Else [,]]
,,,
[If "adversary_1_forest_share_loop" [,]]
,
[Else [,,,,,]]
,,,,,,,
{Choice Branch: [Choice - Just because it bothers you...
[,,,],Choice - (Lie) No. I don't know what...
[,,,],Choice - Don't worry. I'm going to d...
[,],Choice - You got me. Pretty much eve...
[,,,],Choice - [[Remain silent.]
[,]]}
,
[If Var "adversary_1_narrator_accepts_origin" == Val (String "distant") [
Jump to adversary_1_distant_chat
]]
,
[Elif Var "adversary_1_narrator_accepts_origin" == Val (String "close") [
Jump to adversary_1_close_menu
]]
]}
,
{Label: adversary_1_close_join
[,
Assign "quick_menu" = Val (Bool False)
,
Assign "adversary_1_narrator_accepts_origin" = Val (String "close")
,,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
[If Var "blade_held" == Val (Bool False) [,]]
,
[Else [,]]
,,,,,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,
{Label: adversary_1_close_menu
[,,,,,,,
{Choice Branch: [Choice - (Explore) ''Why do you want...If Var "adversary_why_violence" == Val (Bool False) && Var "adversary_spar_offer" == Val (Bool False) []
[
Assign "adversary_why_violence" = Val (Bool True)
,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,
[If Var "adversary_1_narrator_proof" == Val (Bool False) [
Assign "adversary_1_narrator_accepts_origin" = Val (String "close")
,
Jump to adversary_1_narrator_accepts
]]
,
Jump to adversary_1_close_menu
],Choice - (Explore) ''Can't we just.....If Var "adversary_spar_offer" == Val (Bool False) []
[
Assign "adversary_spar_offer" = Val (Bool True)
,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,
Jump to adversary_1_close_menu
],Choice - (Explore) ''If all you want...If Var "adversary_no_end" == Val (Bool False) []
[
Assign "adversary_no_end" = Val (Bool True)
,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,
[If "basement_1_shared_task" [,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,
[If Var "adversary_1_narrator_proof" == Val (Bool False) [
Assign "adversary_1_narrator_accepts_origin" = Val (String "close")
,
Jump to adversary_1_narrator_accepts
]]
]]
,
[Else [,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
]]
,
Jump to adversary_1_close_menu
],Choice - (Explore) ''So you're just....If Var "adversary_ask_free" == Val (Bool False) && Var "adversary_1_chains_broken" == Val (Bool False) && "adversary_free_offer" []
[,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,,
Jump to adversary_1_close_free_join
],Choice - (Explore) ''Don't you want ...If Var "adversary_ask_free" == Val (Bool False) && Var "adversary_1_chains_broken" == Val (Bool False) && Var "adversary_free_offer" == Val (Bool False) []
[,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,
{Label: adversary_1_close_free_join
[
Assign "adversary_1_chains_broken" = Val (Bool True)
,
Assign "adversary_free_offer" = Val (Bool True)
,
Assign "adversary_ask_free" = Val (Bool True)
,,,,,,,,,,,,,,,,,
[If "blade_held" [,,,]]
,
[Else [,,,]]
,,,,,,,,,
Jump to adversary_1_close_menu
]}
],Choice - (Explore) ''What happened a...If Var "adversary_ask_rebirth" == Val (Bool False) []
[
Assign "adversary_ask_rebirth" = Val (Bool True)
,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,
{Label: adversary_1_close_post_death_menu
[,,,,,,
[If Var "adversary_1_count" >= Val (Int 5) [
Jump to adversary_1_close_menu
]]
,
{Choice Branch: [Choice - (Explore) ''Or... we could ...If Var "adversary_1_close_single_file" == Val (Bool False) && "adversary_1_basement_different" []
[
Assign "adversary_1_count" += Val (Int 1)
,
Assign "adversary_1_close_single_file" = Val (Bool True)
,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,
Jump to adversary_1_close_post_death_menu
],Choice - (Explore) ''You don't have ...If Var "adversary_1_close_no_wounds" == Val (Bool False) []
[
Assign "adversary_1_count" += Val (Int 1)
,
Assign "adversary_1_close_no_wounds" = Val (Bool True)
,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,
Jump to adversary_1_close_post_death_menu
],Choice - (Explore) ''You're differen...If Var "adversary_1_close_different" == Val (Bool False) []
[
Assign "adversary_1_count" += Val (Int 1)
,
Assign "adversary_1_close_different" = Val (Bool True)
,
[If "adversary_different_comment" [,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
]]
,
[Else [
Assign "adversary_different_comment" = Val (Bool True)
,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
]]
,
Jump to adversary_1_close_post_death_menu
],Choice - (Explore) ''The basement is...If Var "adversary_1_basement_different" == Val (Bool False) []
[
Assign "adversary_1_count" += Val (Int 1)
,
Assign "adversary_1_basement_different" = Val (Bool True)
,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,
Jump to adversary_1_close_post_death_menu
],Choice - (Explore) ''Doesn't any of ...If Var "adversary_1_close_bother" == Val (Bool False) []
[
Assign "adversary_1_close_bother" = Val (Bool True)
,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,
Jump to adversary_1_close_post_death_menu
],Choice - [[Leave it at that.]
[
[If Var "adversary_1_narrator_proof" == Val (Bool False) [
Assign "adversary_1_narrator_accepts_origin" = Val (String "close")
,
Jump to adversary_1_narrator_accepts
]]
,
Jump to adversary_1_close_menu
]]}
]}
],Choice - (Explore) ''We have to figu...If Var "adversary_close_why" == Val (Bool False) && Var "adversary_close_purpose" == Val (Bool False) []
[
Assign "adversary_close_why" = Val (Bool True)
,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,
{Choice Branch: [Choice - ''I don't mean 'why are we ...
[,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,
Jump to adversary_1_close_menu
],Choice - ''You were put down here fo...
[,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,
Jump to adversary_1_princess_grin
],Choice - ''We're here because some p...
[,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,
Jump to adversary_1_princess_grin
],Choice - ''We're here because you're...If Var "adversary_no_end" == Val (Bool False) []
[
Assign "adversary_no_end" = Val (Bool True)
,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,,,,,,,
Jump to adversary_1_close_menu
],Choice - [[Leave it at that.]
[
Jump to adversary_1_close_menu
]]}
],Choice - (Explore) ''You were put do...If Var "adversary_close_purpose" == Val (Bool False) []
[,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,
Jump to adversary_1_princess_grin
],Choice - (Explore) ''The last time w...If "basement_1_shared_task" && Var "adversary_close_purpose" == Val (Bool False) []
[,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,
{Label: adversary_1_princess_grin
[
Assign "adversary_close_purpose" = Val (Bool True)
,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,,
[If "blade_held" [,]]
,
[Else [,]]
,
Jump to adversary_1_close_menu
]}
],Choice - [[Attack the Princess.]If "blade_held" []
[
Jump to adversary_1_fight
],Choice - ''Fine. If you want a fight...If "blade_held" []
[
Jump to adversary_1_fight
],Choice - ''Fine. If you want a fight...If Var "adversary_1_cabin_blade_taken" == Val (Bool False) []
[,,
Jump to adversary_1_retrieve_knife
],Choice - ''I'm not going to fight yo...If "adversary_can_fury" []
[
[If "fury_encountered" [
Assign "adversary_can_fury" = Val (Bool False)
,,,,,
Jump to adversary_1_close_menu
]]
,
Assign "adversary_1_narrator_accepts_origin" = Val (String "close")
,
Jump to adversary_1_refuse
],Choice - [[Attempt to free the Princ...If "adversary_free_offer" || "adversary_close_why" || "adversary_close_purpose" && "blade_held" && Var "adversary_1_chains_broken" == Val (Bool False) []
[
Jump to adversary_free_attempt
],Choice - [[Turn around and leave.]If "adversary_can_fury" []
[
[If "fury_encountered" [
Assign "adversary_can_fury" = Val (Bool False)
,,,,,
Jump to adversary_1_close_menu
]]
,
Jump to adversary_1_empty_leave
],Choice - [[Remain silent.]If "adversary_can_fury" []
[
[If "fury_encountered" [
Assign "adversary_can_fury" = Val (Bool False)
,,,,,
Jump to adversary_1_close_menu
]]
,
Assign "adversary_1_narrator_accepts_origin" = Val (String "close")
,
Jump to adversary_1_refuse
]]}
]}
]}
,
{Label: adversary_1_flee
[,,
{Label: adversary_1_empty_leave
[,
[If Var "adversary_1_narrator_accepts_origin" == Val (String "close") [,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,]]
,
[Elif Var "adversary_1_narrator_accepts_origin" == Val (String "chains") []]
,
[Else [,]]
,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) [
Assign "adversary_1_chains_broken" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - (Explore) Okay, team. What ...
[,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,
{Label: adversary_1_flee_die_join
[,,,,,,,,
[If "adversary_1_flee_die_choice" [,]]
,
[If "adversary_1_narrator_proof" [,]]
,
[Else [,]]
,
Assign "fury_source" = Val (String "death_downstairs")
,
Jump to fury_start
]}
],Choice - [[Turn and fight her head-on.]If "blade_held" []
[
Assign "adversary_1_style" = Val (String "direct")
,,,,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,
Jump to adversary_1_fight
],Choice - [[Dodge to the side and cou...If "blade_held" []
[
Assign "adversary_1_style" = Val (String "agile")
,
Jump to adversary_1_fight_agile
],Choice - [[Run like hell.]
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
[If "blade_held" [,]]
,,,,
Jump to adversary_1_upstairs
],Choice - [[Die.]
[
Assign "adversary_1_flee_die_choice" = Val (Bool True)
,,,,,,
{Label: adversary_1_flee_die_action
[,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,
Jump to adversary_1_flee_die_join
]}
]]}
]]
,
[Else [,,,,,,,,,
[If "blade_held" [,]]
,
[Else [,]]
,
{Choice Branch: [Choice - [[Turn and fight.]If "blade_held" []
[,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,
{Label: adversary_1_flee_free_stopped_join
[,,
Jump to adversary_1_flee_die_join
]}
],Choice - [[Run like hell.]
[
{Label: adversary_flee_late_join
[,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,]}
,
Jump to adversary_1_flee_free_stopped_join
],Choice - [[Die.]
[
Jump to adversary_1_flee_die_action
]]}
]]
]}
]}
,
{Label: adversary_1_upstairs
[
Assign "quick_menu" = Val (Bool False)
,,,,,,
[If Var "blade_held" == Val (Bool False) []]
,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
[If Var "blade_held" == Val (Bool False) [,,
{Choice Branch: [Choice - [[Take the blade.]If Var "blade_held" == Val (Bool False) []
[
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,],Choice - [[You're fine just the way ...
[,]]}
]]
,,,
{Label: adversary_1_upstairs_late_join
[,
Assign "adversary_1_upstairs_flag" = Val (Bool True)
,,,,,
[If Var "adversary_1_retrieve_knife_explore" == Val (Bool False) [,]]
,
[Else [,]]
,
[If "blade_held" [,,,,,]]
,
[Else [,,,,,,,,,]]
,,,,,,,,,,,,,,,,,,
[If "blade_held" && Var "adversary_1_cabin_blade_taken" == Val (Bool False) [,,]]
,
[Elif "blade_held" [,,]]
,
[Else [,,]]
,,,,,,,,
[If "blade_held" [
[If "adversary_1_wounded" [,
Assign "adversary_upstairs_fury" = Val (Bool True)
,,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,
Jump to adversary_1_pulverized_upstairs
]]
,
[Else [,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
Assign "trait_hunted" = Val (Bool True)
,
Jump to adversary_2_start
]]
]]
,
[Else [,,,,,,,,,,,,,,,,,,,,,,
{Label: adversary_1_pulverized_upstairs
[,,,,,,,,
[If "blade_held" []]
,
[Else []]
,,
[If "blade_held" [
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,]]
,,,,,,,,,,,,,,,
Assign "fury_source" = Val (String "death_upstairs")
,
Jump to fury_start
]}
]]
]}
]}
,
{Label: adversary_1_refuse
[,,,,,,
[If "blade_held" [
[If Var "adversary_1_narrator_accepts_origin" == Val (String "close") [,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
]]
,
[Else []]
,,,,,
[If Var "adversary_1_narrator_accepts_origin" == Val (String "close") [,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
]]
,
[Else []]
,,]]
,
[Else [,
[If Var "adversary_1_narrator_accepts_origin" == Val (String "close") [,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
]]
,
[Else []]
,,]]
,
[If Var "adversary_1_chains_broken" == Val (Bool False) [
[If Var "adversary_1_narrator_accepts_origin" == Val (String "close") [,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
]]
,
[Else []]
,,,,,,,,,,,
Assign "adversary_1_chains_broken" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,
[If "blade_held" [,,,]]
,
[Else [,,,]]
,
{Choice Branch: [Choice - [[Attack the Princess.]If "blade_held" []
[,,,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,
Jump to adversary_1_fight
],Choice - ''Okay, fine. If you want t...If Var "adversary_1_cabin_blade_taken" == Val (Bool False) []
[,,
Jump to adversary_1_retrieve_knife
],Choice - [[Flee up the stairs and re...If Var "adversary_1_cabin_blade_taken" == Val (Bool False) []
[
Assign "adversary_1_narrator_accepts_origin" = Val (String "chains")
,
Jump to adversary_1_empty_leave
],Choice - ''This doesn't change anyth...
[,,
Jump to adversary_pacifism
],Choice - [[Silently stand your groun...
[,,
Jump to adversary_pacifism
]]}
]]
,
[Else [
{Label: adversary_pacifism
[,,
[If Var "adversary_1_narrator_accepts_origin" != Val (String "close") [,,,]]
,
[If "blade_held" [
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,]]
,,,,,,,,,,,,,,,
[If "adversary_1_cabin_blade_taken" [,,
[If "adversary_combat_to_pacifism" [,,,,,,]]
,
[Else [,,,,,,]]
,,,,,,,,,,,,,,,,,,,,,,,,]]
,
[Else [,,,,,]]
]}
]]
,
{Label: adversary_pacifism_explore
[
Assign "adversary_1_wounded" = Val (Bool True)
,,,
{Choice Branch: [Choice - (Explore) ''I can't get up.''If Var "adversary_pacifism_stuck" == Val (Bool False) []
[
Assign "adversary_pacifism_stuck" = Val (Bool True)
,,
[If "adversary_combat_to_pacifism" []]
,
[Else []]
,,,,
[If "adversary_combat_to_pacifism" []]
,
[Else []]
,,,
[If "adversary_combat_to_pacifism" []]
,
[Else []]
,
Jump to adversary_pacifism_explore
],Choice - ''You might as well just ki...If "adversary_pacifism_stuck" []
[,
[If "adversary_combat_to_pacifism" []]
,
[Else []]
,,,
Jump to adversary_pacifism_death_join
],Choice - [[Get up.]If "adversary_pacifism_stuck" []
[
Assign "adversary_pacifism_standing" = Val (Bool True)
,,,,,
[If "adversary_combat_to_pacifism" []]
,
[Else []]
,,
{Label: adversary_pacifism_divert_menu
[,
{Choice Branch: [Choice - (Explore) ''If I turn my ba...If Var "adversary_1_cabin_blade_taken" == Val (Bool False) && Var "adversary_pacifism_divert_explore" == Val (Bool False) && Var "adversary_1_retrieve_knife_already" == Val (Bool False) []
[
Assign "adversary_pacifism_divert_explore" = Val (Bool True)
,,
[If "adversary_combat_to_pacifism" []]
,
[Else []]
,,,,
[If "adversary_combat_to_pacifism" []]
,
[Else []]
,,,,,,,
Jump to adversary_pacifism_divert_menu
],Choice - ''Okay. I'll be right back....If Var "adversary_1_cabin_blade_taken" == Val (Bool False) && Var "adversary_1_retrieve_knife_already" == Val (Bool False) []
[,
[If "adversary_combat_to_pacifism" []]
,
[Else []]
,,,
Jump to adversary_1_retrieve_knife
],Choice - ''I'm still not going to fi...
[,
[If "adversary_combat_to_pacifism" []]
,
[Else []]
,,
Jump to adversary_pacifism_death_join
],Choice - [[Remain silent.]
[,
[If "adversary_combat_to_pacifism" []]
,
[Else []]
,,,
Jump to adversary_pacifism_death_join
],Choice - [[Run like hell.]If Var "adversary_1_cabin_blade_taken" == Val (Bool False) && Var "adversary_1_retrieve_knife_already" == Val (Bool False) []
[,,,,,,,,,,
Jump to adversary_1_retrieve_knife
],Choice - [[Grab the blade and run li...If "adversary_1_cabin_blade_taken" || "adversary_1_retrieve_knife_already" []
[
Assign "blade_held" = Val (Bool True)
,,
Assign "blade_held" = Val (Bool True)
,
[If "adversary_combat_to_pacifism" [
Assign "default_mouse" = Val (String "blood")
]]
,
[Else [
Assign "default_mouse" = Val (String "blade")
]]
,,,,,,,,,,,,,,,,,,,,
Jump to adversary_1_upstairs
],Choice - [[Attack the Princess.]If "adversary_1_cabin_blade_taken" && Var "adversary_combat_to_pacifism" == Val (Bool False) []
[,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,
Jump to adversary_1_fight
]]}
]}
],Choice - [[Remain silent.]
[
[If "adversary_pacifism_stuck" [,
[If "adversary_combat_to_pacifism" []]
,
[Else []]
,,]]
,
[Else [,
[If "adversary_combat_to_pacifism" []]
,
[Else []]
,,]]
,
{Label: adversary_pacifism_death_join
[,,
[If "adversary_combat_to_pacifism" []]
,
[Else []]
,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "adversary_pacifism_standing" [,,,,,,,]]
,
[Else [,,,,,,,]]
,,,,,,,,
{Choice Branch: [Choice - ''Because death doesn't mat...
[
Assign "adversary_pacifism_last_words" = Val (String "deathless")
,,,,,
Jump to adversary_pacifism_end
],Choice - ''Because there's more to t...
[
Assign "adversary_pacifism_last_words" = Val (String "more")
,,,,,
Jump to adversary_pacifism_end
],Choice - ''I care about you, and I d...
[
Assign "adversary_pacifism_last_words" = Val (String "care")
,,,,,
Jump to adversary_pacifism_end
],Choice - ''I just think it's kind of...
[
Assign "adversary_pacifism_last_words" = Val (String "funny")
,
Jump to adversary_pacifism_end
],Choice - [[Remain silent.]
[
Assign "adversary_pacifism_last_words" = Val (String "silent")
,,,,,
{Label: adversary_pacifism_end
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "adversary_1_narrator_proof" [,]]
,
[Else [,]]
,
Assign "fury_source" = Val (String "pacifism")
,,
Jump to fury_start
]}
]]}
]}
]]}
]}
]}
,
{Label: adversary_1_retrieve_knife
[,,,,,,,,,,,,,,,,,,,,,,
{Label: adversary_1_retrieve_knife_menu
[,
{Choice Branch: [Choice - (Explore) ''You know, we co...If Var "adversary_1_retrieve_knife_explore" == Val (Bool False) []
[
Assign "adversary_1_retrieve_knife_explore" = Val (Bool True)
,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) [,]]
,
[Else [,]]
,,,,,,,
Jump to adversary_1_retrieve_knife_menu
],Choice - [[Take the blade from the a...If Var "blade_held" == Val (Bool False) []
[,
Assign "adversary_1_retrieve_knife_already" = Val (Bool True)
,
Assign "blade_held" = Val (Bool True)
,,,,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,
Jump to adversary_1_retrieve_knife_menu
],Choice - ''We're doing it. We're sta...If "adversary_1_retrieve_knife_explore" && "adversary_can_fury" []
[
[If "fury_encountered" [
Assign "adversary_can_fury" = Val (Bool False)
,,,
Jump to adversary_1_retrieve_knife_menu
]]
,
[If "blade_held" [,]]
,,,,,,,,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) [,,,]]
,,,,,
Jump to adversary_1_upstairs_late_join
],Choice - ''We're leaving.''If "adversary_1_retrieve_knife_explore" && "adversary_can_fury" []
[
[If "fury_encountered" [
Assign "adversary_can_fury" = Val (Bool False)
,,,
Jump to adversary_1_retrieve_knife_menu
]]
,
[If "blade_held" [,]]
,,,
Jump to adversary_1_upstairs_late_join
],Choice - [[Return to the basement.]If "blade_held" []
[,,,,,,,,,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,
{Choice Branch: [Choice - [[Attack the Princess.]
[,,,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,
Jump to adversary_1_fight
]]}
]]}
]}
]}
,
{Label: adversary_1_fight_unarmed
[,,,,,,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Get up.]
[,,,,,,,,,,,,,],Choice - [[Die.]
[,,,,
[If "adversary_1_narrator_proof" [,]]
,
[Else [,]]
,
Assign "fury_source" = Val (String "death_downstairs")
,
Assign "fury_unarmed_sub" = Val (String "broken")
,
Jump to fury_start
]]}
,,,,,,,,,,,,
{Label: adversary_1_face_missing_menu
[,,
{Choice Branch: [Choice - (Explore) ''Wait no... my f...If Var "adversary_1_face_missing_explore" == Val (Bool False) []
[
Assign "adversary_1_face_missing_explore" = Val (Bool True)
,,,,,,,,,,,,,
Jump to adversary_1_face_missing_menu
],Choice - ''Can... can I go get my pr...
[,,,,,,,,
{Label: adversary_1_face_missing_princess_attack_join
[
Assign "adversary_1_face_princess_attack" = Val (Bool True)
,
[If Var "adversary_1_chains_broken" == Val (Bool False) [
Assign "adversary_1_chains_broken" = Val (Bool True)
,,,,,,,,,,,,,,,,,,]]
,
[Else [,,,,,,,,,]]
,
Jump to adversary_1_face_missing_post
]}
],Choice - ''No, you definitely killed...If Var "adversary_1_face_missing_explore" == Val (Bool False) []
[,,,
Jump to adversary_1_face_missing_post
],Choice - ''You're not putting me dow...If Var "adversary_1_face_missing_explore" == Val (Bool False) []
[,,,
Jump to adversary_1_face_missing_post
],Choice - [[Run.]
[,,,
Jump to adversary_1_face_missing_princess_attack_join
],Choice - [[Attack the Princess.]
[
Jump to adversary_1_face_missing_post
]]}
]}
]}
,
{Label: adversary_1_face_missing_post
[
[If Var "adversary_1_face_princess_attack" == Val (Bool False) [,,,,,,,,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "adversary_1_forest_princess_why_me" [,]]
,
[Else [,]]
,
{Choice Branch: [Choice - [[Get up.]
[,],Choice - [[Die.]
[,,,,,,,,,,
[If "adversary_1_narrator_proof" [,]]
,
[Else [,]]
,
Assign "fury_source" = Val (String "death_downstairs")
,
Assign "fury_unarmed_sub" = Val (String "broken")
,
Jump to fury_start
]]}
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "fury_source" = Val (String "unarmed")
,
Assign "fury_unarmed_sub" = Val (String "contrarian")
,,
Jump to fury_start
]}
,
{Label: adversary_1_fight
[,,
[If "adversary_1_wounded" [,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "fury_source" = Val (String "death_downstairs")
,
Jump to fury_start
]]
,
[Else [
Assign "adversary_delayed_fight" = Val (Bool True)
,,,,,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,,,,,,,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,,,,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) [
Assign "adversary_1_chains_broken" = Val (Bool True)
,,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "adversary_1_narrator_proof" [,]]
,
[Else [,]]
,,,,,
{Label: adversary_delayed_fight_menu
[
{Choice Branch: [Choice - [[Bait an opening and outma...
[
Jump to adversary_1_fight_agile
],Choice - [[Strike at her heart head-...
[,
Assign "adversary_slashed" = Val (Bool True)
,,,,,,,,,,,,
Jump to adversary_1_fight_immediate_late_join
],Choice - [[Run.]If "adversary_can_fury" []
[
[If "fury_encountered" [
Assign "adversary_can_fury" = Val (Bool False)
,,,,,
Jump to adversary_delayed_fight_menu
]]
,
Jump to adversary_flee_late_join
]]}
]}
]]
]}
,
{Label: adversary_1_fight_agile
[,,,,,,,
[If Var "adversary_1_style" == Val (String "agile") [,]]
,
[Else [,]]
,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "trait_hunted" = Val (Bool True)
,
Jump to adversary_2_start
]}
,
{Label: adversary_free_attempt
[,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - We're doing it. [[Free the ...
[,,,,,,,,,,,,,,,
[If Var "adversary_1_narrator_accepts_origin" == Val (String "distant") []]
,
[Else [,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,]]
,,,
[If Var "adversary_1_narrator_accepts_origin" == Val (String "distant") []]
,
[Else [,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,]]
,,,,
{Choice Branch: [Choice - [[Attack the Princess.]
[
{Label: adversary_skeptic_fight_join
[,,,,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,
Jump to adversary_1_fight
]}
],Choice - [[Attack the Princess.]
[
Jump to adversary_skeptic_fight_join
],Choice - [[Attack the Princess.]
[
Jump to adversary_skeptic_fight_join
],Choice - [[Attack the Princess.]
[
Jump to adversary_skeptic_fight_join
],Choice - [[Attack the Princess.]
[
Jump to adversary_skeptic_fight_join
],Choice - [[Attack the Princess.]
[
Jump to adversary_skeptic_fight_join
],Choice - [[Free the Princess.]
[,,,,,,,,,,
[If Var "adversary_1_chains_broken" == Val (Bool False) []]
,,,],Choice - [[Attack the Princess.]
[
Jump to adversary_skeptic_fight_join
],Choice - [[Attack the Princess.]
[
Jump to adversary_skeptic_fight_join
],Choice - [[Attack the Princess.]
[
Jump to adversary_skeptic_fight_join
],Choice - [[Attack the Princess.]
[
Jump to adversary_skeptic_fight_join
]]}
],Choice - The Narrator is right. This...
[
Jump to adversary_skeptic_fight_join
]]}
,
[If "adversary_attack_immediate" [,]]
,
[Else [,]]
,,,,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "trait_skeptic" = Val (Bool True)
,
Jump to adversary_2_start
]}
,
{Label: adversary_1_start
[,,,,,,,
Assign "current_princess" = Val (String "adversary")
,
Assign "blade_held" = Val (Bool False)
,
Assign "trait_stubborn" = Val (Bool True)
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,
{Label: adversary_1_forest
[,,,,,,,
{Choice Branch: [Choice - (Explore) I'm getting a ter...If Var "adversary_1_forest_share_loop" == Val (Bool False) []
[
Assign "adversary_1_forest_deja_vu" = Val (Bool True)
,,,
{Label: adversary_1_forest_narrator_share_join
[
Assign "adversary_1_forest_count" += Val (Int 1)
,
Assign "adversary_1_forest_share_loop" = Val (Bool True)
,,,,,,,,,
Jump to adversary_1_forest
]}
],Choice - (Explore) This is more than...If "adversary_1_forest_deja_vu" && Var "adversary_1_forest_deja_vu_follow_up" == Val (Bool False) []
[
Assign "adversary_1_forest_deja_vu_follow_up" = Val (Bool True)
,
Assign "adversary_1_forest_count" += Val (Int 1)
,,,
Jump to adversary_1_forest
],Choice - (Explore) Wait... hasn't th...If Var "adversary_1_forest_share_loop" == Val (Bool False) []
[,,
Jump to adversary_1_forest_narrator_share_join
],Choice - (Explore) Okay, no.If Var "adversary_1_forest_share_loop" == Val (Bool False) []
[,,
Jump to adversary_1_forest_narrator_share_join
],Choice - (Explore) But I died! What ...If Var "adversary_1_forest_share_loop" == Val (Bool False) []
[
Assign "adversary_1_forest_share_died" = Val (Bool True)
,,,
Jump to adversary_1_forest_narrator_share_join
],Choice - (Explore) She's going to ki...If Var "adversary_1_forest_share_loop" == Val (Bool False) []
[
Assign "adversary_1_forest_share_died" = Val (Bool True)
,,,
Jump to adversary_1_forest_narrator_share_join
],Choice - (Explore) But I already sle...If Var "adversary_1_forest_share_loop" == Val (Bool False) []
[
Assign "adversary_1_forest_share_died" = Val (Bool True)
,,,
Jump to adversary_1_forest_narrator_share_join
],Choice - (Explore) Let's assume I'm ...If "adversary_1_forest_share_loop" && Var "adversary_1_forest_deja_vu" == Val (Bool False) || "adversary_1_forest_deja_vu_follow_up" && Var "adversary_1_forest_share_loop_insist" == Val (Bool False) []
[
Assign "adversary_1_forest_share_loop_insist" = Val (Bool True)
,
Assign "adversary_1_forest_count" += Val (Int 1)
,
Assign "adversary_narrator_loop" = Val (Bool True)
,,,,,
[If Var "adversary_1_forest_share_died" == Val (Bool False) [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,
Jump to adversary_1_forest
],Choice - (Explore) Let's talk about ...If "adversary_1_forest_share_loop_insist" && Var "adversary_1_forest_princess_press" == Val (Bool False) []
[
Assign "adversary_1_forest_count" += Val (Int 1)
,
Assign "adversary_1_forest_princess_press" = Val (Bool True)
,,,
{Label: adversary_1_forest_princess
[,,,,,,
{Choice Branch: [Choice - (Explore) We killed each ot...If Var "adversary_1_forest_princess_tips" == Val (Bool False) []
[
Assign "adversary_1_forest_princess_tips" = Val (Bool True)
,
Assign "adversary_1_forest_princess_count" += Val (Int 1)
,,,
[If Var "adversary_1_forest_princess_count" == Val (Int 2) [,,,,,]]
,
Jump to adversary_1_forest_princess
],Choice - (Explore) All she did last ...If Var "adversary_1_forest_princess_why_strong" == Val (Bool False) []
[
Assign "adversary_1_forest_princess_why_strong" = Val (Bool True)
,
Assign "adversary_1_forest_princess_count" += Val (Int 1)
,,,
[If Var "adversary_1_forest_princess_count" == Val (Int 2) [,,,,,]]
,
Jump to adversary_1_forest_princess
],Choice - (Explore) To quote you from...If Var "adversary_1_forest_princess_why_strong" == Val (Bool False) []
[
Assign "adversary_1_forest_princess_why_strong" = Val (Bool True)
,
Assign "adversary_1_forest_princess_count" += Val (Int 1)
,,,
[If Var "adversary_1_forest_princess_count" == Val (Int 2) [,,,,,]]
,
Jump to adversary_1_forest_princess
],Choice - (Explore) Who locked her in...If Var "adversary_1_forest_princess_basement_explain" == Val (Bool False) []
[
Assign "adversary_1_forest_princess_basement_explain" = Val (Bool True)
,
Assign "adversary_1_forest_princess_count" += Val (Int 1)
,,,
[If Var "adversary_1_forest_princess_count" == Val (Int 2) [,,,,,]]
,
Jump to adversary_1_forest_princess
],Choice - (Explore) If people locked ...If "adversary_1_forest_princess_basement_explain" && Var "adversary_1_forest_princess_why_me" == Val (Bool False) []
[
Assign "adversary_1_forest_princess_why_me" = Val (Bool True)
,
Assign "adversary_1_forest_princess_count" += Val (Int 1)
,
[If Var "adversary_1_forest_princess_count" == Val (Int 2) [,,,,,]]
,,,,,,,,,
Jump to adversary_1_forest_princess
],Choice - (Explore) You're being cage...If Var "adversary_1_forest_princess_cagey" == Val (Bool False) && Var "adversary_1_forest_princess_count" > Val (Int 1) []
[
Assign "adversary_1_forest_princess_cagey" = Val (Bool True)
,,,,,,,
Jump to adversary_1_forest_princess
],Choice - Nevermind.If Var "adversary_1_forest_princess_count" == Val (Int 0) []
[
{Label: adversary_1_forest_princess_leaving
[,,
Jump to adversary_1_forest
]}
],Choice - That's all.If Var "adversary_1_forest_princess_count" != Val (Int 0) []
[
Jump to adversary_1_forest_princess_leaving
]]}
]}
],Choice - [[Proceed to the cabin.]
[
Jump to adversary_1_cabin_arrival
],Choice - [[Turn around and leave.]If "mound_can_attempt_flee" []
[
[If Var "loops_finished" >= Val (Int 2) [
Assign "mound_can_attempt_flee" = Val (Bool False)
,,,
Jump to adversary_1_forest
]]
,,,
Jump to turn_and_leave_join
]]}
]}
]}
,
{Label: adversary_1_cabin_arrival
[,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Proceed into the cabin.]
[
{Label: adversary_stranger_rejoin
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,]}
]]}
,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,
[If Var "adversary_1_forest_count" >= Val (Int 2) || Var "adversary_1_forest_princess_count" >= Val (Int 2) [,]]
,,,
{Label: cabin_interior_2_adversary_menu
[,,,,,
{Choice Branch: [Choice - (Explore) You didn't say an...If Var "adversary_1_cabin_mirror_ask" == Val (Bool False) && "adversary_1_cabin_mirror_present" []
[
Assign "adversary_1_cabin_mirror_ask" = Val (Bool True)
,
Assign "current_run_mirror_comment" = Val (Bool True)
,,,,,,,
[If Var "adversary_1_forest_count" >= Val (Int 2) || Var "adversary_1_forest_princess_count" >= Val (Int 2) [,]]
,
[Else [,]]
,
{Choice Branch: [Choice - I care about whether I'm be...
[,,,],Choice - I care. I want to look at m...
[,,,],Choice - You're right. It doesn't ma...
[
Assign "adversary_1_cabin_mirror_present" = Val (Bool False)
,,,,,,,,,],Choice - [[Remain silent.]
[,,,],Choice - [[Approach the mirror.]If Var "adversary_1_cabin_mirror_approached" == Val (Bool False) []
[
{Label: adversary_cabin_1_mirror_join
[
Assign "current_run_mirror_touched" = Val (Bool True)
,,,,,,,,,,,
Assign "adversary_1_cabin_mirror_approached" = Val (Bool True)
,,,
[If Var "adversary_1_cabin_mirror_ask" == Val (Bool False) [,]]
,
[Else [,]]
,
{Choice Branch: [Choice - [[Wipe the mirror clean.]
[
Assign "adversary_1_cabin_mirror_present" = Val (Bool False)
,,,,
[If Var "adversary_1_cabin_mirror_ask" == Val (Bool False) []]
,
[Else []]
,,,
[If "adversary_1_cabin_mirror_ask" [,]]
,
[Else [,]]
,,,,,,,,,
[If Var "adversary_1_cabin_blade_taken" == Val (Bool False) []]
,,
Jump to cabin_interior_2_adversary_menu
]]}
]}
]]}
,
Jump to cabin_interior_2_adversary_menu
],Choice - (Explore) This whole cabin ...If Var "adversary_1_cabin_last_time_comment" == Val (Bool False) && "adversary_1_forest_share_loop_insist" []
[
Assign "adversary_1_cabin_last_time_comment" = Val (Bool True)
,,,,,,,
Jump to cabin_interior_2_adversary_menu
],Choice - (Explore) [[Approach the mi...If "adversary_1_cabin_mirror_present" && Var "adversary_1_cabin_mirror_approached" == Val (Bool False) []
[
Assign "adversary_1_cabin_mirror_approached" = Val (Bool True)
,
Jump to adversary_cabin_1_mirror_join
],Choice - (Explore) [[Take the blade.]If Var "adversary_1_cabin_blade_taken" == Val (Bool False) []
[
Assign "adversary_1_cabin_blade_taken" = Val (Bool True)
,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,
Jump to cabin_interior_2_adversary_menu
],Choice - [[Enter the basement.]
[
[If Var "adversary_1_cabin_blade_taken" == Val (Bool False) [,,,]]
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,
[If "adversary_1_cabin_blade_taken" [,,,,,,]]
,
[Else [,,,,,,]]
,
Jump to adversary_1_distant_chat
]]}
]}
]}
,
{Label: adversary_2_start
[,,,
Assign "default_mouse" = Val (String "default")
,
Assign "blade_held" = Val (Bool False)
,
Assign "current_loop" = Val (Int 2)
,
Assign "quick_menu" = Val (Bool False)
,
Assign "config.menu_include_disabled" = Val (Bool False)
,
Assign "current_princess" = Val (String "needle")
,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,
[If "trait_hunted" [,,,,,,,,,]]
,
[Else [,,,,,,,,,,,]]
,,,,,
[If "trait_skeptic" [,,,]]
,
[If "trait_skeptic" [,,,,,,,,,]]
,
[Else [,,,,,]]
]}
,
{Label: adversary_2_menu
[,,
{Choice Branch: [Choice - (Explore) We haven't talked...If Var "needle_path_woods_explore" == Val (Bool False) []
[
Assign "needle_path_woods_explore" = Val (Bool True)
,,,
[If "trait_skeptic" [,,,,,,,]]
,
[Else [,,,]]
,
Jump to adversary_2_menu
],Choice - (Explore) What if I don't a...If Var "needle_path_woods_other_explore" == Val (Bool False) []
[
Assign "needle_path_woods_other_explore" = Val (Bool True)
,
[If "trait_skeptic" [,]]
,
[Else [,]]
,,,
Jump to adversary_2_menu
],Choice - No matter what happens next...
[
Jump to adversary_2_exterior
],Choice - [[Silently proceed to the c...
[
Jump to adversary_2_exterior
],Choice - I'm done with this. Bye! [[...
[
Assign "caught_origin_ch3" = Val (Bool True)
,
Assign "caught_origin_current" = Val (String "adversary2")
,,,
[If "trait_skeptic" [,]]
,
[Else [,]]
,,,
Assign "quick_menu" = Val (Bool False)
,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
Jump to caught_start
]]}
]}
,
{Label: adversary_2_exterior
[,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,
[If "trait_skeptic" [,]]
,
[Else [,]]
,
{Choice Branch: [Choice - [[Proceed into the cabin.]
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
Jump to adversary_2_interior
]]}
]}
,
{Label: adversary_2_interior
[,,,,,,
[If "trait_hunted" [,]]
,
[Else [
[If Var "current_run_mirror_comment" == Val (Bool False) [
Assign "adversary_2_mirror_comment" = Val (Bool True)
,,,,,,,,,,,,]]
,
[Else [,]]
]]
,,,
{Label: adversary_2_interior_menu
[,,
{Choice Branch: [Choice - (Explore) You never mention...If Var "adversary_2_mirror_comment" == Val (Bool False) && "current_run_mirror_comment" []
[
Jump to adversary_2_mirror_join
],Choice - (Explore) That damn mirror'...If Var "adversary_2_mirror_comment" == Val (Bool False) && "current_run_mirror_comment" []
[
Jump to adversary_2_mirror_join
],Choice - (Explore) But there's no wa...If Var "adversary_2_mirror_comment" == Val (Bool False) []
[
{Label: adversary_2_mirror_join
[
Assign "adversary_2_mirror_comment" = Val (Bool True)
,
[If "current_run_mirror_touched" [
[If "trait_skeptic" [,,,,,,,]]
,
[Else [,,,,,,,]]
]]
,
[Else [
[If "adversary_2_blade_taken" [,]]
,
[Else [,]]
,,,,,
[If "trait_hunted" [,,,]]
]]
]}
,
Jump to adversary_2_interior_menu
],Choice - (Explore) [[Take the blade.]If Var "adversary_2_blade_taken" == Val (Bool False) []
[
Assign "adversary_2_blade_taken" = Val (Bool True)
,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,,
[If "trait_hunted" [,]]
,
[Else [,]]
,
Jump to adversary_2_interior_menu
],Choice - [[Approach the mirror.]
[
[If Var "adversary_2_blade_taken" == Val (Bool False) [
[If "trait_hunted" [,]]
]]
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
[If "adversary_2_mirror_comment" [,]]
,
[Else [,,,]]
,
[If "current_run_mirror_touched" [,,
[If "trait_hunted" [,]]
,
[Else [,,,,,,,,,]]
]]
,
[Else [,]]
,
{Choice Branch: [Choice - [[Wipe the mirror clean.]
[,,,,,,,],Choice - [[Smash it.]
[,,,,,,,,]]}
,
[If "current_run_mirror_touched" [,,,]]
,
Assign "current_run_mirror_comment" = Val (Bool True)
,
Assign "quick_menu" = Val (Bool False)
,,,,
Jump to adversary_2_stairs
]]}
]}
]}
,
{Label: adversary_2_stairs
[,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,
[If "trait_hunted" [,]]
,
[Elif "trait_skeptic" [,]]
,
{Label: adversary_2_stairs_menu
[,,,
[If "adversary_2_stairs_menu_explore" && "adversary_2_stairs_can_comment" && Var "adversary_2_stairs_commented" == Val (Bool False) [
Assign "adversary_2_stairs_commented" = Val (Bool True)
,
[If "trait_hunted" [,]]
,
[Else [,,,]]
]]
,
{Choice Branch: [Choice - (Explore) ''If you want a f...If Var "adversary_2_stairs_menu_explore" == Val (Bool False) []
[
Assign "adversary_2_stairs_menu_explore" = Val (Bool True)
,,,
[If "adversary_1_upstairs_flag" || "adversary_1_chains_broken" [,,
[If "trait_skeptic" [,]]
,
[Else [,]]
]]
,
[Else [
[If "trait_skeptic" [,]]
,
[Else [,]]
]]
,
[If "trait_hunted" [,]]
,
[Else [,]]
,
Jump to adversary_2_stairs_menu
],Choice - (Explore) ''I know you can ...If "adversary_1_upstairs_flag" || "adversary_1_chains_broken" && Var "adversary_2_stairs_menu_explore" == Val (Bool False) []
[
Assign "adversary_2_stairs_menu_explore" = Val (Bool True)
,
Assign "adversary_2_stairs_can_comment" = Val (Bool True)
,,,
Jump to adversary_2_stairs_menu
],Choice - (Explore) ''Are you sure yo...If Var "adversary_2_stairs_menu_explore" == Val (Bool False) []
[
Assign "adversary_2_stairs_menu_explore" = Val (Bool True)
,
Assign "adversary_2_stairs_can_comment" = Val (Bool True)
,,,
Jump to adversary_2_stairs_menu
],Choice - [[Continue to the basement ...
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
[If "trait_skeptic" [,]]
,
[Else [,]]
,
Jump to adversary_2_basement_arrive
]]}
]}
]}
,
{Label: adversary_2_basement_arrive
[,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
[If Var "adversary_2_blade_taken" == Val (Bool False) [,,,,
[If "adversary_1_cabin_blade_taken" [,,,]]
,
[Else [,,,]]
,,,,,
[If "trait_skeptic" [,,,,,,,,,,,,]]
,
[Else [,,,,,,,,,,,,,]]
,
Jump to adversary_2_basement_loose
]]
,
[Else [,,,,,,,,
[If "trait_hunted" [,,,]]
,
[Else [,,,]]
,,,
[If "trait_hunted" [,]]
,
[Else [,,,,,,,,,,]]
,,,,,,,,,,,
{Label: adversary_2_basement_talk_menu
[
{Choice Branch: [Choice - (Explore) ''Let's talk a bi...
[,,,,,,,,,,,,
Jump to adversary_2_basement_loose
],Choice - (Explore) ''Not down here. ...
[
{Label: adversary_2_basement_join
[,,,,,,,,,,,,,,,]}
,
Jump to adversary_2_basement_loose
],Choice - (Explore) ''If you want a g...
[
Jump to adversary_2_basement_join
],Choice - (Explore) ''Why don't you w...
[,,,,,,,,,,,,,,,,,,,,
Jump to adversary_2_basement_loose
],Choice - (Explore) ''I'm not fightin...
[
Jump to adversary_2_basement_join
],Choice - [[Step closer, stopping jus...
[,,,,,,
Jump to adversary_2_basement_join
],Choice - [[Slay the Princess.]If "blade_held" []
[,,
[If "trait_hunted" [,]]
,
[Elif "trait_skeptic" [,]]
,,,,,,,,,,,,,,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "adversary_2_end" = Val (String "fight_fail")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "current_princess" = Val (String "needle")
,
Jump to mirror_start
]]}
]}
]]
]}
,
{Label: adversary_2_basement_loose
[,,,,,,,,,,,,,,,
[If "trait_hunted" [,]]
,
[Else [,]]
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,
[If "trait_skeptic" [,]]
,
[Else [,]]
,,
Assign "quick_menu" = Val (Bool False)
,,,,,
[If Var "blade_held" == Val (Bool False) []]
,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,
[If Var "blade_held" == Val (Bool False) []]
,,,
[If Var "adversary_2_blade_taken" == Val (Bool False) [
[If "trait_hunted" [,]]
,
[Else [,,,,,]]
,
{Choice Branch: [Choice - [[Take the blade.]If Var "blade_held" == Val (Bool False) []
[
[If "trait_hunted" [
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,,,,,,,,,,,,,,
Jump to adversary_2_combat_ending
]]
,
[Else [
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,,
[If Var "blade_held" == Val (Bool False) []]
,,,,,
{Label: adversary_upstairs_skeptic_die_2_join
[,,,,,,,,,
[If "blade_held" [
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,]]
,,,,,,,,,,,,,,,,,,,,,
[If "blade_held" [,,,,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "adversary_2_end" = Val (String "flee_fail")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_deny" += Val (Int 1)
,
Assign "current_princess" = Val (String "needle")
,
Jump to mirror_start
]}
]]
],Choice - [[It's too late. Run for th...If Var "blade_held" == Val (Bool False) []
[
[If "trait_hunted" [,,,,,
[If Var "blade_held" == Val (Bool False) []]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "adversary_2_end" = Val (String "flee_fail")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_deny" += Val (Int 1)
,
Assign "current_princess" = Val (String "needle")
,
Jump to mirror_start
]]
,
[Else [
{Label: adversary_2_skeptic_freedom_join
[,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Free her.]
[
Jump to adversary_2_free_ending
],Choice - [[Die.]
[,,,,,,,
Jump to adversary_upstairs_skeptic_die_2_join
]]}
]}
]]
]]}
]]
,
[Else [
[If "trait_skeptic" [
Jump to adversary_2_skeptic_freedom_join
]]
,
[Else [,,,,
[If Var "blade_held" == Val (Bool False) []]
,,,,,,,,,
Jump to adversary_2_combat_ending
]]
]]
]}
,
{Label: adversary_2_free_ending
[,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - ''It's freedom.''
[
Assign "needle_skeptic_free_comment" = Val (Bool True)
,
Jump to needle_freedom_cont
],Choice - ''Don't you get it? Everyth...
[
Assign "needle_skeptic_free_comment" = Val (Bool True)
,
Jump to needle_freedom_cont
],Choice - ''I don't know. But I was h...
[
Jump to needle_freedom_cont
],Choice - ''What do you mean, 'this d...
[
Jump to needle_freedom_cont
],Choice - [[Say nothing.]
[
Jump to needle_freedom_cont
]]}
,
{Label: needle_freedom_cont
[
[If Var "needle_skeptic_free_comment" == Val (Bool False) [,,,]]
,
[Else [,,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to adversary_2_freedom_join
]}
]}
,
{Label: adversary_2_combat_ending
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: adversary_2_combat_ending_menu
[
{Choice Branch: [Choice - ''Are you sure you want to ...
[,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: adversary_2_freedom_join
[,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Elif "adversary_whisk_silent" []]
,
[Else []]
,
Assign "adversary_2_end" = Val (String "free")
,
Assign "princess_free" += Val (Int 1)
,
Assign "princess_deny" += Val (Int 1)
,
Assign "current_princess" = Val (String "needle")
,
Jump to mirror_start
]}
],Choice - (Explore) ''You've fallen r...If "trait_hunted" []
[,,,,,,,,,,,,,,,,
Jump to adversary_2_combat_finale_join
],Choice - [[Slay the Princess.]
[,,,,,,,,,,,,,,,,,
{Label: adversary_2_combat_finale_join
[,,,,,,,,,,,,,,,
Assign "default_mouse" = Val (String "blood")
,,,,
[If "persistent.flickering" [,,,,,]]
,
[Else [,,,,,]]
,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "adversary_2_end" = Val (String "fight_succeed")
,
Assign "princess_free" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 1)
,
Assign "current_princess" = Val (String "needle")
,
Jump to mirror_start
]}
]]}
]}
]}
,
{Label: beast_1_encounter_start
[,,,,,,,,,,,
{Label: beast_encounter_menu_1
[,,,,,,,
[If Var "beast_encounter_stall_count" >= Val (Int 2) [
[If "wild_encountered" [
Assign "beast_cant_eaten" = Val (Bool True)
,,,
{Choice Branch: [Choice - [[Dodge.]
[,,
Jump to beast_1_encounter_dodged
]]}
]]
,
Jump to beast_encounter_1_eaten
]]
,
{Choice Branch: [Choice - (Explore) Where?If Var "beast_encounter_1_where" == Val (Bool False) []
[
Assign "beast_encounter_1_where" = Val (Bool True)
,
Assign "beast_encounter_stall_count" += Val (Int 1)
,,,
Jump to beast_encounter_menu_1
],Choice - (Explore) Don't you hear th...If Var "beast_encounter_1_fine" == Val (Bool False) []
[
Assign "beast_encounter_1_fine" += Val (Int 1)
,
Assign "beast_encounter_stall_count" += Val (Int 1)
,,,
Jump to beast_encounter_menu_1
],Choice - (Explore) ''You're about to...If Var "beast_encounter_1_talk" == Val (Bool False) []
[
Assign "beast_encounter_1_talk" = Val (Bool True)
,
Jump to beast_encounter_1_eaten
],Choice - (Explore) ''We don't have t...If Var "beast_encounter_1_talk" == Val (Bool False) []
[
Assign "beast_encounter_1_talk" = Val (Bool True)
,
Jump to beast_encounter_1_eaten
],Choice - [[Move.]
[
Jump to beast_1_encounter_dodged
],Choice - [[Stand still.]If Var "beast_cant_eaten" == Val (Bool False) []
[,
[If "wild_encountered" [
Assign "beast_cant_eaten" = Val (Bool True)
,,,
{Choice Branch: [Choice - [[Dodge.]
[,,
Jump to beast_1_encounter_dodged
]]}
,
Jump to beast_1_encounter_start
]]
,
{Label: beast_encounter_1_eaten
[
[If "wild_encountered" [
Jump to beast_skeptic_end
]]
,
[If "beast_captured_delay" []]
,
[Else []]
,,,,,,,,,,
[If "beast_captured_delay" []]
,
[Else []]
,,,,,
{Label: beast_eaten_late_join
[,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
[If "beast_encounter_1_talk" [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "blade_held" [,,,,,]]
,
[Else [,]]
,
{Label: beast_devoured_menu
[,,,,,,,,
[If Var "beast_devoured_minor_count" >= Val (Int 2) [
Assign "beast_devoured_minor_count" = Val (Int 0)
,
Assign "beast_devoured_count" += Val (Int 1)
,
Assign "beast_devoured_just_incremented" = Val (Bool True)
]]
,
[If "beast_devoured_just_incremented" [
Assign "beast_devoured_just_incremented" = Val (Bool False)
,
[If Var "beast_devoured_count" == Val (Int 1) [,,,,,,,
[If Var "beast_devoured_hp" == Val (Int 4) [,,,]]
]]
,
[If Var "beast_devoured_count" == Val (Int 2) [,,,,,,,]]
,
[If Var "beast_devoured_count" == Val (Int 3) [,,,
Jump to beast_devour_die
]]
]]
,
{Choice Branch: [Choice - (Explore) ''Can you talk to...If Var "beast_devour_cabin_explore" == Val (Bool False) []
[,
Assign "beast_devour_cabin_explore" = Val (Bool True)
,
Assign "beast_devoured_minor_count" += Val (Int 2)
,,,
Jump to beast_devoured_menu
],Choice - (Explore) ''You could have ...If Var "beast_devour_asked_explore" == Val (Bool False) []
[,
Assign "beast_devour_asked_explore" = Val (Bool True)
,
Assign "beast_devoured_minor_count" += Val (Int 2)
,,,
Jump to beast_devoured_menu
],Choice - (Explore) ''Spit me out or ...If "blade_held" && Var "beast_devour_threaten_explore" == Val (Bool False) []
[,
Assign "beast_devour_threaten_explore" = Val (Bool True)
,
Assign "beast_devoured_minor_count" += Val (Int 2)
,,,
Jump to beast_devoured_menu
],Choice - (Explore) ''You need me to ...If Var "beast_devoured_count" >= Val (Int 1) && Var "beast_devour_need_explore" == Val (Bool False) []
[,
Assign "beast_devour_need_explore" = Val (Bool True)
,
Assign "beast_devoured_minor_count" += Val (Int 2)
,,,
Jump to beast_devoured_menu
],Choice - (Explore) ''Just because I ...If Var "beast_devoured_count" >= Val (Int 1) []
[,
Assign "beast_accidental_freedom" = Val (Bool True)
,
Assign "beast_devoured_minor_count" += Val (Int 2)
,,,,,,,,,,,,
Jump to beast_surrender_late
],Choice - (Explore) ''I have my steel...If Var "beast_devoured_hp" == Val (Int 4) && Var "beast_devoured_threaten" == Val (Bool False) && "blade_held" []
[
Assign "beast_devoured_minor_count" += Val (Int 2)
,
Assign "beast_devoured_threaten" = Val (Bool True)
,,,
Jump to beast_devoured_menu
],Choice - (Explore) ''I've found your...If Var "beast_devoured_threaten" == Val (Bool False) && Var "beast_devoured_hp" == Val (Int 0) []
[
Assign "beast_devoured_minor_count" += Val (Int 2)
,
Assign "beast_devoured_threaten" = Val (Bool True)
,,,
Jump to beast_devoured_menu
],Choice - (Explore) [[Claw and bite.]If Var "blade_held" == Val (Bool False) []
[
Assign "beast_devoured_minor_count" += Val (Int 2)
,
Assign "beast_devoured_hp" -= Val (Int 1)
,
[If Var "beast_devoured_hp" == Val (Int 3) [,,,,,,,]]
,
[Elif Var "beast_devoured_hp" == Val (Int 2) [,,,,,]]
,
[Else [,,,,,,,,,
Jump to beast_devour_die
]]
,
Jump to beast_devoured_menu
],Choice - (Explore) [[Dig with the st...If "blade_held" && Var "beast_devoured_hp" != Val (Int 0) []
[
Assign "default_mouse" = Val (String "blood")
,
Assign "beast_devoured_minor_count" += Val (Int 2)
,
Assign "beast_devoured_hp" -= Val (Int 2)
,
[If Var "beast_devoured_hp" == Val (Int 2) [,,,,,,,]]
,
[Else [,,,,,,]]
,
Jump to beast_devoured_menu
],Choice - [[Slay the Princess.]If Var "beast_devoured_hp" == Val (Int 0) []
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "wild_source" = Val (String "beast")
,
Assign "quick_menu" = Val (Bool False)
,
[If "beast_contrarian" [
Assign "wild_bonus_voice" = Val (String "contrarian")
]]
,
[Else [
Assign "wild_bonus_voice" = Val (String "opportunist")
]]
,
Jump to wild_start
],Choice - ''Fine. You can leave.''
[
Jump to beast_surrender
],Choice - ''You can leave! Just let m...
[
Jump to beast_surrender
],Choice - ''Screw you!'' [[Slay yours...If "blade_held" []
[,,,,,,,,,,,,,,,,,,,,
Assign "default_mouse" = Val (String "default")
,
Assign "wild_source" = Val (String "beast")
,
[If "beast_contrarian" [
Assign "wild_bonus_voice" = Val (String "contrarian")
]]
,
[Else [
Assign "wild_bonus_voice" = Val (String "stubborn")
]]
,
Jump to wild_start
],Choice - [[Wait for death.]If Var "blade_held" == Val (Bool False) []
[,
[If Var "beast_devoured_count" != Val (Int 3) [,,]]
,,,,,,,,,,,,,,,,,
Assign "default_mouse" = Val (String "default")
,
Assign "wild_source" = Val (String "beast")
,
Assign "quick_menu" = Val (Bool False)
,
[If "beast_contrarian" [
Assign "wild_bonus_voice" = Val (String "contrarian")
]]
,
[Else [
Assign "wild_bonus_voice" = Val (String "broken")
]]
,
Jump to wild_start
]]}
,
{Label: beast_surrender
[,,,,,,,
{Label: beast_surrender_late
[,,,,,,,,,,,,,,,,,,,,,,,,
[If Var "beast_devoured_count" == Val (Int 0) []]
,
[Elif Var "beast_devoured_count" == Val (Int 1) []]
,
[Elif Var "beast_devoured_count" == Val (Int 2) []]
,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "default_mouse" = Val (String "default")
,
Assign "princess_free" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 1)
,
Jump to mirror_start
]}
]}
]}
]}
]}
]]}
]}
]}
,
{Label: beast_1_encounter_dodged
[
Assign "beast_encounter_stairs_guarded" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to beast_encounter_outside_menu
]}
,
{Label: beast_encounter_outside_menu
[,,,,,,,,,,,,
[If Var "beast_encounter_count" == Val (Int 1) && Var "beast_encounter_phase" >= Val (Int 3) [
Jump to beast_encounter_attack_staging
]]
,
[Elif Var "beast_encounter_count" == Val (Int 2) [
Jump to beast_encounter_attack_staging
]]
,
{Choice Branch: [Choice - (Explore) I don't think I c...If Var "beast_encounter_phase" >= Val (Int 2) && Var "beast_encounter_tired_explore" == Val (Bool False) []
[
Assign "beast_encounter_tired_explore" = Val (Bool True)
,
Assign "beast_encounter_count" += Val (Int 1)
,,,,,
Jump to beast_encounter_outside_menu
],Choice - (Explore) ''What do you wan...If Var "beast_encounter_what_ask" == Val (Bool False) []
[
Assign "beast_encounter_what_ask" = Val (Bool True)
,
Assign "beast_encounter_count" += Val (Int 1)
,,,
[If "blade_held" [,]]
,
[If Var "blade_held" == Val (Bool False) [
[If "beast_encounter_stairs_guarded" [,]]
,
[Else [,]]
]]
,,,,,,,
Jump to beast_encounter_outside_menu
],Choice - (Explore) ''But why? Why do...If Var "beast_encounter_why_kill" == Val (Bool False) && "beast_encounter_what_ask" []
[
Assign "beast_encounter_why_kill" = Val (Bool True)
,
Assign "beast_encounter_count" += Val (Int 1)
,,,,,,,,,
Jump to beast_encounter_outside_menu
],Choice - (Explore) ''Okay, fine. Why...If Var "beast_encounter_why_eat" == Val (Bool False) && "beast_encounter_why_kill" []
[
Assign "beast_encounter_why_eat" = Val (Bool True)
,
Assign "beast_encounter_count" += Val (Int 1)
,,,,,
Jump to beast_encounter_outside_menu
],Choice - (Explore) ''We don't have t...If Var "beast_encounter_help_offer" == Val (Bool False) []
[
Assign "beast_encounter_help_offer" = Val (Bool True)
,
Assign "beast_encounter_count" += Val (Int 1)
,,,,,
Jump to beast_encounter_outside_menu
],Choice - (Explore) ''Stop hiding and...If Var "beast_encounter_stop_hide" == Val (Bool False) []
[
Assign "beast_encounter_stop_hide" = Val (Bool True)
,
Assign "beast_encounter_count" += Val (Int 1)
,,,,,
Jump to beast_encounter_outside_menu
],Choice - (Explore) ''I was sent to k...If Var "beast_encounter_threat" == Val (Bool False) []
[
Assign "beast_encounter_threat" = Val (Bool True)
,
Assign "beast_encounter_count" += Val (Int 1)
,,,,,
Jump to beast_encounter_outside_menu
],Choice - (Explore) ''You're deflecti...If "beast_encounter_stop_hide" || "beast_encounter_threat" && Var "beast_encounter_deflect" == Val (Bool False) []
[
Assign "beast_encounter_deflect" = Val (Bool True)
,
Assign "beast_encounter_count" += Val (Int 1)
,,,
Jump to beast_encounter_outside_menu
],Choice - [[Run for the stairs.]If "beast_encounter_can_try_flee" []
[
{Label: beast_stairs_run
[
[If Var "beast_encounter_stairs_guarded" == Val (Bool False) [
Assign "beast_captured_delay" = Val (Bool True)
,
Assign "beast_fled" = Val (Bool True)
,,,
[If Var "blade_held" == Val (Bool False) [,]]
,
[Else [,]]
,,,
[If Var "wild_encountered" == Val (Bool False) [
Jump to beast_encounter_1_eaten
]]
,
[Else [
Assign "beast_fled" = Val (Bool True)
,
Jump to beast_skeptic_end
]]
]]
,
[Else [
Assign "beast_encounter_can_try_flee" = Val (Bool False)
,,,,,
Jump to beast_encounter_outside_menu
]]
]}
]]}
]}
,
{Label: beast_encounter_attack_staging
[
Assign "beast_encounter_count" = Val (Int 0)
,
Assign "beast_encounter_can_try_flee" = Val (Bool True)
,
[If Var "beast_encounter_phase" == Val (Int 1) [
Assign "beast_encounter_phase" += Val (Int 1)
,
Jump to beast_attack_2
]]
,
[Elif Var "beast_encounter_phase" == Val (Int 2) [
Assign "beast_encounter_phase" += Val (Int 1)
,
Jump to beast_attack_3
]]
,
[Elif Var "beast_encounter_phase" == Val (Int 3) [
Assign "beast_encounter_phase" += Val (Int 1)
,
Jump to beast_attack_4
]]
,
[Else [
Jump to beast_skeptic_end
]]
]}
,
{Label: beast_attack_2
[,,,,,,,,
{Label: beast_attack_2_menu
[,
{Choice Branch: [Choice - (Explore) How exactly are w...If Var "beast_attack_2_menu_explore" == Val (Bool False) && "blade_held" []
[
Assign "beast_attack_2_menu_explore" = Val (Bool True)
,
[If "blade_held" [,,,]]
,
[Else [,,,]]
,
Jump to beast_attack_2_menu
],Choice - [[Survive.]
[
Assign "beast_encounter_stairs_guarded" = Val (Bool False)
,
Assign "beast_encounter_count" = Val (Int 0)
,,,,,,,,,,,,,,,,,,
Jump to beast_encounter_outside_menu
],Choice - [[Wait for her to strike, a...If "blade_held" []
[
Jump to beast_stubborn_end
],Choice - [[Play dead.]If Var "beast_cant_eaten" == Val (Bool False) []
[
[If "wild_encountered" [
Assign "beast_cant_eaten" = Val (Bool True)
,,,,,
Jump to beast_attack_2
]]
,
Jump to beast_contrarian_end
],Choice - [[Stand still.]If Var "beast_cant_eaten" == Val (Bool False) []
[
[If "wild_encountered" [
Assign "beast_cant_eaten" = Val (Bool True)
,,,,,
Jump to beast_attack_2
]]
,
Jump to beast_encounter_1_eaten
]]}
]}
]}
,
{Label: beast_attack_3
[,,,,,,
{Label: beast_attack_3_menu
[
{Choice Branch: [Choice - [[Stay. Alive.]
[
Assign "beast_encounter_count" = Val (Int 0)
,
Assign "beast_encounter_stairs_guarded" = Val (Bool True)
,
Assign "beast_player_wounded" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to beast_encounter_outside_menu
],Choice - [[Run for the stairs.]
[
Jump to beast_stairs_run
],Choice - [[Wait for her to strike, a...If "blade_held" []
[
Jump to beast_stubborn_end
],Choice - [[Play dead.]If Var "beast_cant_eaten" == Val (Bool False) []
[
[If "wild_encountered" [
Assign "beast_cant_eaten" = Val (Bool True)
,,,,,
Jump to beast_attack_3
]]
,
Jump to beast_contrarian_end
],Choice - [[Stand still.]If Var "beast_cant_eaten" == Val (Bool False) []
[
[If "wild_encountered" [
Assign "beast_cant_eaten" = Val (Bool True)
,,,,,
Jump to beast_attack_3
]]
,
Jump to beast_encounter_1_eaten
]]}
]}
]}
,
{Label: beast_attack_4
[,,,,,,,,
{Label: beast_attack_4_menu
[
{Choice Branch: [Choice - [[Again...]
[
Jump to beast_skeptic_end
],Choice - [[Wait for her to strike, a...If "blade_held" []
[
Jump to beast_stubborn_end
],Choice - [[Play dead.]If Var "beast_cant_eaten" == Val (Bool False) []
[
[If "wild_encountered" [
Assign "beast_cant_eaten" = Val (Bool True)
,,,,,
Jump to beast_attack_4
]]
,
Jump to beast_contrarian_end
],Choice - [[Stand still.]If Var "beast_cant_eaten" == Val (Bool False) []
[
[If "wild_encountered" [
Assign "beast_cant_eaten" = Val (Bool True)
,,,,,
Jump to beast_attack_4
]]
,
Jump to beast_encounter_1_eaten
]]}
]}
]}
,
{Label: beast_stubborn_end
[
[If "beast_player_wounded" && Var "wild_encountered" == Val (Bool False) [
Assign "beast_captured_injured" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to beast_eaten_late_join
]]
,
[Else [,,,,,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "trait_stubborn" = Val (Bool True)
]]
,
Jump to beast_2_ending_join
]}
,
{Label: beast_contrarian_end
[
Assign "beast_contrarian" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to beast_eaten_late_join
]}
,
{Label: beast_skeptic_end
[
[If "beast_fled" [,,,,,
{Choice Branch: [Choice - [[Dodge.]
[,]]}
]]
,
[If "beast_player_wounded" [,,,,,,,,,,,]]
,
[Else [
Assign "beast_player_wounded" = Val (Bool True)
,,,,,,,,,,,,,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "trait_skeptic" = Val (Bool True)
,
{Label: beast_2_ending_join
[,,,,,,,,,
[If "trait_stubborn" [,,,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,
Assign "default_mouse" = Val (String "default")
,
Jump to beast_2_start
]}
]}
,
{Label: beast_devour_die
[,,,,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,
Assign "wild_source" = Val (String "beast")
,
[If "beast_contrarian" [
Assign "wild_bonus_voice" = Val (String "contrarian")
]]
,
[Else [
Assign "wild_bonus_voice" = Val (String "broken")
]]
,,
Jump to wild_start
]}
,
{Label: beast_1_start
[
Assign "blade_held" = Val (Bool False)
,
Assign "trait_hunted" = Val (Bool True)
,
Assign "quick_menu" = Val (Bool False)
,
Assign "current_princess" = Val (String "beast")
,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,
{Label: beast_1_forest
[,,,,,,,
{Choice Branch: [Choice - (Explore) I'm getting a ter...If Var "beast_1_forest_share_loop" == Val (Bool False) []
[
Assign "beast_1_forest_deja_vu" = Val (Bool True)
,,,
{Label: beast_1_forest_narrator_share_join
[
Assign "beast_1_forest_count" += Val (Int 1)
,
Assign "beast_1_forest_share_loop" = Val (Bool True)
,,,,,,,
Jump to beast_1_forest
]}
],Choice - (Explore) This is more than...If "beast_1_forest_deja_vu" && Var "beast_1_forest_deja_vu_follow_up" == Val (Bool False) []
[
Assign "beast_1_forest_deja_vu_follow_up" = Val (Bool True)
,
Assign "beast_1_forest_count" += Val (Int 1)
,,,
Jump to beast_1_forest
],Choice - (Explore) Wait... hasn't th...If Var "beast_1_forest_share_loop" == Val (Bool False) []
[,,
Jump to beast_1_forest_narrator_share_join
],Choice - (Explore) Okay, no.If Var "beast_1_forest_share_loop" == Val (Bool False) []
[,,
Jump to beast_1_forest_narrator_share_join
],Choice - (Explore) But I died! What ...If Var "beast_1_forest_share_loop" == Val (Bool False) []
[
Assign "beast_1_forest_share_died" = Val (Bool True)
,,,
Jump to beast_1_forest_narrator_share_join
],Choice - (Explore) She's going to ki...If Var "beast_1_forest_share_loop" == Val (Bool False) []
[
Assign "beast_1_forest_share_died" = Val (Bool True)
,,,
Jump to beast_1_forest_narrator_share_join
],Choice - (Explore) Let's assume I'm ...If "beast_1_forest_share_loop" && Var "beast_1_forest_deja_vu" == Val (Bool False) || "beast_1_forest_deja_vu_follow_up" && Var "beast_1_forest_share_loop_insist" == Val (Bool False) []
[
Assign "beast_1_forest_share_loop_insist" = Val (Bool True)
,
Assign "beast_1_forest_count" += Val (Int 1)
,,,,,
[If Var "beast_1_forest_share_died" == Val (Bool False) [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,,,
Jump to beast_1_forest
],Choice - (Explore) Let's talk about ...If "beast_1_forest_share_loop_insist" && Var "beast_1_forest_princess_press" == Val (Bool False) []
[
Assign "beast_1_forest_count" += Val (Int 1)
,
Assign "beast_1_forest_princess_press" = Val (Bool True)
,,,
{Label: beast_1_forest_princess
[,,,,,,
{Choice Branch: [Choice - (Explore) She killed me las...If Var "beast_1_forest_princess_tips" == Val (Bool False) []
[
Assign "beast_1_forest_princess_tips" = Val (Bool True)
,
Assign "beast_1_forest_princess_count" += Val (Int 1)
,,,
Jump to beast_1_forest_princess
],Choice - (Explore) She killed me by ...If Var "beast_1_forest_princess_why_strong" == Val (Bool False) []
[
Assign "beast_1_forest_princess_why_strong" = Val (Bool True)
,
Assign "beast_1_forest_princess_count" += Val (Int 1)
,,,
Jump to beast_1_forest_princess
],Choice - (Explore) To quote you from...If Var "beast_1_forest_princess_why_strong" == Val (Bool False) []
[
Assign "beast_1_forest_princess_why_strong" = Val (Bool True)
,
Assign "beast_1_forest_princess_count" += Val (Int 1)
,,,
Jump to beast_1_forest_princess
],Choice - (Explore) Who locked her in...If Var "beast_1_forest_princess_basement_explain" == Val (Bool False) []
[
Assign "beast_1_forest_princess_basement_explain" = Val (Bool True)
,
Assign "beast_1_forest_princess_count" += Val (Int 1)
,,,
Jump to beast_1_forest_princess
],Choice - (Explore) If people locked ...If "beast_1_forest_princess_basement_explain" && Var "beast_1_forest_princess_why_me" == Val (Bool False) []
[
Assign "beast_1_forest_princess_why_me" = Val (Bool True)
,
Assign "beast_1_forest_princess_count" += Val (Int 1)
,,,,,,,,,
Jump to beast_1_forest_princess
],Choice - (Explore) You're being cage...If Var "beast_1_forest_princess_cagey" == Val (Bool False) && Var "beast_1_forest_princess_count" > Val (Int 1) []
[
Assign "beast_1_forest_princess_cagey" = Val (Bool True)
,,,,,
[If Var "beast_1_forest_princess_count" < Val (Int 2) [,]]
,
[Else [,]]
,,,,,,,,,
Jump to beast_1_forest_princess
],Choice - Nevermind.If Var "beast_1_forest_princess_count" == Val (Int 0) []
[
{Label: beast_1_forest_princess_leaving
[,,
Jump to beast_1_forest
]}
],Choice - That's all.If Var "beast_1_forest_princess_count" != Val (Int 0) []
[
Jump to beast_1_forest_princess_leaving
]]}
]}
],Choice - [[Proceed to the cabin.]
[
Jump to beast_1_cabin_arrival
],Choice - [[Turn around and leave.]If "mound_can_attempt_flee" []
[
[If Var "loops_finished" >= Val (Int 2) [
Assign "mound_can_attempt_flee" = Val (Bool False)
,,,
Jump to beast_1_forest
]]
,,,
Jump to turn_and_leave_join
]]}
]}
]}
,
{Label: beast_1_cabin_arrival
[,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Proceed into the cabin.]
[
{Label: beast_stranger_rejoin
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,]}
]]}
,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,
{Label: cabin_interior_2_beast_menu
[,,,,,
{Choice Branch: [Choice - (Explore) You didn't say an...If Var "beast_1_cabin_mirror_ask" == Val (Bool False) && "beast_1_cabin_mirror_present" []
[
Assign "beast_1_cabin_mirror_ask" = Val (Bool True)
,
Assign "current_run_mirror_comment" = Val (Bool True)
,,,,,,,
[If "beast_1_forest_share_loop" [,]]
,
[Else [,]]
,
{Choice Branch: [Choice - Why {b}would{/b} you lie ab...
[,],Choice - I want to look at myself. I...
[,,,,,],Choice - It doesn't matter.
[
Assign "beast_1_cabin_mirror_present" = Val (Bool False)
,,,,,,,,,],Choice - [[Remain silent.]
[,,,],Choice - [[Approach the mirror.]If Var "beast_1_cabin_mirror_approached" == Val (Bool False) []
[
{Label: beast_cabin_1_mirror_join
[,,,,,,,,,,
Assign "beast_1_cabin_mirror_approached" = Val (Bool True)
,,,
[If Var "beast_1_cabin_mirror_ask" == Val (Bool False) [,]]
,
[Else [,]]
,
Assign "current_run_mirror_touched" = Val (Bool True)
,
{Choice Branch: [Choice - [[Wipe the mirror clean.]
[
Assign "beast_1_cabin_mirror_present" = Val (Bool False)
,,,,
[If Var "beast_1_cabin_mirror_ask" == Val (Bool False) []]
,
[Else []]
,,,
[If "beast_1_cabin_mirror_ask" [,]]
,
[Else [,]]
,,,,,,,,
[If Var "beast_1_cabin_blade_taken" == Val (Bool False) []]
,,
Jump to cabin_interior_2_beast_menu
]]}
]}
]]}
,
Jump to cabin_interior_2_beast_menu
],Choice - (Explore) This whole cabin ...If Var "beast_1_cabin_last_time_comment" == Val (Bool False) && "beast_1_forest_share_loop_insist" []
[
Assign "beast_1_cabin_last_time_comment" = Val (Bool True)
,,,,,,,,,
Jump to cabin_interior_2_beast_menu
],Choice - (Explore) [[Approach the mi...If "beast_1_cabin_mirror_present" && Var "beast_1_cabin_mirror_approached" == Val (Bool False) []
[
Assign "beast_1_cabin_mirror_approached" = Val (Bool True)
,
Jump to beast_cabin_1_mirror_join
],Choice - (Explore) [[Take the blade.]If Var "beast_1_cabin_blade_taken" == Val (Bool False) []
[
Assign "beast_1_cabin_blade_taken" = Val (Bool True)
,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,
Jump to cabin_interior_2_beast_menu
],Choice - [[Enter the basement.]
[
[If Var "beast_1_cabin_blade_taken" == Val (Bool False) [,,,]]
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,,,,,,
[If "beast_1_cabin_blade_taken" [,,,]]
,
[Else [,]]
,
Jump to beast_1_encounter_start
]]}
]}
]}
,
{Label: beast_2_start
[,,,
Assign "default_mouse" = Val (String "default")
,
Assign "blade_held" = Val (Bool False)
,
Assign "current_loop" = Val (Int 2)
,
Assign "quick_menu" = Val (Bool False)
,
Assign "config.menu_include_disabled" = Val (Bool False)
,
Assign "current_princess" = Val (String "den")
,
Assign "den_encountered" = Val (Bool True)
,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,
[If "trait_stubborn" [,,,,,]]
,
[If "trait_skeptic" [,,,,,,,]]
,,,
[If "trait_stubborn" [,,,,,,,,,,,]]
,
[Else [,,,,,,,,,,,,,]]
]}
,
{Label: beast_2_path_menu
[,,,,
{Choice Branch: [Choice - (Explore) Okay. What's the ...If Var "beast_2_plan" == Val (Bool False) []
[
Assign "beast_2_plan" = Val (Bool True)
,
[If "trait_stubborn" [,,,,,]]
,
[Else [
{Label: beast_2_skeptic_plan_join
[,,,,,,,,,,,,,,,,
[If Var "beast_2_plan" == Val (Bool False) [
Jump to beast_2_exterior_menu
]]
]}
]]
,
Jump to beast_2_path_menu
],Choice - (Explore) The path is diffe...If Var "beast_2_path_different" == Val (Bool False) []
[
Assign "beast_2_path_different" = Val (Bool True)
,
[If "trait_skeptic" [,,,]]
,,,,,,,,,
[If "trait_stubborn" [,]]
,
[Else [,]]
,
Jump to beast_2_path_menu
],Choice - (Explore) I want answers. W...If Var "beast_2_answers" == Val (Bool False) []
[
Assign "beast_2_answers" = Val (Bool True)
,
[If "trait_skeptic" [,]]
,
[Else [,]]
,
[If "trait_stubborn" [,]]
,
[Else [,]]
,
Jump to beast_2_path_menu
],Choice - (Explore) What if we just l...If Var "beast_2_leave" == Val (Bool False) []
[
Assign "beast_2_leave" = Val (Bool True)
,
[If "trait_skeptic" [,]]
,
[Else [,]]
,,,
[If "trait_skeptic" [,,,]]
,
Jump to beast_2_path_menu
],Choice - No matter what happens next...
[
Jump to beast_2_exterior
],Choice - [[Silently proceed to the c...
[
Jump to beast_2_exterior
],Choice - I'm done with this. Bye! [[...If "mound_can_attempt_flee" []
[
[If Var "loops_finished" >= Val (Int 2) [
Assign "mound_can_attempt_flee" = Val (Bool False)
,,,
Jump to beast_2_path_menu
]]
,
Assign "caught_origin_ch3" = Val (Bool True)
,
Assign "caught_origin_current" = Val (String "beast2")
,
[If "trait_stubborn" [,]]
,
[If "trait_skeptic" [,]]
,,,,,,,,,,
Jump to caught_start
]]}
]}
,
{Label: beast_2_exterior
[,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,
[If "beast_2_plan" [
[If "trait_stubborn" [
{Label: beast_2_stubborn_plan_join
[,,,,,,,]}
]]
,
[Else [,,,,,,,,,]]
]]
,
[Else [,,
[If "trait_stubborn" [
Jump to beast_2_stubborn_plan_join
]]
,
[Else [,,,,,,,,,,
Jump to beast_2_skeptic_plan_join
]]
]]
,
{Label: beast_2_exterior_menu
[
{Choice Branch: [Choice - [[Proceed into the cabin.]
[,
Assign "quick_menu" = Val (Bool False)
,,,,
Jump to beast_2_interior
]]}
]}
]}
,
{Label: beast_2_interior
[,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,
[If "trait_stubborn" [,]]
,
[Elif Var "beast_1_cabin_mirror_ask" == Val (Bool False) && Var "beast_1_cabin_mirror_approached" == Val (Bool False) && Var "trait_skeptic" == Val (Bool False) [,]]
,
[If "beast_1_cabin_mirror_ask" || "beast_1_cabin_mirror_approached" [
[If "trait_skeptic" [,]]
,
[Else [,]]
]]
,
[Else [
[If "trait_skeptic" [,]]
,
[Else [,]]
]]
,,,,,
[If "trait_skeptic" [,]]
,
[If "trait_stubborn" [,]]
,
{Label: beast_2_cabin_menu
[,
{Choice Branch: [Choice - (Explore) [[Take the blade.]If Var "beast_2_blade_taken" == Val (Bool False) []
[
Assign "beast_2_blade_taken" = Val (Bool True)
,,,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,
[If "trait_skeptic" [,]]
,
[Else [,]]
,
Jump to beast_2_cabin_menu
],Choice - [[Approach the mirror.]
[
[If Var "beast_2_blade_taken" == Val (Bool False) [
[If "trait_skeptic" [,]]
,
[Else [,]]
,,]]
,,,,,,,,
[If Var "blade_held" == Val (Bool False) []]
,,,,
[If "trait_skeptic" [,]]
,
[Else [,]]
,,,,,
[If "beast_1_cabin_mirror_approached" [,]]
,
[Else [,]]
,
{Choice Branch: [Choice - [[Wipe the mirror clean.]
[,,],Choice - [[Smash it.]If "trait_stubborn" []
[,
Assign "beast_2_smash_attempt" = Val (Bool True)
,,,,,,,,,,,,,,
Jump to beast_2_stairs
]]}
,,,
Assign "quick_menu" = Val (Bool False)
,
[If "beast_2_smash_attempt" [,,,,
Jump to beast_2_stairs
]]
,,,,,,,,
Assign "current_run_mirror_comment" = Val (Bool True)
,
Jump to beast_2_stairs
]]}
]}
]}
,
{Label: beast_2_stairs
[
Assign "quick_menu" = Val (Bool False)
,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,
{Choice Branch: [Choice - ''We have unfinished busine...
[
{Label: beast_2_stairs_comment
[,,,,
[If "trait_skeptic" [,]]
,
[Else [,]]
,,
Assign "quick_menu" = Val (Bool False)
,,,,,
Jump to beast_2_basement
]}
],Choice - ''We should talk.''
[
Jump to beast_2_stairs_comment
],Choice - ''We don't have to fight. I...
[
Jump to beast_2_stairs_comment
],Choice - (Lie) ''We don't have to fi...
[
Jump to beast_2_stairs_comment
],Choice - [[Say nothing, and silently...
[,
Assign "quick_menu" = Val (Bool False)
,,,,,
Jump to beast_2_basement
]]}
]}
,
{Label: beast_2_basement
[,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,
[If "trait_stubborn" [
[If "blade_held" [,]]
,
[Else [,]]
]]
,
[Else [,]]
,
{Label: beast_2_basement_menu
[,
{Choice Branch: [Choice - (Explore) ''Staying quiet, ...If Var "beast_2_basement_chat" == Val (Bool False) []
[
Assign "beast_2_basement_chat" = Val (Bool True)
,,,
Jump to beast_2_basement_menu
],Choice - (Explore) ''We don't have t...If Var "beast_2_basement_chat" == Val (Bool False) []
[
Assign "beast_2_basement_chat" = Val (Bool True)
,,,
Jump to beast_2_basement_menu
],Choice - [[Step into the shadows, re...
[
Jump to beast_2_fight
],Choice - [[Step into the shadows and...
[
Jump to beast_2_free
]]}
]}
]}
,
{Label: beast_2_fight
[,,,,,,,,,,
[If "trait_stubborn" && "blade_held" [,,,,,,,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,,,,,,,
Jump to den_pristine_fight
]]
,
[Else [,,
[If "trait_stubborn" [,]]
,
[Else [
[If Var "blade_held" == Val (Bool False) [,]]
,
[Else [,]]
]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "beast_2_end" = Val (String "fight_fail")
,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 1)
,
Jump to mirror_start
]]
]}
,
{Label: beast_2_free
[,,,,,,
[If "trait_stubborn" [,]]
,
[Else [,]]
,,,,,,,,,,,,
[If "trait_stubborn" [,,,,,,,,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,
Assign "beast_2_end" = Val (String "free_fail")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 1)
,
Jump to mirror_start
]]
,
[Else [,,,,,,,,
[If "blade_held" []]
,
[Else []]
,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to den_pristine_free
]]
]}
,
{Label: damsel_1_encounter_start
[,,,,,,,,,,,,
[If "damsel_1_forest_share_loop" [,]]
,
[Else [,]]
,,,,,,,,,
[If Var "damsel_1_forest_share_loop_insist" == Val (Bool False) [,,,]]
,
[Else [,]]
]}
,
{Label: damsel_1_menu
[,,,,,,,
{Choice Branch: [Choice - (Explore) ''You killed me l...If Var "damsel_kill_last_time" == Val (Bool False) []
[
Assign "damsel_kill_last_time" = Val (Bool True)
,,,,,,,,,,,,
Jump to damsel_1_menu
],Choice - (Explore) ''I didn't bring ...If Var "damsel_how_free" == Val (Bool False) && Var "blade_held" == Val (Bool False) []
[
Jump to damsel_how_free_join
],Choice - (Explore) ''Do I have to cu...If Var "damsel_how_free" == Val (Bool False) && "blade_held" []
[
{Label: damsel_how_free_join
[
Assign "damsel_how_free" = Val (Bool True)
,,,,,,,,,,,,,,,,
Jump to damsel_1_menu
]}
],Choice - (Explore) ''What happened a...If Var "damsel_after_die" == Val (Bool False) []
[
Assign "damsel_after_die" = Val (Bool True)
,,,,,,
Jump to damsel_1_menu
],Choice - (Explore) ''But before we s...If "damsel_after_die" && Var "damsel_end_world" == Val (Bool False) []
[
Jump to damsel_end_world_join
],Choice - (Explore) ''I have to ask.....If Var "damsel_after_die" == Val (Bool False) && Var "damsel_end_world" == Val (Bool False) []
[
{Label: damsel_end_world_join
[
Assign "damsel_end_world" = Val (Bool True)
,,,,,,,,,,
{Choice Branch: [Choice - ''No? I don't want the worl...
[
Assign "damsel_end_world_flavor" = Val (String "save")
,,,,,,,,,],Choice - ''I have no feelings one wa...
[
Assign "damsel_end_world_flavor" = Val (String "neutral")
,,,,,,,,,,,,,,,,],Choice - ''Honestly, the world sucks...
[
Assign "damsel_end_world_flavor" = Val (String "burn")
,,,,,,,,,,,,,,,,,],Choice - [[Remain silent.]
[
Assign "damsel_end_world_flavor" = Val (String "silence")
,,,,,,,,,,,,,,,]]}
,
Jump to damsel_1_menu
]}
],Choice - (Explore) ''I'm sorry about...If Var "damsel_sorry" == Val (Bool False) []
[
Assign "damsel_sorry" = Val (Bool True)
,,,,,,,,,,,,,,,,,,
Jump to damsel_1_menu
],Choice - [[Rescue the Princess.]
[
Jump to damsel_1_free
],Choice - [[Slay the Princess.]If "blade_held" && "damsel_can_slay_attempt" []
[
[If "grey_encountered" [
Assign "damsel_can_slay_attempt" = Val (Bool False)
,,,,,
Jump to damsel_1_menu
]]
,
Assign "damsel_depersonalization_count" -= Val (Int 1)
,,,,,,,,,,,,,,,,,,
Jump to damsel_1_murder
]]}
]}
,
{Label: damsel_1_murder
[
Assign "quick_menu" = Val (Bool False)
,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
[If Var "damsel_depersonalization_count" == Val (Int 0) || Var "damsel_depersonalization_count" == Val (Int (-1)) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 1) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 2) []]
,
[Else []]
,,,,,
[If Var "damsel_depersonalization_count" == Val (Int 0) || Var "damsel_depersonalization_count" == Val (Int (-1)) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 1) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 2) []]
,
[Else []]
,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,,
{Choice Branch: [Choice - ''I'm the one who makes the...
[,,
Jump to damsel_1_murder_2
],Choice - ''If that's what you want t...
[,,,,
Jump to damsel_1_murder_2
],Choice - [[Remain silent.]
[,,
Jump to damsel_1_murder_2
]]}
,
{Label: damsel_1_murder_2
[,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,
Jump to grey_start
]}
]}
,
{Label: damsel_1_free
[
[If Var "damsel_how_free" == Val (Bool False) [,,,,,,,,,,,,,,,,,,,,,]]
,,,,,,
[If "blade_held" [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "blade_held" [,,,,,,,]]
,
[Else [,,,,,]]
,,,,,,,,,
{Label: damsel_free_menu
[,
{Choice Branch: [Choice - (Explore) ''What do you wan...If Var "damsel_what_want" == Val (Bool False) []
[
Assign "damsel_what_want" = Val (Bool True)
,,,,,,,,,
[If "what_would_you_do_1" [,,,]]
,,,,,,,,,,,,,,,,,,,,
{Label: damsel_depersonalization_menu
[,,,,
[If Var "damsel_want_end_2_prev_flag" == Val (Bool False) [
[If Var "damsel_depersonalization_count" == Val (Int 1) [,,,,,,,]]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 2) [,,,,,,,]]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 3) [,,,,,,,]]
]]
,
[Else [
Assign "damsel_want_end_2_prev_flag" = Val (Bool True)
]]
,
{Choice Branch: [Choice - ''Okay. Clearly something i...If Var "damsel_depersonalization_count" >= Val (Int 3) []
[,
Assign "damsel_hea_dereal_flag" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "trait_paranoid" = Val (Bool True)
,
Jump to damsel_happy_late_join
],Choice - (Explore) ''You're just par...If "damsel_parrot_comment" && Var "damsel_parrot_explore" == Val (Bool False) []
[
Assign "damsel_depersonalization_count" += Val (Int 1)
,
Assign "damsel_parrot_explore" = Val (Bool True)
,
[If Var "damsel_depersonalization_count" == Val (Int 1) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 2) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 3) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 1) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 1) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 2) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 3) []]
,
[Else []]
,,,,
[If Var "damsel_depersonalization_count" == Val (Int 4) [
Jump to damsel_personalization_end
]]
,
Jump to damsel_depersonalization_menu
],Choice - (Explore) ''I want you to t...If Var "damsel_tell_what_want" == Val (Bool False) []
[,
Assign "damsel_tell_what_want" = Val (Bool True)
,
Assign "damsel_depersonalization_count" += Val (Int 1)
,
[If Var "damsel_depersonalization_count" == Val (Int 1) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 2) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 3) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 1) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 1) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 2) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 3) []]
,
[Else []]
,,,,
[If Var "damsel_depersonalization_count" == Val (Int 4) [
Jump to damsel_personalization_end
]]
,
Jump to damsel_depersonalization_menu
],Choice - (Explore) ''There must be s...If Var "damsel_tell_what_want_2" == Val (Bool False) []
[,
Assign "damsel_tell_what_want_2" = Val (Bool True)
,
Assign "damsel_depersonalization_count" += Val (Int 1)
,
[If Var "damsel_depersonalization_count" == Val (Int 1) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 2) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 3) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 1) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 1) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 2) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 3) []]
,
[Else []]
,,,,
[If Var "damsel_depersonalization_count" == Val (Int 4) [
Jump to damsel_personalization_end
]]
,
Jump to damsel_depersonalization_menu
],Choice - (Explore) ''But what would ...If Var "damsel_tell_what_make_happy" == Val (Bool False) && Var "damsel_depersonalization_count" >= Val (Int 1) []
[,
Assign "damsel_tell_what_make_happy" = Val (Bool True)
,
Assign "damsel_depersonalization_count" += Val (Int 1)
,
[If Var "damsel_depersonalization_count" == Val (Int 1) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 2) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 3) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 1) [,]]
,,,,,
[If Var "damsel_depersonalization_count" == Val (Int 4) [
Jump to damsel_personalization_end
]]
,
Jump to damsel_depersonalization_menu
],Choice - (Explore) ''You have to wan...If Var "damsel_depersonalization_count" >= Val (Int 1) && Var "damsel_tell_what_make_happy_follow" == Val (Bool False) []
[,
Assign "damsel_tell_what_make_happy_follow" = Val (Bool True)
,
Assign "damsel_depersonalization_count" += Val (Int 1)
,
[If Var "damsel_depersonalization_count" == Val (Int 1) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 2) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 3) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 1) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 1) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 2) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 3) []]
,
[Else []]
,,,,
[If Var "damsel_depersonalization_count" == Val (Int 4) [
Jump to damsel_personalization_end
]]
,
Jump to damsel_depersonalization_menu
],Choice - (Explore) ''But you need yo...If Var "damsel_depersonalization_count" >= Val (Int 1) && Var "damsel_tell_what_make_happy_follow2" == Val (Bool False) []
[,
Assign "damsel_tell_what_make_happy_follow2" = Val (Bool True)
,
Assign "damsel_depersonalization_count" += Val (Int 1)
,
[If Var "damsel_depersonalization_count" == Val (Int 1) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 2) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 3) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 1) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 1) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 2) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 3) []]
,
[Else []]
,,,,
[If Var "damsel_depersonalization_count" == Val (Int 4) [
Jump to damsel_personalization_end
]]
,
Jump to damsel_depersonalization_menu
],Choice - (Explore) ''I want you to m...If Var "damsel_depersonalization_count" >= Val (Int 1) && Var "damsel_want_unhappy" == Val (Bool False) []
[,
Assign "damsel_want_unhappy" = Val (Bool True)
,
Assign "damsel_depersonalization_count" += Val (Int 1)
,
[If Var "damsel_depersonalization_count" == Val (Int 1) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 2) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 3) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 1) [,]]
,
Assign "damsel_personalization_count_flag" = Val (Bool True)
,
[If Var "damsel_depersonalization_count" == Val (Int 1) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 2) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 3) []]
,
[Else []]
,,,,
[If Var "damsel_depersonalization_count" == Val (Int 4) [
Jump to damsel_personalization_end
]]
,
Jump to damsel_depersonalization_menu
],Choice - (Explore) ''Do you want to ...If Var "damsel_want_end_2" == Val (Bool False) []
[,,
Assign "damsel_want_end_2_prev_flag" = Val (Bool True)
,
[If Var "damsel_depersonalization_count" == Val (Int 1) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 2) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 3) [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 1) [,]]
,
Assign "damsel_personalization_count_flag" = Val (Bool True)
,
Assign "damsel_want_end_2" = Val (Bool True)
,,,
[If "damsel_end_world" [
[If Var "damsel_end_world_flavor" == Val (String "burn") [
[If Var "damsel_depersonalization_count" == Val (Int 1) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 2) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 3) []]
,
[Else []]
,,,]]
,
[Elif Var "damsel_end_world_flavor" == Val (String "neutral") [
[If Var "damsel_depersonalization_count" == Val (Int 1) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 2) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 3) []]
,
[Else []]
,,,]]
,
[Else [
[If Var "damsel_depersonalization_count" == Val (Int 1) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 2) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 3) []]
,
[Else []]
,,,]]
,
Jump to damsel_depersonalization_menu
]]
,
[Else [
[If Var "damsel_depersonalization_count" == Val (Int 0) [,,,,]]
,
[Else [
[If Var "damsel_depersonalization_count" == Val (Int 1) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 2) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 3) []]
,
[Else []]
,,,,
[If Var "damsel_parrot_comment" == Val (Bool False) [
Assign "damsel_parrot_comment" = Val (Bool True)
,,]]
]]
,
{Choice Branch: [Choice - ''No? I don't want the worl...
[
Assign "damsel_end_world_flavor" = Val (String "save")
,
[If "blade_held" [,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 0) [
Assign "damsel_want_end_2_prev_flag" = Val (Bool False)
,
Assign "damsel_depersonalization_count" += Val (Int 1)
,,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 1) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 2) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 3) []]
,
[Else []]
,,,,,,,,,,,],Choice - ''I have no feelings about ...
[
Assign "damsel_end_world_flavor" = Val (String "neutral")
,,,
[If Var "damsel_depersonalization_count" == Val (Int 0) [
Assign "damsel_want_end_2_prev_flag" = Val (Bool False)
,
Assign "damsel_depersonalization_count" += Val (Int 1)
,,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 1) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 2) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 3) []]
,
[Else []]
,,,,,,
[If Var "damsel_depersonalization_count" == Val (Int 1) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 2) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 3) []]
,
[Else []]
,,,,,,,],Choice - ''Honestly, the world sucks...
[
Assign "damsel_end_world_flavor" = Val (String "burn")
,,,
[If Var "damsel_depersonalization_count" == Val (Int 0) [
Assign "damsel_want_end_2_prev_flag" = Val (Bool False)
,
Assign "damsel_depersonalization_count" += Val (Int 1)
,,]]
,
[If Var "damsel_depersonalization_count" == Val (Int 1) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 2) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 3) []]
,
[Else []]
,,,,
[If Var "damsel_depersonalization_count" == Val (Int 1) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 2) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 3) []]
,
[Else []]
,,,,,],Choice - [[Remain silent.]
[
Assign "damsel_end_world_flavor" = Val (String "silence")
,,,
[If Var "damsel_depersonalization_count" == Val (Int 0) [
Assign "damsel_depersonalization_count" += Val (Int 1)
]]
,
[If Var "damsel_depersonalization_count" == Val (Int 1) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 2) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 3) []]
,
[Else []]
,,,
[If Var "damsel_depersonalization_count" == Val (Int 1) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 2) []]
,
[Elif Var "damsel_depersonalization_count" == Val (Int 3) []]
,
[Else []]
,,,,,,,,]]}
,
Jump to damsel_depersonalization_menu
]]
],Choice - ''I just want to leave. We ...
[
Jump to damsel_leave
],Choice - ''If you want to leave, the...
[
Jump to damsel_leave
],Choice - ''This isn't right. Let's j...If Var "damsel_depersonalization_count" >= Val (Int 1) []
[
Jump to damsel_leave
],Choice - ''Something isn't right her...If "blade_held" && "damsel_can_slay_attempt" []
[
[If "grey_encountered" [
Assign "damsel_can_slay_attempt" = Val (Bool False)
,,,,,
Jump to damsel_depersonalization_menu
]]
,,,,,,,,,,,,,,,,,,,,,
Jump to damsel_1_murder
]]}
]}
],Choice - ''We leave. And then we hav...
[
Jump to damsel_leave
]]}
]}
]}
,
{Label: damsel_leave
[,,,,,,,,,,,,,,,,,
[If Var "damsel_depersonalization_count" >= Val (Int 2) [,,,]]
,
[If "blade_held" [
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,]]
,
[Else [,,,,,,,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: damsel_leave_door
[,
{Choice Branch: [Choice - (Explore) ''Do you think yo...If Var "damsel_leave_door_explore" == Val (Bool False) []
[
Assign "damsel_leave_door_explore" = Val (Bool True)
,,,,,,,,,,
Jump to damsel_leave_door
],Choice - ''Yeah. I think you've got ...If "damsel_leave_door_explore" []
[,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,],Choice - ''I think we can open it if...
[,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,],Choice - ''I think I've got this.'' ...
[,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,]]}
]}
,
[If Var "damsel_1_cabin_blade_taken" == Val (Bool False) [
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,
{Choice Branch: [Choice - [[Take the blade and slay t...If "damsel_can_slay_attempt" []
[
[If "grey_encountered" [
Assign "damsel_can_slay_attempt" = Val (Bool False)
,,,,,
Jump to damsel_leave_jump_join
]]
,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,,,,,,,,,,,,,,,,,,
Jump to damsel_1_murder
],Choice - [[You're not doing that.]
[,]]}
]]
,
[Else [,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,]]
,,,,,,,
{Choice Branch: [Choice - ''All we need to be happy i...
[,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - ''Your nonchalance about th...If "damsel_want_end_2" || "damsel_end_world" []
[
[If "damsel_1_cabin_blade_taken" [,,,]]
,
[Else [,,,]]
,,,
Jump to damsel_happy_start
],Choice - ''Trust me. It'll be better...
[
Jump to damsel_happy_start
],Choice - ''You're right. We're leavi...
[,,,,
Jump to damsel_leave_jump_join
],Choice - [[Say nothing.]
[
{Label: damsel_happy_start
[
Assign "trait_opportunist" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: damsel_happy_late_join
[,,,
[If Var "damsel_hea_dereal_flag" == Val (Bool False) [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to happy_start
]}
]}
]]}
],Choice - Stop it with these interrup...
[
Jump to damsel_leave_jump_late
],Choice - [[Just ignore them.]
[
Jump to damsel_leave_jump_join
]]}
,
{Label: damsel_leave_jump_join
[,,,]}
,
{Label: damsel_leave_jump_late
[,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "damsel_end" = Val (String "free")
,
Assign "princess_free" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 1)
,
Jump to mirror_start
]}
]}
,
{Label: damsel_personalization_end
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,,,
Assign "current_princess" = Val (String "dereal")
,
Assign "damsel_end" = Val (String "dereal")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 2)
,
Jump to mirror_start
]}
,
{Label: damsel_1_start
[
Assign "blade_held" = Val (Bool False)
,
Assign "trait_smitten" = Val (Bool True)
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,
{Label: damsel_1_forest
[,,,,,,,
{Choice Branch: [Choice - (Explore) I'm getting a ter...If Var "damsel_1_forest_share_loop" == Val (Bool False) []
[
Assign "damsel_1_forest_deja_vu" = Val (Bool True)
,,,
{Label: damsel_1_forest_narrator_share_join
[
Assign "damsel_1_forest_count" += Val (Int 1)
,
Assign "damsel_1_forest_share_loop" = Val (Bool True)
,,,,,,,,,,,,,,,
Jump to damsel_1_forest
]}
],Choice - (Explore) This is more than...If "damsel_1_forest_deja_vu" && Var "damsel_1_forest_deja_vu_follow_up" == Val (Bool False) []
[
Assign "damsel_1_forest_deja_vu_follow_up" = Val (Bool True)
,
Assign "damsel_1_forest_count" += Val (Int 1)
,,,
Jump to damsel_1_forest
],Choice - (Explore) Wait... hasn't th...If Var "damsel_1_forest_share_loop" == Val (Bool False) []
[,,
Jump to damsel_1_forest_narrator_share_join
],Choice - (Explore) Okay, no.If Var "damsel_1_forest_share_loop" == Val (Bool False) []
[,,
Jump to damsel_1_forest_narrator_share_join
],Choice - (Explore) But I died! What ...If Var "damsel_1_forest_share_loop" == Val (Bool False) []
[
Assign "damsel_1_forest_share_died" = Val (Bool True)
,,,
Jump to damsel_1_forest_narrator_share_join
],Choice - (Explore) Oh, you bastard! ...If Var "damsel_1_forest_share_loop" == Val (Bool False) []
[
Assign "damsel_1_forest_share_died" = Val (Bool True)
,,,
Jump to damsel_1_forest_narrator_share_join
],Choice - (Explore) Let's assume I'm ...If "damsel_1_forest_share_loop" && Var "damsel_1_forest_deja_vu" == Val (Bool False) || "damsel_1_forest_deja_vu_follow_up" && Var "damsel_1_forest_share_loop_insist" == Val (Bool False) []
[
Assign "damsel_1_forest_share_loop_insist" = Val (Bool True)
,
Assign "damsel_1_forest_count" += Val (Int 1)
,,,,,
[If Var "damsel_1_forest_share_died" == Val (Bool False) [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to damsel_1_forest
],Choice - (Explore) I'm with them. I'...If "damsel_1_forest_share_loop_insist" && Var "damsel_1_forest_defy" == Val (Bool False) []
[,
Assign "damsel_1_forest_defy" = Val (Bool True)
,,,,,,,
Jump to damsel_1_forest
],Choice - (Explore) Let's talk about ...If "damsel_1_forest_share_loop_insist" && Var "damsel_1_forest_princess_press" == Val (Bool False) []
[
Assign "damsel_1_forest_count" += Val (Int 1)
,
Assign "damsel_1_forest_princess_press" = Val (Bool True)
,,,
{Label: damsel_1_forest_princess
[,,,,,,
{Choice Branch: [Choice - (Explore) The only reason s...If Var "damsel_1_forest_princess_why_strong" == Val (Bool False) []
[
Assign "damsel_1_forest_princess_why_strong" = Val (Bool True)
,
Assign "damsel_1_forest_princess_count" += Val (Int 1)
,,,,,,,
Jump to damsel_1_forest_princess
],Choice - (Explore) Who locked her in...If Var "damsel_1_forest_princess_basement_explain" == Val (Bool False) []
[
Assign "damsel_1_forest_princess_basement_explain" = Val (Bool True)
,
Assign "damsel_1_forest_princess_count" += Val (Int 1)
,,,
Jump to damsel_1_forest_princess
],Choice - (Explore) If people locked ...If "damsel_1_forest_princess_basement_explain" && Var "damsel_1_forest_princess_why_me" == Val (Bool False) []
[
Assign "damsel_1_forest_princess_why_me" = Val (Bool True)
,
Assign "damsel_1_forest_princess_count" += Val (Int 1)
,,,,,,,,,,,
Jump to damsel_1_forest_princess
],Choice - (Explore) You're being cage...If Var "damsel_1_forest_princess_cagey" == Val (Bool False) && Var "damsel_1_forest_princess_count" > Val (Int 1) []
[
Assign "damsel_1_forest_princess_cagey" = Val (Bool True)
,,,
[If Var "damsel_1_forest_princess_count" < Val (Int 2) [,]]
,
[Else [,]]
,
Jump to damsel_1_forest_princess
],Choice - Nevermind.If Var "damsel_1_forest_princess_count" == Val (Int 0) []
[
{Label: damsel_1_forest_princess_leaving
[,,
Jump to damsel_1_forest
]}
],Choice - That's all.If Var "damsel_1_forest_princess_count" != Val (Int 0) []
[
Jump to damsel_1_forest_princess_leaving
]]}
]}
],Choice - [[Proceed to the cabin.]
[
Jump to damsel_1_cabin_arrival
],Choice - [[Turn around and leave.]If "mound_can_attempt_flee" []
[
[If Var "loops_finished" >= Val (Int 2) [
Assign "mound_can_attempt_flee" = Val (Bool False)
,,,
Jump to damsel_1_forest
]]
,,,
Jump to turn_and_leave_join
]]}
]}
]}
,
{Label: damsel_1_cabin_arrival
[,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,
[If Var "damsel_1_forest_share_loop" == Val (Bool False) [,,,,,,,,,,,]]
,
[Else [,,,]]
,,,,,,,
{Choice Branch: [Choice - [[Proceed into the cabin.]
[
{Label: damsel_stranger_rejoin
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,]}
]]}
,,,,,,,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,
{Label: cabin_interior_2_damsel_menu
[,,,,,
{Choice Branch: [Choice - (Explore) You didn't say an...If Var "damsel_1_cabin_mirror_ask" == Val (Bool False) && "damsel_1_cabin_mirror_present" []
[
Assign "damsel_1_cabin_mirror_ask" = Val (Bool True)
,,,,,,,,,,,
{Choice Branch: [Choice - Why {b}would{/b} you lie ab...
[,],Choice - I want to look at myself. I...
[,,,,,],Choice - It doesn't matter.
[
Assign "damsel_1_cabin_mirror_present" = Val (Bool False)
,,,,,,,,,],Choice - [[Remain silent.]
[,,,],Choice - [[Approach the mirror.]If Var "damsel_1_cabin_mirror_approached" == Val (Bool False) []
[
{Label: damsel_cabin_1_mirror_join
[,,,,,,,,,,
Assign "damsel_1_cabin_mirror_approached" = Val (Bool True)
,,,
[If Var "damsel_1_cabin_mirror_ask" == Val (Bool False) [,]]
,
[Else [,]]
,
{Choice Branch: [Choice - [[Wipe the mirror clean.]
[
Assign "damsel_1_cabin_mirror_present" = Val (Bool False)
,,,,
[If Var "damsel_1_cabin_mirror_ask" == Val (Bool False) []]
,
[Else []]
,,,
[If "damsel_1_cabin_mirror_ask" [,]]
,
[Else [,]]
,,,,,,,,,
[If Var "damsel_1_cabin_blade_taken" == Val (Bool False) []]
,,
Jump to cabin_interior_2_damsel_menu
]]}
]}
]]}
,
Jump to cabin_interior_2_damsel_menu
],Choice - (Explore) This whole cabin ...If Var "damsel_1_cabin_last_time_comment" == Val (Bool False) && "damsel_1_forest_share_loop_insist" []
[
Assign "damsel_1_cabin_last_time_comment" = Val (Bool True)
,,,,,,,,,
Jump to cabin_interior_2_damsel_menu
],Choice - (Explore) [[Approach the mi...If "damsel_1_cabin_mirror_present" && Var "damsel_1_cabin_mirror_approached" == Val (Bool False) []
[
Assign "damsel_1_cabin_mirror_approached" = Val (Bool True)
,
Jump to damsel_cabin_1_mirror_join
],Choice - (Explore) [[Take the blade.]If Var "damsel_1_cabin_blade_taken" == Val (Bool False) []
[
Assign "damsel_1_cabin_blade_taken" = Val (Bool True)
,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,,,
[If Var "damsel_1_forest_share_loop" == Val (Bool False) [,]]
,
[Else [,]]
,,,
Jump to cabin_interior_2_damsel_menu
],Choice - [[Enter the basement.]
[,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,
[If "damsel_1_forest_share_loop" [,,,]]
,
[Else [,,,,,]]
,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,
Jump to damsel_1_encounter_start
]]}
]}
]}
,
{Label: nightmare_1_start
[
Assign "blade_held" = Val (Bool False)
,
Assign "trait_paranoid" = Val (Bool True)
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,
{Label: nightmare_1_forest
[,,,,,,,,
{Choice Branch: [Choice - (Explore) I'm getting a ter...If Var "nightmare_1_forest_share_loop" == Val (Bool False) []
[
Assign "nightmare_1_forest_deja_vu" = Val (Bool True)
,,,
{Label: nightmare_1_forest_narrator_share_join
[
Assign "nightmare_1_forest_count" += Val (Int 1)
,
Assign "nightmare_1_forest_share_loop" = Val (Bool True)
,,,,,,,,,,,
Jump to nightmare_1_forest
]}
],Choice - (Explore) This is more than...If "nightmare_1_forest_deja_vu" && Var "nightmare_1_forest_deja_vu_follow_up" == Val (Bool False) []
[
Assign "nightmare_1_forest_deja_vu_follow_up" = Val (Bool True)
,
Assign "nightmare_1_forest_count" += Val (Int 1)
,,,
Jump to nightmare_1_forest
],Choice - (Explore) Wait... hasn't th...If Var "nightmare_1_forest_share_loop" == Val (Bool False) []
[,,
Jump to nightmare_1_forest_narrator_share_join
],Choice - (Explore) Okay, no.If Var "nightmare_1_forest_share_loop" == Val (Bool False) []
[,,
Jump to nightmare_1_forest_narrator_share_join
],Choice - (Explore) But I died! What ...If Var "nightmare_1_forest_share_loop" == Val (Bool False) []
[
Assign "nightmare_1_forest_share_died" = Val (Bool True)
,,,
Jump to nightmare_1_forest_narrator_share_join
],Choice - (Explore) She's going to ki...If Var "nightmare_1_forest_share_loop" == Val (Bool False) []
[
Assign "nightmare_1_forest_share_died" = Val (Bool True)
,,,
Jump to nightmare_1_forest_narrator_share_join
],Choice - (Explore) Let's assume I'm ...If "nightmare_1_forest_share_loop" && Var "nightmare_1_forest_deja_vu" == Val (Bool False) || "nightmare_1_forest_deja_vu_follow_up" && Var "nightmare_1_forest_share_loop_insist" == Val (Bool False) []
[
Assign "nightmare_1_forest_share_loop_insist" = Val (Bool True)
,
Assign "nightmare_1_forest_count" += Val (Int 1)
,,,,,
[If Var "nightmare_1_forest_share_died" == Val (Bool False) [,]]
,
[Else [,]]
,
[If "nightmare_join_fled" [,,
[If "blade_taken_1" [,]]
,
[Else [,]]
]]
,
[Else [,,,,,,,]]
,,,,,,,,,,,,,,,,,,,,,
Jump to nightmare_1_forest
],Choice - (Explore) Let's talk about ...If "nightmare_1_forest_share_loop_insist" && Var "nightmare_1_forest_princess_press" == Val (Bool False) []
[
Assign "nightmare_1_forest_count" += Val (Int 1)
,
Assign "nightmare_1_forest_princess_press" = Val (Bool True)
,,,
{Label: nightmare_1_forest_princess
[,,,,,,
{Choice Branch: [Choice - (Explore) Just being around...If Var "nightmare_1_forest_princess_tips" == Val (Bool False) []
[
Assign "nightmare_1_forest_princess_tips" = Val (Bool True)
,
Assign "nightmare_1_forest_princess_count" += Val (Int 1)
,,,
Jump to nightmare_1_forest_princess
],Choice - (Explore) To quote you from...If Var "nightmare_1_forest_princess_why_strong" == Val (Bool False) []
[
Assign "nightmare_1_forest_princess_why_strong" = Val (Bool True)
,
Assign "nightmare_1_forest_princess_count" += Val (Int 1)
,,,
Jump to nightmare_1_forest_princess
],Choice - (Explore) Who locked her in...If Var "nightmare_1_forest_princess_basement_explain" == Val (Bool False) []
[
Assign "nightmare_1_forest_princess_basement_explain" = Val (Bool True)
,
Assign "nightmare_1_forest_princess_count" += Val (Int 1)
,,,
Jump to nightmare_1_forest_princess
],Choice - (Explore) If people locked ...If "nightmare_1_forest_princess_basement_explain" && Var "nightmare_1_forest_princess_why_me" == Val (Bool False) []
[
Assign "nightmare_1_forest_princess_why_me" = Val (Bool True)
,
Assign "nightmare_1_forest_princess_count" += Val (Int 1)
,,,,,,,,,,,,,
[If Var "nightmare_1_forest_plead_leave" == Val (Bool False) [
Assign "nightmare_1_forest_plead_leave" = Val (Bool True)
,,]]
,
Jump to nightmare_1_forest_princess
],Choice - (Explore) You're being cage...If Var "nightmare_1_forest_princess_cagey" == Val (Bool False) && Var "nightmare_1_forest_princess_count" > Val (Int 1) []
[
Assign "nightmare_1_forest_princess_cagey" = Val (Bool True)
,,,,,
[If Var "nightmare_1_forest_princess_count" < Val (Int 2) [,]]
,
[Else [,]]
,,,,,
[If "nightmare_1_forest_plead_leave" [,]]
,
[Else [,]]
,
Jump to nightmare_1_forest_princess
],Choice - Nevermind.If Var "nightmare_1_forest_princess_count" == Val (Int 0) []
[
{Label: nightmare_1_forest_princess_leaving
[,,
Jump to nightmare_1_forest
]}
],Choice - That's all.If Var "nightmare_1_forest_princess_count" != Val (Int 0) []
[
Jump to nightmare_1_forest_princess_leaving
]]}
]}
],Choice - [[Proceed to the cabin.]
[
Jump to nightmare_1_cabin_arrival
],Choice - [[Turn around and leave.]If "mound_can_attempt_flee" []
[
[If Var "loops_finished" >= Val (Int 2) [
Assign "mound_can_attempt_flee" = Val (Bool False)
,,,
Jump to nightmare_1_forest
]]
,,,
Jump to turn_and_leave_join
]]}
]}
]}
,
{Label: nightmare_1_cabin_arrival
[,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,
{Choice Branch: [Choice - [[Proceed into the cabin.]
[
{Label: nightmare_stranger_rejoin
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,]}
]]}
,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,
[If Var "nightmare_1_forest_share_loop" == Val (Bool False) [,]]
,
[Else [,]]
,,,,,,,,,
{Label: cabin_interior_2_nightmare_menu
[,,,,,
{Choice Branch: [Choice - (Explore) You didn't say an...If Var "nightmare_1_cabin_mirror_ask" == Val (Bool False) && "nightmare_1_cabin_mirror_present" []
[
Assign "nightmare_1_cabin_mirror_ask" = Val (Bool True)
,
Assign "current_run_mirror_comment" = Val (Bool True)
,,,,,,,,,,,
{Choice Branch: [Choice - Why {b}would{/b} you lie ab...
[,],Choice - I want to look at myself. I...
[,,,,,,,],Choice - It doesn't matter.
[
Assign "nightmare_1_cabin_mirror_present" = Val (Bool False)
,,,,,,,,,,,],Choice - [[Remain silent.]
[,,,,,],Choice - [[Approach the mirror.]If Var "nightmare_1_cabin_mirror_approached" == Val (Bool False) []
[
{Label: nightmare_cabin_1_mirror_join
[,,,,,,,,,,
Assign "nightmare_1_cabin_mirror_approached" = Val (Bool True)
,
[If Var "nightmare_1_forest_share_loop" == Val (Bool False) && Var "nightmare_1_cabin_mirror_ask" == Val (Bool False) []]
,
[Elif Var "nightmare_1_cabin_mirror_ask" == Val (Bool False) []]
,
[Else []]
,,
[If Var "nightmare_1_cabin_mirror_ask" == Val (Bool False) [,]]
,
[Else [,]]
,
Assign "current_run_mirror_comment" = Val (Bool True)
,
{Choice Branch: [Choice - [[Wipe the mirror clean.]
[
Assign "nightmare_1_cabin_mirror_present" = Val (Bool False)
,
[If Var "nightmare_1_cabin_mirror_ask" == Val (Bool False) []]
,
[Else []]
,,,,,,,,,,,,,
[If Var "nightmare_1_cabin_blade_taken" == Val (Bool False) []]
,,
Jump to cabin_interior_2_nightmare_menu
]]}
]}
]]}
,
Jump to cabin_interior_2_nightmare_menu
],Choice - (Explore) This whole cabin ...If Var "nightmare_1_cabin_last_time_comment" == Val (Bool False) && "nightmare_1_forest_share_loop" []
[
Assign "nightmare_1_cabin_last_time_comment" = Val (Bool True)
,,,
[If Var "nightmare_1_cabin_mirror_ask" == Val (Bool False) [,]]
,
[Else [,]]
,,,,,
Jump to cabin_interior_2_nightmare_menu
],Choice - (Explore) [[Approach the mi...If "nightmare_1_cabin_mirror_present" && Var "nightmare_1_cabin_mirror_approached" == Val (Bool False) []
[
Assign "nightmare_1_cabin_mirror_approached" = Val (Bool True)
,
Jump to nightmare_cabin_1_mirror_join
],Choice - (Explore) [[Take the blade.]If Var "nightmare_1_cabin_blade_taken" == Val (Bool False) []
[
Assign "nightmare_1_cabin_blade_taken" = Val (Bool True)
,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,,,,,,,,,
Jump to cabin_interior_2_nightmare_menu
],Choice - [[Enter the basement.]
[
[If Var "nightmare_1_cabin_blade_taken" == Val (Bool False) [
[If Var "blade_taken_1" == Val (Bool False) [,]]
,
[Else [,]]
]]
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,
[If Var "nightmare_1_forest_share_loop" == Val (Bool False) [,,,]]
,
[Else [,]]
,
{Label: ch2_nightmare_stairs_menu
[,
{Choice Branch: [Choice - (Explore) How hard is it to...If Var "nightmare_blade_throw_ask" == Val (Bool False) && "blade_held" []
[
Assign "nightmare_blade_throw_ask" = Val (Bool True)
,
[If "nightmare_1_cabin_blade_taken" [,,,,,]]
,
[Else [,,,,,,,,,,,,,,,,,,,,,,,,,]]
,
Jump to ch2_nightmare_stairs_menu
],Choice - I'm going to talk to her.
[,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,],Choice - We don't need a plan. I'm j...
[,
Assign "ch2_nightmare_voice_of_reason_comment" = Val (Bool True)
,
[If "nightmare_1_cabin_blade_taken" [,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,]]
,
[Else [,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,]]
],Choice - [[Step off into the void be...
[,,,,,,,,
{Choice Branch: [Choice - I was curious.
[,,
Jump to nightmare_1_basement_stairs_void_join
],Choice - I don't know. Falling into ...
[,,
Jump to nightmare_1_basement_stairs_void_join
],Choice - [[Say nothing.]
[
{Label: nightmare_1_basement_stairs_void_join
[,,,,,,,,]}
]]}
],Choice - [[Continue down the stairs ...
[,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,
Jump to nightmare_1_basement
]]}
]}
]]}
]}
]}
,
{Label: nightmare_1_basement
[,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,
[If Var "ch2_nightmare_voice_of_reason_comment" == Val (Bool False) [,,,]]
,
[Else [,]]
,,,,,,,
{Choice Branch: [Choice - Go left.
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,
Jump to nightmare_1_basement_direction_join
],Choice - Go right.
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,
Jump to nightmare_1_basement_direction_join
],Choice - Do nothing.
[,
Assign "nightmare_basement_nothing" = Val (Bool True)
,,,
Jump to nightmare_1_basement_direction_join
],Choice - Go back the way you came.
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,
{Label: nightmare_1_basement_direction_join
[
[If Var "nightmare_basement_nothing" == Val (Bool False) [,]]
,,,,,,,,,,,,,,,,,,,
[If "nightmare_1_cabin_blade_taken" [
[If "blade_taken_1" [,]]
,
[Else [,]]
]]
,
[Else [
[If "blade_taken_1" [,]]
,
[Else [,]]
]]
,,,,,,,,,,,
Jump to nightmare_encounter_start
]}
]]}
]}
,
{Label: nightmare_encounter_start
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "blade_held" [,]]
,
[Else [,,,,,,,]]
]}
,
{Label: nightmare_encounter_menu
[,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - (Explore) ''Why won't you f...If Var "nightmare_why_no_kill" == Val (Bool False) []
[
Assign "nightmare_why_no_kill" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to nightmare_encounter_menu
],Choice - (Explore) ''What good am I ...If Var "nightmare_why_need" == Val (Bool False) && Var "nightmare_why_no_kill" == Val (Bool False) []
[
Jump to nightmare_want_leave_join
],Choice - (Explore) ''What happened a...If Var "nightmare_why_need" == Val (Bool False) []
[
{Label: nightmare_want_leave_join
[
Assign "nightmare_why_need" = Val (Bool True)
,,,,,,,,,,,,,
Jump to nightmare_encounter_menu
]}
],Choice - (Explore) ''If you need me ...If "nightmare_why_need" && Var "nightmare_why_threaten" == Val (Bool False) []
[
Assign "nightmare_why_threaten" = Val (Bool True)
,,,,,,,,,,,,
Jump to nightmare_encounter_menu
],Choice - (Explore) ''I was sent here...If Var "nightmare_share_task" == Val (Bool False) []
[
Assign "nightmare_share_task" = Val (Bool True)
,
[If "basement_1_shared_task" [,,,]]
,,,,,,,,,,,,,,,,,
Jump to nightmare_encounter_menu
],Choice - (Explore) ''People will die...If "nightmare_share_task" && Var "nightmare_people_die" == Val (Bool False) []
[
Assign "nightmare_people_die" = Val (Bool True)
,,,,,,,,,
Jump to nightmare_encounter_menu
],Choice - (Explore) ''And if I let yo...If Var "nightmare_separate_ways" == Val (Bool False) && "nightmare_share_task" || "nightmare_why_need" []
[
Assign "nightmare_separate_ways" = Val (Bool True)
,,,,,,,,,
Jump to nightmare_encounter_menu
],Choice - (Explore) ''Being around yo...If "nightmare_separate_ways" && Var "nightmare_agony_explore" == Val (Bool False) []
[
Assign "nightmare_agony_explore" = Val (Bool True)
,,,,,,,,,
Jump to nightmare_encounter_menu
],Choice - (Explore) ''I'll just die t...If "nightmare_agony_explore" && Var "nightmare_die_explore" == Val (Bool False) []
[
Assign "nightmare_die_explore" = Val (Bool True)
,,,,,,,,,
Jump to nightmare_encounter_menu
],Choice - (Explore) ''Are you sure ab...If "nightmare_die_explore" && Var "nightmare_infinite_explore" == Val (Bool False) []
[
Assign "nightmare_infinite_explore" = Val (Bool True)
,,,,,,,,,,,,,
Jump to nightmare_encounter_menu
],Choice - (Explore) ''You're a lunati...If Var "nightmare_lunatic_explore" == Val (Bool False) []
[
Assign "nightmare_lunatic_explore" = Val (Bool True)
,,,
[If Var "nightmare_turn_off_comment" == Val (Bool False) [
Assign "nightmare_turn_off_comment" = Val (Bool True)
,,]]
,
[Else [,]]
,,,,,,,,,
Jump to nightmare_encounter_menu
],Choice - (Explore) ''If you want to ...If Var "nightmare_turn_off_explore" == Val (Bool False) []
[
Assign "nightmare_turn_off_explore" = Val (Bool True)
,,,
[If Var "nightmare_turn_off_comment" == Val (Bool False) [
Assign "nightmare_turn_off_comment" = Val (Bool True)
,,]]
,
[Else [,]]
,
Jump to nightmare_encounter_menu
],Choice - (Explore) ''How about I jus...If Var "nightmare_can_die_ask" == Val (Bool False) && Var "nightmare_kill_threaten" == Val (Bool False) []
[
Assign "nightmare_kill_threaten" = Val (Bool True)
,
[If "blade_held" [
Jump to nightmare_can_die_join
]]
,
[Else [,,,,,,,,
Jump to nightmare_encounter_menu
]]
],Choice - (Explore) ''Does that mean ...If Var "nightmare_can_die_ask" == Val (Bool False) && "nightmare_kill_threaten" []
[
{Label: nightmare_can_die_join
[
Assign "nightmare_can_die_ask" = Val (Bool True)
,,,,,,
[If "blade_held" [,,,,,,,,,,,,,,
[If Var "nightmare_stairs_reveal" == Val (Bool False) [,]]
,
[Else [,]]
,,]]
,
[Else [,,,]]
,
Jump to nightmare_encounter_menu
]}
],Choice - (Explore) ''And what if I r...If Var "nightmare_refuse_explore" == Val (Bool False) && "nightmare_share_task" || "nightmare_why_need" []
[
Assign "nightmare_refuse_explore" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to nightmare_encounter_menu
],Choice - (Explore) ''We don't have t...If Var "nightmare_friendship_offer" == Val (Bool False) []
[
Assign "nightmare_friendship_offer" = Val (Bool True)
,,,
[If Var "nightmare_why_need" == Val (Bool False) [,,
Jump to nightmare_want_leave_join
]]
,
[Else [,]]
,
Jump to nightmare_encounter_menu
],Choice - ''I'm not doing any of this...If "blade_held" []
[
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,
Jump to nightmare_delusion_join
],Choice - ''I'm not doing any of this...If Var "blade_held" == Val (Bool False) []
[
{Label: nightmare_delusion_join
[,,,,,,,,,,,
{Label: nightmare_delusion_late_join
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to nightmare_2_start
]}
]}
],Choice - ''Okay, let's get out of he...
[
Jump to nightmare_leave_together_start
],Choice - ''Fine, you win. I'll let y...
[
Jump to nightmare_leave_together_start
],Choice - [[Run.]
[
Assign "nightmare_run_attempt" = Val (Bool True)
,,,,,,,,,,,,,,,
Jump to nightmare_delusion_late_join
],Choice - [[Slay the Princess.]If "nightmare_can_wraith" && "blade_held" []
[
[If "wraith_encountered" [
Assign "nightmare_can_wraith" = Val (Bool False)
,,,,,
Jump to nightmare_encounter_menu
]]
,
Jump to nightmare_kill_join
]]}
]}
,
{Label: nightmare_leave_together_start
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "blade_held" [,,,,,,,,,,,,,,,,,,,,,
{Label: nightmare_leave_menu
[,
{Choice Branch: [Choice - (Explore) ''How about you g...If Var "nightmare_leave_stairs_comment" == Val (Bool False) []
[
Assign "nightmare_leave_stairs_comment" = Val (Bool True)
,,,,,,,,,,,
Jump to nightmare_leave_menu
],Choice - ''Okay. Fine'' [[Step onto ...If "nightmare_leave_stairs_comment" []
[
Jump to nightmare_stairs_leave_join
],Choice - [[Step onto the stairs.]If Var "nightmare_leave_stairs_comment" == Val (Bool False) []
[
{Label: nightmare_stairs_leave_join
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: nightmare_stairs_blade_menu
[,,,
{Choice Branch: [Choice - (Explore) ''I think the doo...If Var "nightmare_stairs_lock_comment" == Val (Bool False) []
[
Assign "nightmare_stairs_lock_comment" = Val (Bool True)
,
[If Var "nightmare_stairs_lock_try" == Val (Bool False) [,]]
,
[Else [,]]
,
Jump to nightmare_stairs_blade_menu
],Choice - (Explore) [[Try the door.]If Var "nightmare_stairs_lock_try" == Val (Bool False) || "nightmare_stairs_lock_comment" []
[
Assign "nightmare_stairs_lock_try" = Val (Bool True)
,
[If "nightmare_stairs_lock_comment" [
Assign "nightmare_made_it_upstairs" = Val (Bool True)
,,,,
[If "blade_held" []]
,
[Else []]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: nightmare_upstairs_slay_menu
[
{Choice Branch: [Choice - [[Slay the Princess.]If "nightmare_can_wraith" []
[
[If "wraith_encountered" [
Assign "nightmare_can_wraith" = Val (Bool False)
,,,
Jump to nightmare_upstairs_slay_menu
]]
,
Jump to nightmare_kill_upstairs
],Choice - [[Leave the Cabin.]
[
Jump to nightmare_free_outside
]]}
]}
]]
,
[Else [,,,
Jump to nightmare_stairs_blade_menu
]]
],Choice - [[Slay the Princess.]If "nightmare_can_wraith" []
[
[If "wraith_encountered" [
Assign "nightmare_can_wraith" = Val (Bool False)
,,,
Jump to nightmare_stairs_blade_menu
]]
,
Jump to nightmare_kill_upstairs
]]}
]}
]}
]]}
]}
]]
,
[Else [,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Step onto the stairs and ...
[,,,,,,,,,,,,,,,,,,]]}
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Step into the world.]
[
Jump to nightmare_free_outside
]]}
]]
,
{Label: nightmare_free_outside
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "princess_free" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 1)
,
Assign "current_princess" = Val (String "nightmare")
,
Jump to mirror_start
]}
]}
,
{Label: nightmare_kill_join
[,,,,,,,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,
Jump to nightmare_kill_join_late
]}
,
{Label: nightmare_kill_upstairs
[
Assign "nightmare_falling" = Val (Bool True)
,,,,,,,,
Assign "default_mouse" = Val (String "blood")
,,,,
[If "nightmare_made_it_upstairs" [,,,,,,,]]
,
[Else [,,,,,,,,,,,,,,,,,]]
,,,,,
[If "nightmare_made_it_upstairs" [,,,,,]]
,
[Else []]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: nightmare_kill_join_late
[,,,,,,
[If "nightmare_falling" [,]]
,
[Else [,]]
,,,
[If "nightmare_falling" [,]]
,
[Else [,]]
,,,
[If "nightmare_falling" [,]]
,
[Else [,]]
,,,
[If "nightmare_falling" [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: nightmare_falling_forever
[,,,,,,,,
{Choice Branch: [Choice - (Explore) ''It's not like i...If Var "nightmare_falling_come_back" == Val (Bool False) []
[
Assign "nightmare_falling_come_back" = Val (Bool True)
,
[If "nightmare_1_forest_share_loop_insist" [,]]
,
[Else [,]]
,,,,,,,,,
[If "nightmare_falling" [,]]
,
[Else [,]]
,,,,,
Jump to nightmare_falling_forever
],Choice - (Explore) ''Can you tell me...If Var "nightmare_falling_secret_count" == Val (Int 0) && "nightmare_falling_come_back" []
[
Assign "nightmare_falling_secret_count" += Val (Int 1)
,,,
Jump to nightmare_falling_forever
],Choice - (Explore) ''How about now? ...If Var "nightmare_falling_secret_count" == Val (Int 1) []
[
Assign "nightmare_falling_secret_count" += Val (Int 1)
,,,
Jump to nightmare_falling_forever
],Choice - (Explore) ''I'm going to we...If Var "nightmare_falling_secret_count" == Val (Int 2) []
[
Assign "nightmare_falling_secret_count" += Val (Int 1)
,,,,,,,,,
Jump to nightmare_falling_forever
],Choice - (Explore) ''Secret?''If Var "nightmare_falling_secret_count" == Val (Int 3) || Var "nightmare_falling_secret_count" == Val (Int 4) []
[
[If Var "nightmare_falling_secret_count" == Val (Int 3) [
Assign "nightmare_falling_secret_count" += Val (Int 1)
,,,,,,]]
,
[Else [
Assign "nightmare_falling_secret_count" += Val (Int 1)
,,]]
,
Jump to nightmare_falling_forever
],Choice - (Explore) ''But I've got th...If Var "nightmare_falling_best_company" == Val (Bool False) []
[,
Assign "nightmare_falling_best_company" = Val (Bool True)
,,,,,
Jump to nightmare_falling_forever
],Choice - (Explore) ''I don't know......If Var "nightmare_falling_fine" == Val (Bool False) && Var "nightmare_falling_biology" == Val (Bool False) && "nightmare_falling" []
[
Assign "nightmare_falling_fine" = Val (Bool True)
,,,
Jump to nightmare_falling_forever
],Choice - (Explore) ''Am I not a crea...If Var "nightmare_falling_biology" == Val (Bool False) []
[
Assign "nightmare_falling_biology" = Val (Bool True)
,,,,,
[If Var "nightmare_falling_drop" == Val (Bool False) && "nightmare_falling" [,]]
,
[Elif Var "nightmare_falling_drop" == Val (Bool False) [,]]
,
[Else [,,,]]
,
Jump to nightmare_falling_forever
],Choice - (Explore) ''Are you stuck h...If Var "nightmare_falling_stuck" == Val (Bool False) []
[
Assign "nightmare_falling_stuck" = Val (Bool True)
,,,,,,,
Jump to nightmare_falling_forever
],Choice - (Explore) ''I get it. You d...If "nightmare_falling_stuck" && Var "nightmare_falling_lonely" == Val (Bool False) []
[
Assign "nightmare_falling_lonely" = Val (Bool True)
,,,,,
Jump to nightmare_falling_forever
],Choice - (Explore) [[Drop the blade.]If Var "nightmare_falling_drop" == Val (Bool False) && "nightmare_falling" []
[
Assign "nightmare_falling_drop" = Val (Bool True)
,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,
[If "nightmare_falling_biology" [,,,]]
,
Jump to nightmare_falling_forever
],Choice - (Explore) [[Take the blade ...If Var "nightmare_falling_drop" == Val (Bool False) && Var "nightmare_falling" == Val (Bool False) && Var "blade_held" == Val (Bool False) []
[,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blood")
,,,,,
Jump to nightmare_falling_forever
],Choice - (Explore) [[Throw the blade...If Var "nightmare_falling_drop" == Val (Bool False) && Var "nightmare_falling" == Val (Bool False) && "blade_held" []
[
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,
Assign "nightmare_falling_drop" = Val (Bool True)
,,,,,
[If "nightmare_falling_biology" [,,,]]
,
Jump to nightmare_falling_forever
],Choice - [[Slay yourself.]If Var "nightmare_falling_drop" == Val (Bool False) && "blade_held" []
[,,,,,,,,,,,,,,,,,,,,,,,
[If "nightmare_falling_come_back" [,,]]
,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,
Assign "wraith_source" = Val (String "nightmare")
,
[If "nightmare_falling" [
Assign "wraith_bonus_voice" = Val (String "opportunist")
]]
,
[Else [
Assign "wraith_bonus_voice" = Val (String "cold")
]]
,
Jump to wraith_start
],Choice - [[Wait.]
[
[If Var "nightmare_falling_biology" == Val (Bool False) || Var "nightmare_falling_drop" == Val (Bool False) [
[If "nightmare_falling" [,]]
,
[Else [,]]
,
Jump to nightmare_falling_forever
]]
,
[Else [,,,,,,,,,,,,,,,,,,,,,
[If "nightmare_falling_come_back" [,]]
,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,
Assign "wraith_source" = Val (String "nightmare")
,
[If "nightmare_falling" [
Assign "wraith_bonus_voice" = Val (String "opportunist")
]]
,
[Else [
Assign "wraith_bonus_voice" = Val (String "cold")
]]
,
Jump to wraith_start
]]
]]}
]}
]}
]}
,
{Label: nightmare_2_start
[,,,
Assign "default_mouse" = Val (String "default")
,
Assign "blade_held" = Val (Bool False)
,
Assign "current_loop" = Val (Int 2)
,
Assign "quick_menu" = Val (Bool False)
,
Assign "config.menu_include_disabled" = Val (Bool False)
,
Assign "current_princess" = Val (String "clarity")
,
Assign "clarity_encountered" = Val (Bool True)
,
Assign "trait_stubborn" = Val (Bool True)
,
Assign "trait_hunted" = Val (Bool True)
,
Assign "trait_smitten" = Val (Bool True)
,
Assign "trait_paranoid" = Val (Bool True)
,
Assign "trait_skeptic" = Val (Bool True)
,
Assign "trait_contrarian" = Val (Bool True)
,
Assign "trait_cheated" = Val (Bool True)
,
Assign "trait_cold" = Val (Bool True)
,
Assign "trait_broken" = Val (Bool True)
,
Assign "trait_opportunist" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: nightmare_2_menu
[,,,,,,,,
{Choice Branch: [Choice - (Explore) ''I think they're...If Var "nm2_wrong" == Val (Bool False) []
[
Assign "nm2_wrong" = Val (Bool True)
,
Assign "nm2_count" += Val (Int 1)
,,,,,,,
Jump to nightmare_2_menu
],Choice - (Explore) ''Getting back to...If Var "nm2_count" != Val (Int 0) && Var "nm2_how_many" == Val (Bool False) []
[
Jump to nm2_how_many_join
],Choice - (Explore) ''That's a good q...If Var "nm2_count" == Val (Int 0) && Var "nm2_how_many" == Val (Bool False) []
[
{Label: nm2_how_many_join
[
Assign "nm2_how_many" = Val (Bool True)
,
Assign "nm2_count" += Val (Int 1)
,,,,,,,,,,,,,,,,,
Jump to nightmare_2_menu
]}
],Choice - (Explore) ''But that doesn'...If "nm2_how_many" && Var "nm2_how_many_follow" == Val (Bool False) []
[
Assign "nm2_how_many_follow" = Val (Bool True)
,
Assign "nm2_count" += Val (Int 1)
,,,,,,,,,,,,,,,
Jump to nightmare_2_menu
],Choice - (Explore) ''If I don't reme...If Var "nm2_how_many_follow_2" == Val (Bool False) && "nm2_how_many_follow" []
[
Assign "nm2_how_many_follow_2" = Val (Bool True)
,
Assign "nm2_count" += Val (Int 1)
,,,,,,,,,,,,,,,,,,,,,,,
Jump to nightmare_2_menu
],Choice - (Explore) ''What if we don'...If Var "nm2_no_cabin" == Val (Bool False) []
[
Assign "nm2_no_cabin" = Val (Bool True)
,
Assign "nm2_count" += Val (Int 1)
,,,,,,,,,,,
Jump to nightmare_2_menu
],Choice - (Explore) ''Can you make se...If Var "nm2_can_make_sense" == Val (Bool False) []
[
Assign "nm2_can_make_sense" = Val (Bool True)
,,,,,,,
Jump to nightmare_2_menu
],Choice - (Explore) ''I feel so disjo...If Var "nm2_disjointed" == Val (Bool False) []
[
Assign "nm2_disjointed" = Val (Bool True)
,,,,,,,,,
Jump to nightmare_2_menu
],Choice - [[Proceed to the cabin.]
[
Jump to nightmare_2_cabin_arrive
],Choice - ''The only way out is to do...If Var "nightmare_2_wait_attempt" == Val (Bool False) []
[
Assign "nightmare_2_wait_attempt" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Proceed to the cabin.]
[
Jump to nightmare_2_cabin_arrive
],Choice - [[Continue to do nothing.]If "mound_can_attempt_flee" []
[
[If Var "loops_finished" >= Val (Int 2) [
Assign "mound_can_attempt_flee" = Val (Bool False)
,,,
Jump to nightmare_2_menu
]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to caught_late_join
]]}
]]}
]}
]}
,
{Label: nightmare_2_cabin_arrive
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,,
{Label: nightmare_2_cabin_arrive_menu
[,
{Choice Branch: [Choice - (Explore) ''And what's wron...If Var "nm2_cabin_explore" == Val (Bool False) []
[
Assign "nm2_cabin_explore" = Val (Bool True)
,,,,,,,
Jump to nightmare_2_cabin_arrive_menu
],Choice - [[Approach the mirror.]
[,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,
Assign "current_run_mirror_touched" = Val (Bool True)
,
{Choice Branch: [Choice - [[Proceed.]
[,,
[If "nightmare_2_wait_attempt" [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,
Assign "config.menu_include_disabled" = Val (Bool True)
,
{Choice Branch: [Choice - [[Take the blade.]
[
{Label: nightmare_2_blade_join
[,,,,,,,,,,,,]}
],Choice - [[It's the only way forward.]If "false_choice" []
[
Jump to nightmare_2_blade_join
],Choice - [[You've already tried ever...If "false_choice" []
[
Jump to nightmare_2_blade_join
],Choice - [[Don't you remember?]If "false_choice" []
[
Jump to nightmare_2_blade_join
],Choice - [[You have to take the blade.]
[
Jump to nightmare_2_blade_join
]]}
]]}
]]}
]}
,,,,,,,,,
[If "nightmare_run_attempt" [,]]
,
[Else [,]]
,,,,,,,,,,
[If "nightmare_run_attempt" [,]]
,
[Else [,]]
,,,,,,
[If "nightmare_run_attempt" [,]]
,
[Else [,]]
,,,,,,
[If "nightmare_run_attempt" [,]]
,
[Else [,]]
,,,,,,
[If "nightmare_run_attempt" [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "config.menu_include_disabled" = Val (Bool True)
,
{Choice Branch: [Choice - [[You're just an object.]If "false_choice" []
[
Jump to nightmare_2_hand_join
],Choice - [[A tool.]If "false_choice" []
[
Jump to nightmare_2_hand_join
],Choice - [[You once were something e...If "false_choice" []
[
Jump to nightmare_2_hand_join
],Choice - [[But was that something yo...If "false_choice" []
[
Jump to nightmare_2_hand_join
],Choice - [[There is no other ending ...If "false_choice" []
[
Jump to nightmare_2_hand_join
],Choice - [[Just take her hand, and s...
[
{Label: nightmare_2_hand_join
[,,
Assign "config.menu_include_disabled" = Val (Bool False)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "princess_free" += Val (Int 1)
,
Jump to mirror_nightmare_2
]}
]]}
]}
,
{Label: prisoner_encounter_start
[,,,,,,
{Choice Branch: [Choice - I'm not sure I need to do m...If Var "prisoner_locked" == Val (Bool False) []
[
{Label: prisoner_locked_join
[
Assign "prisoner_locked" = Val (Bool True)
,
[If "prisoner_1_forest_share_loop_insist" || "prisoner_narrator_agree" [,]]
,,,,
[If Var "prisoner_position" == Val (String "close") [,]]
,,,,,,,,
[If "prisoner_abandoned_comment_flag" [,
[If Var "prisoner_position" == Val (String "close") []]
,
[Else [,]]
,,,
[If Var "prisoner_position" == Val (String "close") []]
,
[Else []]
,,]]
,
[Elif "prisoner_narrator_agree" [,
[If Var "prisoner_position" == Val (String "close") []]
,
[Else []]
,,]]
,
[Else [,
[If Var "prisoner_position" == Val (String "close") []]
,
[Else []]
,,]]
,
[If Var "prisoner_position" == Val (String "close") []]
,
[Else []]
]}
,
[If Var "prisoner_position" == Val (String "start") [
Jump to prisoner_encounter_start
]]
,
[Else [
Jump to prisoner_menu
]]
],Choice - [[Sit with her.]
[,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Sit where you were told t...
[
Assign "prisoner_position" = Val (String "close")
,,,,,,,,,,,],Choice - [[Sit closer.]
[
Assign "prisoner_position" = Val (String "tooclose")
,
Assign "prisoner_sit_closer" = Val (Bool True)
,
Jump to prisoner_strangle_join
]]}
,
Jump to prisoner_menu
],Choice - [[Slay the Princess.]If "blade_held" && "prisoner_can_slay_attempt" []
[
[If "grey_encountered" [
Assign "prisoner_can_slay_attempt" = Val (Bool False)
,,,
Jump to prisoner_encounter_start
]]
,
Assign "prisoner_attack" = Val (Bool True)
,
Assign "prisoner_position" = Val (String "attack")
,,,,,,,,,,,,,,,
Jump to prisoner_strangle_join
]]}
]}
,
{Label: prisoner_narrator_loop_join
[
Assign "prisoner_narrator_agree" = Val (Bool True)
,
Assign "prisoner_go_to_narrator_reveal" = Val (Bool False)
,
[If "prisoner_1_forest_share_loop_insist" [,]]
,
[Elif "prisoner_1_forest_share_loop" [,]]
,
[Else [,]]
,,,,,,,,,,,,,
[If "prisoner_1_forest_share_loop_insist" [,,,]]
,
[Else [,,,]]
,,,,,,,,,,,,,,,,,,,,,
[If Var "prisoner_position" == Val (String "start") [,,,,,
Jump to prisoner_encounter_start
]]
,,,,,,,
Jump to prisoner_menu
]}
,
{Label: prisoner_menu
[,,,,,,,,,,,,,,,,,,,
Assign "prisoner_position" = Val (String "close")
,
{Choice Branch: [Choice - (Explore) [[Inspect the sha...If "prisoner_other_chain_ask" && Var "prisoner_try_shackle" == Val (Bool False) []
[
Assign "prisoner_try_shackle" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Inspect the shackle.]
[
Jump to prisoner_self_prison
],Choice - [[Let it go.]
[,,,,
Jump to prisoner_menu
]]}
],Choice - (Explore) Hey! Let me out o...If "prisoner_locked" && Var "prisoner_door_open_beg" == Val (Bool False) []
[
Assign "prisoner_menu_count" += Val (Int 1)
,
Assign "prisoner_door_open_beg" = Val (Bool True)
,,,,,,,,,,,
Jump to prisoner_menu
],Choice - (Explore) ''You were asking...If Var "prisoner_intentions_explore" == Val (Bool False) && Var "prisoner_menu_count" != Val (Int 0) []
[
Jump to prisoner_intentions_join
],Choice - (Explore) ''My intentions? ...If Var "prisoner_intentions_explore" == Val (Bool False) && Var "prisoner_menu_count" == Val (Int 0) []
[
{Label: prisoner_intentions_join
[
Assign "prisoner_menu_count" += Val (Int 1)
,
Assign "prisoner_intentions_explore" = Val (Bool True)
,,,,,
[If "prisoner_narrator_agree" [,,,]]
,
[Else [,,,]]
,,,,,,,,,,,,,,,,,
Jump to prisoner_menu
]}
],Choice - (Explore) ''I've been here ...If Var "prisoner_narrator_agree" == Val (Bool False) []
[
Assign "prisoner_menu_count" += Val (Int 1)
,,,,,,,
Jump to prisoner_narrator_loop_join
],Choice - (Explore) ''What happened a...If Var "prisoner_death_ask" == Val (Bool False) []
[
{Label: prisoner_what_happened_died
[
Assign "prisoner_death_ask" = Val (Bool True)
,
Assign "prisoner_menu_count" += Val (Int 1)
,
[If Var "prisoner_narrator_agree" == Val (Bool False) [,,,]]
,,,,,,,,,,,,,,,,,,,,,,,
[If Var "prisoner_narrator_agree" == Val (Bool False) [
Jump to prisoner_narrator_loop_join
]]
,
Jump to prisoner_menu
]}
],Choice - (Explore) ''How am I suppos...If "prisoner_intentions_explore" && Var "prisoner_head_ask" == Val (Bool False) && Var "prisoner_what_do" == Val (Bool False) []
[
Assign "prisoner_head_ask" = Val (Bool True)
,
Assign "prisoner_menu_count" += Val (Int 1)
,
Assign "prisoner_what_do" = Val (Bool True)
,,,,,,,,,,,,,
Jump to prisoner_what_do_join
],Choice - (Explore) ''That other chai...If Var "prisoner_other_chain_ask" == Val (Bool False) []
[
Assign "prisoner_other_chain_ask" = Val (Bool True)
,
Assign "prisoner_menu_count" += Val (Int 1)
,,,,,,,,,,,,,
Jump to prisoner_menu
],Choice - (Explore) ''What would you ...If Var "prisoner_what_do" == Val (Bool False) []
[
Assign "prisoner_what_do" = Val (Bool True)
,
Assign "prisoner_menu_count" += Val (Int 1)
,,,,,,,,,,,,,,,,,
{Label: prisoner_what_do_join
[,,,,,,,,,,,,,,
Jump to prisoner_menu
]}
],Choice - (Explore) ''I'm not giving ...If "prisoner_what_do" && Var "prisoner_no_give_explore" == Val (Bool False) []
[
Assign "prisoner_no_give_explore" = Val (Bool True)
,
Jump to prisoner_no_give_explore_join
],Choice - (Explore) ''You realize tha...If "prisoner_what_do" && Var "prisoner_patient_line" == Val (Bool False) []
[,,,,
Assign "prisoner_patient_line" = Val (Bool True)
,
Assign "prisoner_menu_count" += Val (Int 1)
,,,,,,,,,
Jump to prisoner_menu
],Choice - (Explore) ''If you don't gi...If "prisoner_no_give_explore" && Var "prisoner_threaten_1" == Val (Bool False) []
[
Assign "prisoner_threaten_1" = Val (Bool True)
,
Assign "prisoner_menu_count" += Val (Int 1)
,,,,,,,,,,,,,,,
Jump to prisoner_menu
],Choice - (Explore) ''I'm not giving ...If Var "prisoner_no_give_explore" == Val (Bool False) && "prisoner_what_do" []
[
Assign "prisoner_no_give_explore" = Val (Bool True)
,
Assign "prisoner_go_to_narrator_reveal" = Val (Bool True)
,
Assign "prisoner_menu_count" += Val (Int 1)
,
[If Var "prisoner_narrator_agree" == Val (Bool False) [,,,]]
,,,,,
Jump to prisoner_no_give_explore_join
],Choice - (Explore) ''You're the one ...If "prisoner_no_give_explore" && Var "prisoner_negotiate_attempt" == Val (Bool False) []
[
Assign "prisoner_negotiate_attempt" = Val (Bool True)
,
Assign "prisoner_menu_count" += Val (Int 1)
,
[If "prisoner_locked" [,,,]]
,
[Else [,,,]]
,
[If Var "prisoner_patient_line" == Val (Bool False) [
Assign "prisoner_patient_line" = Val (Bool True)
,,,,]]
,
[Else [,,,]]
,,,
Jump to prisoner_menu
],Choice - (Explore) ''{b}I{/b} can cu...If "prisoner_what_do" && Var "prisoner_no_give_explore" == Val (Bool False) []
[
Assign "prisoner_no_give_explore" = Val (Bool True)
,
Assign "prisoner_menu_count" += Val (Int 1)
,
{Label: prisoner_no_give_explore_join
[
[If "prisoner_narrator_agree" [,,,]]
]}
,,,,,,,,,
[If "prisoner_narrator_agree" [,,,]]
,
[Else [,,,]]
,,,,,,,,,,,,,,,,,
[If Var "prisoner_narrator_agree" == Val (Bool False) [
Jump to prisoner_narrator_loop_join
]]
,
Jump to prisoner_menu
],Choice - ''Okay. I'm trusting you.''...If "prisoner_what_do" []
[
Jump to prisoner_knife_given
],Choice - ''If you want to leave, I'm...If "prisoner_what_do" []
[
Assign "prisoner_player_attempt_cut" = Val (Bool True)
,
Jump to prisoner_strangle_join
],Choice - ''If that's how you're goin...If "blade_held" && "prisoner_no_give_explore" && "prisoner_can_slay_attempt" []
[
[If "grey_encountered" [
Assign "prisoner_can_slay_attempt" = Val (Bool False)
,,,
Jump to prisoner_menu
]]
,
Assign "prisoner_attack" = Val (Bool True)
,,,
Jump to prisoner_strangle_join
],Choice - ''It seems I don't have muc...If "blade_held" && "prisoner_locked" && "prisoner_can_slay_attempt" []
[
[If "grey_encountered" [
Assign "prisoner_can_slay_attempt" = Val (Bool False)
,,,
Jump to prisoner_menu
]]
,
Assign "prisoner_attack" = Val (Bool True)
,,,,,
Jump to prisoner_strangle_join
],Choice - ''If you're so immovable, t...If Var "prisoner_locked" == Val (Bool False) && "prisoner_negotiate_attempt" || "prisoner_threaten_1" []
[
Assign "prisoner_abandoned_comment_flag" = Val (Bool True)
,,,,,,,
Jump to prisoner_locked_join
],Choice - ''I think I'm just going to...If Var "prisoner_locked" == Val (Bool False) []
[
Assign "prisoner_abandoned_comment_flag" = Val (Bool True)
,,,,,,,
Jump to prisoner_locked_join
],Choice - [[Slay the Princess.]If "blade_held" && "prisoner_can_slay_attempt" []
[
[If "grey_encountered" [
Assign "prisoner_can_slay_attempt" = Val (Bool False)
,,,
Jump to prisoner_menu
]]
,
Assign "prisoner_attack" = Val (Bool True)
,
Jump to prisoner_strangle_join
]]}
]}
,
{Label: prisoner_self_prison
[,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: prisoner_self_prison_menu
[,,,,,
{Choice Branch: [Choice - (Explore) ''So we're both s...If Var "prisoner_self_prison_stuck" == Val (Bool False) []
[
Assign "prisoner_self_prison_stuck" = Val (Bool True)
,
Assign "prisoner_self_prison_count" += Val (Int 1)
,
[If Var "prisoner_self_prison_small_talk" == Val (Bool False) [,,,,,]]
,
[Else []]
,
Jump to prisoner_self_prison_menu
],Choice - (Explore) ''What should we ...If Var "prisoner_self_prison_what" == Val (Bool False) []
[
Assign "prisoner_self_prison_what" = Val (Bool True)
,
Assign "prisoner_self_prison_count" += Val (Int 1)
,
[If Var "prisoner_self_prison_small_talk" == Val (Bool False) [,,,,,]]
,
[Else []]
,
Jump to prisoner_self_prison_menu
],Choice - (Explore) ''Did you know th...If Var "prisoner_self_prison_know" == Val (Bool False) []
[
Assign "prisoner_self_prison_know" = Val (Bool True)
,
Assign "prisoner_self_prison_count" += Val (Int 1)
,
[If Var "prisoner_self_prison_small_talk" == Val (Bool False) [,,,,,]]
,
[Else []]
,
Jump to prisoner_self_prison_menu
],Choice - (Explore) ''Not one for sma...If Var "prisoner_self_prison_small_talk" == Val (Bool False) && Var "prisoner_self_prison_count" >= Val (Int 2) []
[
Assign "prisoner_self_prison_small_talk" = Val (Bool True)
,,,,,,,,,
Jump to prisoner_self_prison_menu
],Choice - [[Wait in silence.]
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: prisoner_forever_menu_2
[,
{Choice Branch: [Choice - (Explore) ''Hey, have you n...If Var "prisoner_forever_menu_2_explore" == Val (Bool False) []
[
Assign "prisoner_forever_menu_2_explore" = Val (Bool True)
,
[If "prisoner_self_prison_small_talk" [,,,,,,,]]
,
[Else [,,,,,,,]]
,
Jump to prisoner_forever_menu_2
],Choice - [[Continue to wait in silen...
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "prisoner_end" = Val (String "stuck")
,
Assign "princess_free" += Val (Int 1)
,
Assign "current_princess" = Val (String "prisonerchain")
,
Jump to mirror_start
]]}
]}
]]}
]}
]}
,
{Label: prisoner_knife_given
[,
Assign "prisoner_decapitate" = Val (Bool True)
,,,,,,,,,
[If "prisoner_narrator_agree" [,,,,,,,,,,,]]
,
[Else [,,,,,,,,,,,,,,,,,,,]]
,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,
{Label: prisoner_knife_given_late_join
[
Assign "prisoner_decapitate" = Val (Bool True)
,,,,,,,,,,,,
{Choice Branch: [Choice - [[Look away.]
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,],Choice - [[Watch in uneasy silence.]
[,,
Assign "prisoner_decapitation_watch" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,]]}
,,,,,,,,,,,,,,,,,,,,
{Label: prisoner_head_choice
[
{Choice Branch: [Choice - [[Leave the basement to cla...
[
Assign "quick_menu" = Val (Bool False)
,,,,,
Jump to prisoner_dead_late_join
],Choice - [[Take the Princess with you.]
[,
Assign "princess_head_taken" = Val (Bool True)
,
Assign "quick_menu" = Val (Bool False)
,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,,,
Jump to prisoner_free_join
]]}
]}
]}
]}
,
{Label: prisoner_free_join
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,
{Choice Branch: [Choice - [[Leave the cabin and claim...
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "princess_free" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 1)
,
Assign "current_princess" = Val (String "prisonerhead")
,
Assign "prisoner_end" = Val (String "free")
,
Jump to mirror_start
]]}
]}
,
{Label: prisoner_strangle_join
[,,,,,,,,,,
[If "prisoner_attack" [,,,,,,,,,,,,,,,,,,,,,,,,
[If "prisoner_narrator_agree" [,,,]]
,
[Else [,,,]]
]]
,
[Elif "prisoner_sit_closer" [,]]
,
[Else [,]]
,
[If Var "prisoner_attack" == Val (Bool False) [,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "prisoner_narrator_agree" [,]]
,
[Else [,,,]]
]]
,,,
{Label: prisoner_fight_menu
[
{Choice Branch: [Choice - [[Slay the Princess.]If "prisoner_can_slay_attempt" []
[,
[If "grey_encountered" [
Assign "prisoner_can_slay_attempt" = Val (Bool False)
,,,,,
Jump to prisoner_fight_menu
]]
,
Assign "prisoner_slain_by_player" = Val (Bool True)
,,,,,,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,],Choice - [[Drop it.]
[
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,
[If "prisoner_attack" [,,,,,,,,,,,,]]
,
[Else [,,,,,,]]
,,,,,,,,,,,
Jump to prisoner_knife_given_late_join
]]}
]}
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: prisoner_dead_late_join
[,,
Assign "blade_held" = Val (Bool True)
,
Assign "quick_menu" = Val (Bool False)
,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,
{Choice Branch: [Choice - [[Open the door and accept ...
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,]]}
,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,
{Choice Branch: [Choice - That's bullshit! Let us out...
[,],Choice - I don't know. I'm pretty ok...
[,],Choice - I was kind of hoping we'd g...
[,]]}
,,,,,
{Label: prisoner_happy_menu
[,,,
{Choice Branch: [Choice - (Explore) Didn't you hear T...If Var "prisoner_happy_menu_happy_explore" == Val (Bool False) []
[
Assign "prisoner_happy_menu_happy_explore" = Val (Bool True)
,,,,,
Jump to prisoner_happy_menu
],Choice - (Explore) What do you sugge...If Var "prisoner_happy_menu_suggestion_explore" == Val (Bool False) []
[
Assign "prisoner_happy_menu_suggestion_explore" = Val (Bool True)
,,,,,
Jump to prisoner_happy_menu
],Choice - I don't want to die again. ...If Var "prisoner_happy_menu_explore" == Val (Bool False) []
[
Jump to prisoner_happy_join
],Choice - I dunno, I'm pretty happy. ...If Var "prisoner_happy_menu_explore" == Val (Bool False) []
[
Jump to prisoner_happy_join
],Choice - Well, you might not be happ...If "prisoner_happy_menu_explore" []
[
{Label: prisoner_happy_join
[,
Assign "prisoner_happy_seen" = Val (Bool True)
,,,,,,,,,,,,,,,,,
[If Var "_preferences.language" != Val (String "None") []]
,,,,,,,,,,,,,,,,,,
[If Var "prisoner_happy_menu_suggestion_explore" == Val (Bool False) [,,,]]
,
[Else [,]]
,
{Label: prisoner_post_happy_menu
[,,,,
{Choice Branch: [Choice - (Explore) Is there really n...If Var "prisoner_post_happy_no_other_way" == Val (Bool False) []
[
Assign "prisoner_post_happy_no_other_way" = Val (Bool True)
,,,
Jump to prisoner_post_happy_menu
],Choice - (Explore) But I liked being...If Var "prisoner_post_happy_sad" == Val (Bool False) []
[
Assign "prisoner_post_happy_sad" = Val (Bool True)
,,,
Jump to prisoner_post_happy_menu
],Choice - [[Give the blade to the Voi...If "prisoner_post_happy_no_other_way" []
[
Assign "prisoner_give_skeptic_blade" = Val (Bool True)
,,,
Jump to prisoner_slay_self_join
],Choice - [[Slay yourself.]
[
Jump to prisoner_slay_self_join
],Choice - Sorry, but we're not doing ...
[
Assign "prisoner_heart_stop" = Val (Bool True)
,,,,,,,,,,,,,,,,,,
Jump to prisoner_slay_self_join
]]}
]}
]}
],Choice - [[Slay yourself.]If "prisoner_happy_menu_suggestion_explore" []
[
{Label: prisoner_slay_self_join
[,,,,,,,,
[If "prisoner_give_skeptic_blade" [,,,,,,,,,,,,,]]
,
[Elif "prisoner_heart_stop" [,,,,]]
,
[Else [,,,,,,,,,,,,,,,,,]]
,,,
[If "prisoner_slain_by_player" [
Jump to grey_start
]]
,
[Else [
Jump to cage_start
]]
]}
]]}
]}
]}
]}
,
{Label: prisoner_1_start
[
Assign "blade_held" = Val (Bool False)
,
Assign "trait_skeptic" = Val (Bool True)
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,
{Label: prisoner_1_forest
[,,,,,,,
{Choice Branch: [Choice - (Explore) I'm getting a ter...If Var "prisoner_1_forest_share_loop" == Val (Bool False) []
[
Assign "prisoner_1_forest_deja_vu" = Val (Bool True)
,,,
{Label: prisoner_1_forest_narrator_share_join
[
Assign "prisoner_1_forest_count" += Val (Int 1)
,
Assign "prisoner_1_forest_share_loop" = Val (Bool True)
,,,,,,,
[If Var "prisoner_forest_second_ago" == Val (Bool False) [,]]
,
Jump to prisoner_1_forest
]}
],Choice - (Explore) This is more than...If "prisoner_1_forest_deja_vu" && Var "prisoner_1_forest_deja_vu_follow_up" == Val (Bool False) []
[
Assign "prisoner_1_forest_deja_vu_follow_up" = Val (Bool True)
,
Assign "prisoner_1_forest_count" += Val (Int 1)
,,,
Jump to prisoner_1_forest
],Choice - (Explore) Wait... hasn't th...If Var "prisoner_1_forest_share_loop" == Val (Bool False) []
[,,
Jump to prisoner_1_forest_narrator_share_join
],Choice - (Explore) Okay, no.If Var "prisoner_1_forest_share_loop" == Val (Bool False) []
[,,
Jump to prisoner_1_forest_narrator_share_join
],Choice - (Explore) But I died! What ...If Var "prisoner_1_forest_share_loop" == Val (Bool False) []
[
Assign "prisoner_1_forest_share_died" = Val (Bool True)
,,
Assign "prisoner_forest_second_ago" = Val (Bool True)
,,,
Jump to prisoner_1_forest_narrator_share_join
],Choice - (Explore) Oh, you bastard! ...If Var "prisoner_1_forest_share_loop" == Val (Bool False) []
[
Assign "prisoner_1_forest_share_died" = Val (Bool True)
,,,
Jump to prisoner_1_forest_narrator_share_join
],Choice - (Explore) Let's assume I'm ...If "prisoner_1_forest_share_loop" && Var "prisoner_1_forest_deja_vu" == Val (Bool False) || "prisoner_1_forest_deja_vu_follow_up" && Var "prisoner_1_forest_share_loop_insist" == Val (Bool False) []
[
Assign "prisoner_1_forest_share_loop_insist" = Val (Bool True)
,
Assign "prisoner_1_forest_count" += Val (Int 1)
,,,,,
[If Var "prisoner_1_forest_share_died" == Val (Bool False) [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to prisoner_1_forest
],Choice - (Explore) Let's talk about ...If "prisoner_1_forest_share_loop_insist" && Var "prisoner_1_forest_princess_press" == Val (Bool False) []
[
Assign "prisoner_1_forest_count" += Val (Int 1)
,
Assign "prisoner_1_forest_princess_press" = Val (Bool True)
,,,
{Label: prisoner_1_forest_princess
[,,,,,,
{Choice Branch: [Choice - (Explore) The only reason s...If Var "prisoner_1_forest_princess_why_strong" == Val (Bool False) []
[
Assign "prisoner_1_forest_princess_why_strong" = Val (Bool True)
,
Assign "prisoner_1_forest_princess_count" += Val (Int 1)
,,,,,,,,,,,
{Choice Branch: [Choice - [[Check your pockets.]
[,,,,,,,,,,,,,,,,,,,,,,,,],Choice - [[Leave your pockets unchec...
[,]]}
,
Jump to prisoner_1_forest_princess
],Choice - (Explore) Who locked her in...If Var "prisoner_1_forest_princess_basement_explain" == Val (Bool False) []
[
Assign "prisoner_1_forest_princess_basement_explain" = Val (Bool True)
,
Assign "prisoner_1_forest_princess_count" += Val (Int 1)
,,,
Jump to prisoner_1_forest_princess
],Choice - (Explore) If people locked ...If "prisoner_1_forest_princess_basement_explain" && Var "prisoner_1_forest_princess_why_me" == Val (Bool False) []
[
Assign "prisoner_1_forest_princess_why_me" = Val (Bool True)
,
Assign "prisoner_1_forest_princess_count" += Val (Int 1)
,,,,,,,,,,,
Jump to prisoner_1_forest_princess
],Choice - (Explore) You're being cage...If Var "prisoner_1_forest_princess_cagey" == Val (Bool False) && Var "prisoner_1_forest_princess_count" > Val (Int 1) []
[
Assign "prisoner_1_forest_princess_cagey" = Val (Bool True)
,,,
[If Var "prisoner_1_forest_princess_count" < Val (Int 2) [,]]
,
[Else [,]]
,
Jump to prisoner_1_forest_princess
],Choice - Nevermind.If Var "prisoner_1_forest_princess_count" == Val (Int 0) []
[
{Label: prisoner_1_forest_princess_leaving
[,,
Jump to prisoner_1_forest
]}
],Choice - That's all.If Var "prisoner_1_forest_princess_count" != Val (Int 0) []
[
Jump to prisoner_1_forest_princess_leaving
]]}
]}
],Choice - [[Proceed to the cabin.]
[
Jump to prisoner_1_cabin_arrival
],Choice - [[Turn around and leave.]If "mound_can_attempt_flee" []
[
[If Var "loops_finished" >= Val (Int 2) [
Assign "mound_can_attempt_flee" = Val (Bool False)
,,,
Jump to prisoner_1_forest
]]
,,,
Jump to turn_and_leave_join
]]}
]}
]}
,
{Label: prisoner_1_cabin_arrival
[,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Proceed into the cabin.]
[
{Label: prisoner_stranger_rejoin
[,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,]}
]]}
,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,
{Label: cabin_interior_2_prisoner_menu
[,,,,,
{Choice Branch: [Choice - (Explore) You didn't say an...If Var "prisoner_1_cabin_mirror_ask" == Val (Bool False) && "prisoner_1_cabin_mirror_present" []
[
Assign "prisoner_1_cabin_mirror_ask" = Val (Bool True)
,
Assign "current_run_mirror_comment" = Val (Bool True)
,,,,,,,,,,,
{Choice Branch: [Choice - Why {b}would{/b} you lie ab...
[,],Choice - I want to look at myself. I...
[,,,],Choice - It doesn't matter.
[
Assign "prisoner_1_cabin_mirror_present" = Val (Bool False)
,,,,,,,,,,,],Choice - [[Remain silent.]
[,,,],Choice - [[Approach the mirror.]If Var "prisoner_1_cabin_mirror_approached" == Val (Bool False) []
[
{Label: prisoner_cabin_1_mirror_join
[
Assign "prisoner_1_cabin_mirror_approached" = Val (Bool True)
,,,,,,,,,,,,,
[If Var "prisoner_1_cabin_mirror_ask" == Val (Bool False) [,]]
,
[Else [,]]
,
Assign "current_run_mirror_touched" = Val (Bool True)
,
{Choice Branch: [Choice - [[Wipe the mirror clean.]
[
Assign "prisoner_1_cabin_mirror_present" = Val (Bool False)
,,,,
[If Var "prisoner_1_cabin_mirror_ask" == Val (Bool False) []]
,
[Else []]
,,,
[If "prisoner_1_cabin_mirror_ask" [,]]
,
[Else [,]]
,,,,,,,,,
[If Var "prisoner_1_cabin_blade_taken" == Val (Bool False) []]
,,
Jump to cabin_interior_2_prisoner_menu
]]}
]}
]]}
,
Jump to cabin_interior_2_prisoner_menu
],Choice - (Explore) This whole cabin ...If Var "prisoner_1_cabin_last_time_comment" == Val (Bool False) && "prisoner_1_forest_share_loop_insist" []
[
Assign "prisoner_1_cabin_last_time_comment" = Val (Bool True)
,,,,,,,,,
Jump to cabin_interior_2_prisoner_menu
],Choice - (Explore) [[Approach the mi...If "prisoner_1_cabin_mirror_present" && Var "prisoner_1_cabin_mirror_approached" == Val (Bool False) []
[
Assign "prisoner_1_cabin_mirror_approached" = Val (Bool True)
,
Jump to prisoner_cabin_1_mirror_join
],Choice - (Explore) [[Take the blade.]If Var "prisoner_1_cabin_blade_taken" == Val (Bool False) []
[
Assign "prisoner_1_cabin_blade_taken" = Val (Bool True)
,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,,,
Jump to cabin_interior_2_prisoner_menu
],Choice - [[Enter the basement.]
[
[If Var "blade_held" == Val (Bool False) [
Assign "prisoner_delayed_knife_comment" = Val (Bool True)
,,,
[If Var "prisoner_1_forest_share_loop_insist" == Val (Bool False) [,,,,,]]
,
[Else [,,,,,,,]]
,,,
{Label: prisoner_knife_take_force
[,,
{Choice Branch: [Choice - ''Hey! Don't I get a say he...If Var "prisoner_knife_take_force_explore" == Val (Bool False) []
[
Assign "prisoner_knife_take_force_explore" = Val (Bool True)
,,,
Assign "prisoner_1_cabin_blade_taken" = Val (Bool True)
,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,,,,],Choice - [[Let it go and take the bl...If "prisoner_knife_take_force_explore" []
[
Jump to prisoner_knife_take_force_join
],Choice - [[Take the blade.]If Var "prisoner_knife_take_force_explore" == Val (Bool False) []
[
{Label: prisoner_knife_take_force_join
[
Assign "prisoner_1_cabin_blade_taken" = Val (Bool True)
,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,,,
{Choice Branch: [Choice - [[Enter the basement.]
[
Assign "blade_held" = Val (Bool True)
]]}
]}
]]}
]}
]]
,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,
[If Var "blade_held" == Val (Bool False) [,]]
,
[If "prisoner_1_forest_share_loop" [,]]
,
[Else [,]]
,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,
[If "prisoner_1_forest_share_loop_insist" [,,,]]
,
[Else [,,,]]
,,,
[If "prisoner_1_forest_share_loop_insist" [,,,]]
,,
[If "blade_held" [,]]
,
[Else [,]]
,
Jump to prisoner_encounter_start
]]}
]}
]}
,
{Label: razor_1_basement_menu
[
[If "razor_last_time_mention" && Var "razor_narrator_loop_comment" == Val (Bool False) [
Assign "razor_narrator_loop_comment" = Val (Bool True)
,
[If "razor_1_forest_share_loop_insist" [,]]
,
[Else [,]]
,,,,,,]]
,
[Elif "razor_general_follow_flag" && Var "razor_general_follow_count" == Val (Int 0) [
Assign "razor_general_follow_count" += Val (Int 1)
,
Assign "razor_general_follow_flag" = Val (Bool False)
,,,,,,,
[If "blade_held" [,]]
,
[Else [,]]
,,,,]]
,
[Elif "razor_general_follow_flag" && Var "razor_general_follow_count" == Val (Int 1) [
Assign "razor_general_follow_count" += Val (Int 1)
,
Assign "razor_general_follow_flag" = Val (Bool False)
,,,,,,,,,,,,,,,,]]
,
[Elif "razor_general_follow_flag" && Var "razor_general_follow_count" == Val (Int 2) [
Assign "razor_general_follow_count" += Val (Int 1)
,
Assign "razor_general_follow_flag" = Val (Bool False)
,,,,]]
,
[Elif "razor_general_follow_flag" && Var "razor_general_follow_count" == Val (Int 3) [
Assign "razor_general_follow_count" += Val (Int 1)
,
Assign "razor_general_follow_flag" = Val (Bool False)
,,,,,,,,,,,,,,
Jump to razor_1_initiative
]]
,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - (Explore) ''Prove it then. ...If Var "razor_drop_knife_2" == Val (Bool False) && "razor_drop_knife_ask" []
[
Assign "razor_drop_knife_2" = Val (Bool True)
,
Assign "razor_count" += Val (Int 1)
,,,,,,,,,,,,,,,,,,,,,,,
Jump to razor_1_basement_menu
],Choice - (Explore) ''But what if you...If "razor_drop_knife_2" && Var "razor_drop_knife_3" == Val (Bool False) []
[
Assign "razor_drop_knife_3" = Val (Bool True)
,
Assign "razor_count" += Val (Int 1)
,,,,,,,,,,,,,,,,,,,,,,,
Jump to razor_1_basement_menu
],Choice - (Explore) ''If I come close...If Var "razor_stab_ask" == Val (Bool False) []
[
Assign "razor_count" += Val (Int 1)
,
Assign "razor_stab_ask" = Val (Bool True)
,
Assign "razor_general_follow_flag" = Val (Bool True)
,,,,,,,,,,,
Jump to razor_1_basement_menu
],Choice - (Explore) ''Do you remember...If Var "razor_last_time_ask" == Val (Bool False) []
[
Assign "razor_last_time_ask" = Val (Bool True)
,
Assign "razor_last_time_mention" = Val (Bool True)
,
Assign "razor_count" += Val (Int 1)
,
[If "razor_revival" [,,,]]
,
[Elif "loop_1_princess_killed" [,,,]]
,
[Else [,,,]]
,,,,,,,
Jump to razor_1_basement_menu
],Choice - (Explore) ''But that's exac...If "razor_last_time_ask" && Var "razor_last_time_ask_follow" == Val (Bool False) []
[
Assign "razor_count" += Val (Int 1)
,
Assign "razor_last_time_ask_follow" = Val (Bool True)
,,,,,,,,,,,
[If "razor_narrator_loop_comment" [,,,]]
,
Jump to razor_1_basement_menu
],Choice - (Explore) ''I know you have...If Var "razor_drop_knife_ask" == Val (Bool False) []
[
Assign "razor_drop_knife_ask" = Val (Bool True)
,
Assign "razor_count" += Val (Int 1)
,,,,,,,,,,,,,,,
Jump to razor_1_basement_menu
],Choice - (Explore) ''I'd like to tru...If Var "razor_suspicious_comment" == Val (Bool False) []
[
Assign "razor_general_follow_flag" = Val (Bool True)
,
Assign "razor_suspicious_comment" = Val (Bool True)
,
Assign "razor_count" += Val (Int 1)
,,,,,
[If "blade_held" [,,,]]
,
[Else [,,,]]
,,,,,,,
Jump to razor_1_basement_menu
],Choice - (Explore) ''Can we just tal...If Var "razor_talk" == Val (Bool False) []
[
Assign "razor_talk" = Val (Bool True)
,
Assign "razor_count" += Val (Int 1)
,
Assign "razor_general_follow_flag" = Val (Bool True)
,,,,,,,
Jump to razor_1_basement_menu
],Choice - (Explore) ''I don't have th...If Var "razor_no_key" == Val (Bool False) []
[
Assign "razor_no_key" = Val (Bool True)
,
Assign "razor_count" += Val (Int 1)
,
Assign "razor_general_follow_flag" = Val (Bool True)
,,,,,,,,,,,
Jump to razor_1_basement_menu
],Choice - (Explore) ''I don't have a ...If Var "blade_held" == Val (Bool False) && Var "razor_good_will" == Val (Bool False) []
[
Assign "razor_good_will" = Val (Bool True)
,
Assign "razor_count" += Val (Int 1)
,,,,,,,,,,,,,
Jump to razor_1_basement_menu
],Choice - (Explore) ''We killed each ...If Var "razor_last_time_kill" == Val (Bool False) && "loop_1_princess_killed" []
[
Assign "razor_last_time_kill" = Val (Bool True)
,
Assign "razor_count" += Val (Int 1)
,
Assign "razor_last_time_mention" = Val (Bool True)
,,,,,,,
[If Var "razor_narrator_loop_comment" == Val (Bool False) [,]]
,
Jump to razor_1_basement_menu
],Choice - (Explore) ''Look, I know th...If Var "razor_mad" == Val (Bool False) []
[
Assign "razor_mad" = Val (Bool True)
,
Assign "razor_count" += Val (Int 1)
,
Assign "razor_general_follow_flag" = Val (Bool True)
,,,,,,,
Jump to razor_1_basement_menu
],Choice - (Explore) ''What happened a...If Var "razor_last_time_ask" == Val (Bool False) && "loop_1_princess_killed" []
[
Assign "razor_last_time_ask" = Val (Bool True)
,
Assign "razor_last_time_mention" = Val (Bool True)
,
Assign "razor_count" += Val (Int 1)
,,,,,,,
Jump to razor_1_basement_menu
],Choice - (Explore) ''What if we're b...If Var "razor_honest_mention" == Val (Bool False) && Var "razor_revival" == Val (Bool False) []
[
{Label: razor_world_end_join
[
Assign "razor_honest_mention" = Val (Bool True)
,
Assign "razor_last_time_mention" = Val (Bool True)
,
Assign "razor_count" += Val (Int 1)
,
Assign "razor_general_follow_flag" = Val (Bool True)
,,,,,,,
Jump to razor_1_basement_menu
]}
],Choice - (Explore) ''What if we're b...If Var "razor_honest_mention" == Val (Bool False) && "razor_revival" []
[
Jump to razor_world_end_join
],Choice - (Explore) ''Nobody has to d...If Var "razor_nobody_die" == Val (Bool False) []
[
Assign "razor_nobody_die" = Val (Bool True)
,
Assign "razor_count" += Val (Int 1)
,
Assign "razor_general_follow_flag" = Val (Bool True)
,,,,,,,
Jump to razor_1_basement_menu
],Choice - (Explore) ''Okay. What are ...If Var "razor_let_out" == Val (Bool False) []
[
Assign "razor_let_out" = Val (Bool True)
,
Assign "razor_count" += Val (Int 1)
,,,,,,,,,,,,,
Jump to razor_1_basement_menu
],Choice - (Explore) ''Activities like...If "razor_let_out" && Var "razor_activities" == Val (Bool False) []
[
Assign "razor_activities" = Val (Bool True)
,
Assign "razor_count" += Val (Int 1)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to razor_1_basement_menu
],Choice - ''Okay, fine. I'm coming cl...
[,,,,,,
Jump to razor_1_approach
],Choice - ''Yeah. I'm not trusting th...
[
Jump to razor_1_leave
],Choice - ''I'll be right back. I lef...If Var "blade_held" == Val (Bool False) []
[
Jump to razor_1_leave
],Choice - ''Screw it.'' [[Slay the Pr...If "blade_held" []
[
Jump to razor_1_slay_attempt
]]}
]}
,
{Label: razor_1_initiative
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "blade_held" [,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "flip")
,,,,,,,
[If "razor_revival" [,,,]]
,
[Else [,,,]]
,
Jump to razor_1_end
]]
,
[Else [,,,,,,,,,,,,,,,,,,,
{Label: razor_1_end
[,,,,,,,,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,
[If "razor_paranoid_override" [
Assign "trait_paranoid" = Val (Bool True)
]]
,
[Else [
Assign "trait_broken" = Val (Bool True)
]]
,
Jump to razor_2_start
]}
]]
]}
,
{Label: razor_1_approach
[,,,,,,,,,,,,,,,,,,,,,,,,,
[If Var "razor_revival" == Val (Bool False) [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,
Assign "trait_broken" = Val (Bool True)
,
Jump to razor_2_start
]}
,
{Label: razor_1_leave
[,
Assign "razor_paranoid_override" = Val (Bool True)
,,,,,,,,,,,,
Jump to razor_1_initiative
]}
,
{Label: razor_1_slay_attempt
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "trait_stubborn" = Val (Bool True)
,
Assign "quick_menu" = Val (Bool False)
,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,
Jump to razor_2_start
]}
,
{Label: razor_1_start
[
Assign "blade_held" = Val (Bool False)
,
Assign "trait_cheated" = Val (Bool True)
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,
{Label: razor_1_forest
[,,,,,,,
{Choice Branch: [Choice - (Explore) I'm getting a ter...If Var "razor_1_forest_share_loop" == Val (Bool False) []
[
Assign "razor_1_forest_deja_vu" = Val (Bool True)
,,,
{Label: razor_1_forest_narrator_share_join
[
Assign "razor_1_forest_count" += Val (Int 1)
,
Assign "razor_1_forest_share_loop" = Val (Bool True)
,,,,,,,
[If "razor_revival" [,]]
,
[Else [,,,]]
,,,
Jump to razor_1_forest
]}
],Choice - (Explore) This is more than...If "razor_1_forest_deja_vu" && Var "razor_1_forest_deja_vu_follow_up" == Val (Bool False) []
[
Assign "razor_1_forest_deja_vu_follow_up" = Val (Bool True)
,
Assign "razor_1_forest_count" += Val (Int 1)
,,,
Jump to razor_1_forest
],Choice - (Explore) Wait... hasn't th...If Var "razor_1_forest_share_loop" == Val (Bool False) []
[,,
Jump to razor_1_forest_narrator_share_join
],Choice - (Explore) Okay, no.If Var "razor_1_forest_share_loop" == Val (Bool False) []
[,,
Jump to razor_1_forest_narrator_share_join
],Choice - (Explore) But I died! What ...If Var "razor_1_forest_share_loop" == Val (Bool False) []
[
Assign "razor_1_forest_share_died" = Val (Bool True)
,,,
Jump to razor_1_forest_narrator_share_join
],Choice - (Explore) She's going to ki...If Var "razor_1_forest_share_loop" == Val (Bool False) []
[
Assign "razor_1_forest_share_died" = Val (Bool True)
,,,
Jump to razor_1_forest_narrator_share_join
],Choice - (Explore) But I already sle...If Var "current_mutual_death" == Val (Int 1) && Var "razor_1_forest_share_loop" == Val (Bool False) []
[
Assign "razor_1_forest_share_died" = Val (Bool True)
,
Assign "razor_1_forest_share_loop" = Val (Bool True)
,,,
Jump to razor_1_forest_narrator_share_join
],Choice - (Explore) Let's assume I'm ...If "razor_1_forest_share_loop" && Var "razor_1_forest_deja_vu" == Val (Bool False) || "razor_1_forest_deja_vu_follow_up" && Var "razor_1_forest_share_loop_insist" == Val (Bool False) []
[
Assign "razor_1_forest_share_loop_insist" = Val (Bool True)
,
Assign "razor_1_forest_count" += Val (Int 1)
,,,,,
[If Var "razor_1_forest_share_died" == Val (Bool False) [,]]
,
[Else [,]]
,
[If "razor_revival" [,,,]]
,
[Else [,,,]]
,,,,,
[If Var "current_mutual_death" == Val (Int 1) || "loop_1_princess_killed" [,,,,,]]
,
[Else [,,,,,,,]]
,,,,,
[If "razor_revival" [,]]
,
[Else [,]]
,,,
Jump to razor_1_forest
],Choice - (Explore) Let's talk about ...If "razor_1_forest_share_loop_insist" && Var "razor_1_forest_princess_press" == Val (Bool False) []
[
Assign "razor_1_forest_count" += Val (Int 1)
,
Assign "razor_1_forest_princess_press" = Val (Bool True)
,,,
{Label: razor_1_forest_princess
[,,,,,,
{Choice Branch: [Choice - (Explore) We killed each ot...If Var "razor_1_forest_princess_tips" == Val (Bool False) && Var "current_mutual_death" == Val (Int 1) []
[
Assign "razor_1_forest_princess_tips" = Val (Bool True)
,
Assign "razor_1_forest_princess_count" += Val (Int 1)
,,,,,
Jump to razor_1_forest_princess
],Choice - (Explore) All she did last ...If Var "razor_1_forest_princess_why_strong" == Val (Bool False) []
[
Assign "razor_1_forest_princess_why_strong" = Val (Bool True)
,
Assign "razor_1_forest_princess_count" += Val (Int 1)
,,,
Jump to razor_1_forest_princess
],Choice - (Explore) Who locked her in...If Var "razor_1_forest_princess_basement_explain" == Val (Bool False) []
[
Assign "razor_1_forest_princess_basement_explain" = Val (Bool True)
,
Assign "razor_1_forest_princess_count" += Val (Int 1)
,,,
Jump to razor_1_forest_princess
],Choice - (Explore) If people locked ...If "razor_1_forest_princess_basement_explain" && Var "razor_1_forest_princess_why_me" == Val (Bool False) []
[
Assign "razor_1_forest_princess_why_me" = Val (Bool True)
,
Assign "razor_1_forest_princess_count" += Val (Int 1)
,,,,,,,
[If "razor_revival" [,]]
,
[Else [,]]
,
Jump to razor_1_forest_princess
],Choice - (Explore) You're being cage...If Var "razor_1_forest_princess_cagey" == Val (Bool False) && Var "razor_1_forest_princess_count" > Val (Int 1) []
[
Assign "razor_1_forest_princess_cagey" = Val (Bool True)
,,,,,,,
Jump to razor_1_forest_princess
],Choice - Nevermind.If Var "razor_1_forest_princess_count" == Val (Int 0) []
[
{Label: razor_1_forest_princess_leaving
[,,
Jump to razor_1_forest
]}
],Choice - That's all.If Var "razor_1_forest_princess_count" != Val (Int 0) []
[
Jump to razor_1_forest_princess_leaving
]]}
]}
],Choice - [[Proceed to the cabin.]
[
Jump to razor_1_cabin_arrival
],Choice - [[Turn around and leave.]If "mound_can_attempt_flee" []
[
[If Var "loops_finished" >= Val (Int 2) [
Assign "mound_can_attempt_flee" = Val (Bool False)
,,,
Jump to razor_1_forest
]]
,,,
Jump to turn_and_leave_join
]]}
]}
]}
,
{Label: razor_1_cabin_arrival
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,
{Choice Branch: [Choice - [[Proceed into the cabin.]
[
{Label: razor_stranger_rejoin
[,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,]}
]]}
,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,
{Label: cabin_interior_2_razor_menu
[,,,,,
{Choice Branch: [Choice - (Explore) You didn't say an...If Var "razor_1_cabin_mirror_ask" == Val (Bool False) && "razor_1_cabin_mirror_present" []
[
Assign "razor_1_cabin_mirror_ask" = Val (Bool True)
,
Assign "current_run_mirror_comment" = Val (Bool True)
,,,,,,,,,
{Choice Branch: [Choice - I care about whether I'm be...
[,,,],Choice - I care. I want to look at m...
[,,,],Choice - You're right. It doesn't ma...
[
Assign "razor_1_cabin_mirror_present" = Val (Bool False)
,,,,,,,,,],Choice - [[Remain silent.]
[,,,],Choice - [[Approach the mirror.]If Var "razor_1_cabin_mirror_approached" == Val (Bool False) []
[
{Label: razor_cabin_1_mirror_join
[
Assign "razor_1_cabin_mirror_approached" = Val (Bool True)
,,,,,,,,,,,,,
[If Var "razor_1_cabin_mirror_ask" == Val (Bool False) [,]]
,
[Else [,]]
,
Assign "current_run_mirror_touched" = Val (Bool True)
,
{Choice Branch: [Choice - [[Wipe the mirror clean.]
[
Assign "razor_1_cabin_mirror_present" = Val (Bool False)
,,,,
[If Var "razor_1_cabin_mirror_ask" == Val (Bool False) []]
,
[Else []]
,,,
[If "razor_1_cabin_mirror_ask" [,]]
,
[Else [,]]
,,,,,,,,,
[If Var "razor_1_cabin_blade_taken" == Val (Bool False) []]
,,
Jump to cabin_interior_2_razor_menu
]]}
]}
]]}
,
Jump to cabin_interior_2_razor_menu
],Choice - (Explore) This whole cabin ...If Var "razor_1_cabin_last_time_comment" == Val (Bool False) && "razor_1_forest_share_loop_insist" []
[
Assign "razor_1_cabin_last_time_comment" = Val (Bool True)
,,,,,,,
Jump to cabin_interior_2_razor_menu
],Choice - (Explore) [[Approach the mi...If "razor_1_cabin_mirror_present" && Var "razor_1_cabin_mirror_approached" == Val (Bool False) []
[
Assign "razor_1_cabin_mirror_approached" = Val (Bool True)
,
Jump to razor_cabin_1_mirror_join
],Choice - (Explore) [[Take the blade.]If Var "razor_1_cabin_blade_taken" == Val (Bool False) []
[
Assign "razor_1_cabin_blade_taken" = Val (Bool True)
,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,,,
Jump to cabin_interior_2_razor_menu
],Choice - [[Enter the basement.]
[
[If Var "razor_1_cabin_blade_taken" == Val (Bool False) [,,
[If "razor_1_forest_share_loop" [,]]
]]
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,
[If "razor_1_forest_share_loop" [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,
[If "razor_1_forest_share_loop" [,]]
,,,,,,,
[If "razor_1_cabin_blade_taken" [,]]
,
[Else [,]]
,,,,,
Jump to razor_1_basement_menu
]]}
]}
]}
,
{Label: razor_2_nexus
[,,,,,,,,,,,
[If "trait_paranoid" [
Assign "razor_paranoid_intro" = Val (Bool True)
]]
,
[If "trait_broken" [
Assign "razor_broken_intro" = Val (Bool True)
]]
]}
,
{Label: razor_2_armed_start
[,,,,,,,,,,,,,,,,
[If "trait_stubborn" [,,,]]
,
[If "trait_broken" [,]]
,
[If "trait_paranoid" [,]]
,
[If Var "trait_stubborn" == Val (Bool False) [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: razor_2_armed_beat_1
[
{Choice Branch: [Choice - We're going to fight her ag...If Var "trait_cold" == Val (Bool False) && "trait_stubborn" []
[
Jump to razor_2_fight_join
],Choice - We're fighting her, obviously.If Var "trait_stubborn" == Val (Bool False) []
[,,,,
[If "trait_paranoid" [,]]
,
[Else [,]]
,,,
[If "trait_paranoid" [,]]
,
[Else [,]]
,
{Choice Branch: [Choice - Cheer up! Maybe we'll win!
[
{Label: razor_2_knife_cheated_join
[,,,,,,,,,,,,,,,,,
[If "trait_broken" [,]]
,
[If "trait_paranoid" [,]]
,,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "trait_stubborn" = Val (Bool True)
,,,]}
],Choice - See, but that's the brillia...
[
Jump to razor_2_knife_cheated_join
],Choice - I'm done explaining myself....
[
Jump to razor_2_knife_cheated_join
]]}
],Choice - We're going to appeal to he...If Var "trait_opportunist" == Val (Bool False) []
[,,
[If "trait_broken" [,]]
,
[If "trait_paranoid" [,]]
,
[If "trait_stubborn" [,]]
,
[If "trait_stubborn" [,]]
,
[Else [,]]
,,,,,
{Choice Branch: [Choice - ''You know, I'm a big fan o...
[
Jump to razor_knife_opportunist_join
],Choice - ''Look, both of us are stuc...
[
{Label: razor_knife_opportunist_join
[,,,,,,,]}
],Choice - ''Has anyone ever told you ...
[,,,,,,,,,,,,,,
{Choice Branch: [Choice - ''Yes! Yes, I am trying to ...
[,,,],Choice - ''Yes! Yes, I am bored of y...
[
Assign "fake_variable" = Val (Bool False)
],Choice - ''Psht. What? Me? Fluffing ...
[,,,],Choice - [[Say nothing.]
[,,,]]}
,,,,]]}
,,,,,
[If "trait_broken" [,]]
,
[If "trait_paranoid" [,]]
,
[If "trait_stubborn" [,]]
,,,,,,,,,,,,,,,,
[If "trait_stubborn" [,]]
,,,,,,,
[If "trait_paranoid" [,]]
,
[If "trait_broken" [,]]
,
[If "trait_stubborn" [,,,,,,,,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,,,,,,,,]]
,
[Else [,,,,,,,,,,,,,,,,,,,,,]]
,,,,
Assign "trait_opportunist" = Val (Bool True)
,,,,],Choice - We're going to unconditiona...If Var "trait_broken" == Val (Bool False) []
[
[If "trait_paranoid" [,]]
,
[Else [,]]
,,,,,,,,,
{Choice Branch: [Choice - ''I give up. I'll do anythi...
[
{Label: razor_knife_surrender
[,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,]}
],Choice - [[Silently throw your hands...
[
Jump to razor_knife_surrender
]]}
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,
Assign "trait_broken" = Val (Bool True)
,,],Choice - Oh, that's easy. I'm going ...If Var "trait_smitten" == Val (Bool False) []
[,,,,,,
[If "trait_broken" [,]]
,
[Elif "trait_paranoid" [,]]
,
[If "trait_stubborn" [,,,,,]]
,
[Else [,]]
,
{Choice Branch: [Choice - ''I know you want to kill m...
[,,,,,,,,,,,,,,,],Choice - ''I just feel like I really...
[,,,,,,,,,,,,,,,],Choice - ''How about you buy me dinn...
[,,,,,,,,,,,,,,,],Choice - [[Give her {b}The Look{/b}.]
[,,,,,,
[If "trait_broken" [,]]
,
[Elif "trait_paranoid" [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,,]]}
,,,,,,,
[If "trait_broken" [,]]
,
[Elif "trait_paranoid" [,]]
,
[Elif "trait_stubborn" [,]]
,,,,,,,,,,,,,,,,
Assign "trait_smitten" = Val (Bool True)
,,,,],Choice - She has swords for arms and...If Var "trait_paranoid" == Val (Bool False) []
[
[If "trait_stubborn" [,,,]]
,
[Else [,]]
,,,,,,,,,,,,
[If "trait_broken" [,,,]]
,
[Else [,]]
,,,,,,,,,,,
Assign "trait_paranoid" = Val (Bool True)
,,,,,],Choice - We're going to fight her, a...If Var "trait_cold" == Val (Bool False) && Var "trait_stubborn" == Val (Bool False) []
[
{Label: razor_2_fight_join
[
[If "trait_stubborn" [,]]
,,,
[If "trait_broken" [,]]
,
[Elif "trait_paranoid" [,,,,,]]
,,,,,,,
{Choice Branch: [Choice - ''Do your worst! I bet you ...
[,,,],Choice - [[Wait for her to come to y...
[,,,]]}
,,,,,,,,,,,,,,,
[If "trait_stubborn" [,,,,,,,,]]
,,,,
[If "trait_stubborn" [,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,]]
,
[Else [,,,,,,,,,,,,,,,,,,,,,,,,,,]]
,,,,,
Assign "trait_cold" = Val (Bool True)
,,,,,]}
],Choice - She wins by killing us, rig...If Var "trait_contrarian" == Val (Bool False) []
[,,
[If "trait_broken" [,]]
,
[If "trait_paranoid" [,]]
,
[If "trait_stubborn" [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "trait_contrarian" = Val (Bool True)
,,,,,],Choice - [[All of these ideas suck. ...If Var "trait_skeptic" == Val (Bool False) []
[,,,,,,,,,,,,,,,,,,,,,,,
Assign "trait_skeptic" = Val (Bool True)
,,,,,]]}
]}
]}
,
{Label: razor_2_armed_beat_2
[,,,,
[If "trait_contrarian" [,]]
,,,,
[If "trait_paranoid" [,,
[If "trait_broken" [,]]
]]
,
[Elif "trait_broken" [,]]
,
[Else [,]]
,
[If "trait_cold" [,]]
,,,,,,,,,,,,,,,,,,,
[If "trait_stubborn" [,,,]]
,
[If "trait_hunted" [,]]
,
[If "trait_cold" [,]]
,
[If "trait_smitten" [,]]
,
[If "trait_paranoid" && Var "razor_paranoid_intro" == Val (Bool False) [
Assign "razor_paranoid_intro" = Val (Bool True)
,,]]
,
[If "trait_broken" && Var "razor_broken_intro" == Val (Bool False) [
Assign "razor_broken_intro" = Val (Bool True)
,,]]
,
[If "trait_opportunist" [,]]
,
[If "trait_contrarian" [,]]
,,,,,,,
[If "trait_skeptic" [,]]
,
{Choice Branch: [Choice - We're going to fight her ag...If Var "trait_cold" == Val (Bool False) && "trait_stubborn" []
[
Assign "trait_cold" = Val (Bool True)
,
Jump to razor_2_armed_cold_early_join
],Choice - We're fighting her, obviously.If Var "trait_stubborn" == Val (Bool False) []
[,,,,,,
Assign "trait_stubborn" = Val (Bool True)
,,,,,,,,,,,,,
Jump to razor_2_armed_montage
],Choice - We're going to appeal to he...If Var "trait_opportunist" == Val (Bool False) []
[,,,,,,
Assign "trait_opportunist" = Val (Bool True)
,,,,,,,,,
Jump to razor_2_armed_montage
],Choice - We're going to unconditiona...If Var "trait_broken" == Val (Bool False) []
[,,,,,,
Assign "trait_broken" = Val (Bool True)
,,,,,,,,,,,,,
Jump to razor_2_armed_montage
],Choice - Oh, that's easy. I'm going ...If Var "trait_smitten" == Val (Bool False) []
[,,,,,,
Assign "trait_smitten" = Val (Bool True)
,,,,,,,,,,,,,
Jump to razor_2_armed_montage
],Choice - She has swords for arms and...If Var "trait_paranoid" == Val (Bool False) []
[,,,,,,
Assign "trait_paranoid" = Val (Bool True)
,,,,,,,,,,,,,
Jump to razor_2_armed_montage
],Choice - We're going to let her stab...If Var "trait_cold" == Val (Bool False) && Var "trait_stubborn" == Val (Bool False) []
[
{Label: razor_2_armed_cold_early_join
[,,,,,,
Assign "trait_cold" = Val (Bool True)
,,,,,,,,,,,,,
Jump to razor_2_armed_montage
]}
],Choice - She wins by killing us, rig...If Var "trait_contrarian" == Val (Bool False) []
[,,,,,,
Assign "trait_contrarian" = Val (Bool True)
,,,,,,,,,,,,
Jump to razor_2_armed_montage
],Choice - [[All of these ideas suck. ...If Var "trait_skeptic" == Val (Bool False) []
[,,,,,,
Assign "trait_skeptic" = Val (Bool True)
,,,,,,,,,,,
Jump to razor_2_armed_montage
]]}
,
{Label: razor_2_armed_montage
[
Assign "razor_montage_panel_number" = Val (Int 1)
,
{Label: razor_2_armed_montage_loop
[,
Assign "razor_loop" += Val (Int 1)
,
[If Var "razor_loop" <= Val (Int 5) [
[If Var "razor_loop" == Val (Int 1) [,]]
,
[If Var "razor_loop" == Val (Int 2) && Var "razor_mont_cont_flag" == Val (Bool False) [,,,,,]]
,
[If Var "razor_loop" == Val (Int 3) [,,,]]
,
[If Var "razor_loop" == Val (Int 4) [,,,]]
,
[If Var "razor_loop" == Val (Int 5) [,,,]]
,
[If Var "trait_stubborn" == Val (Bool False) [
Assign "razor_montage_panel_number" += Val (Int 1)
,
Assign "trait_stubborn" = Val (Bool True)
,,,,
[If Var "trait_contrarian" == Val (Bool False) [,]]
,
[Else [
Assign "mont_panel_2_flag" = Val (Bool True)
,,]]
,,,,,,
[If Var "trait_contrarian" == Val (Bool False) [,]]
,
[Else [,]]
,]]
,
[If Var "trait_contrarian" == Val (Bool False) [,
Assign "razor_montage_panel_number" += Val (Int 1)
,
Assign "razor_mont_cont_flag" = Val (Bool True)
,
Assign "trait_contrarian" = Val (Bool True)
,,,,,,,,,,,]]
,
[Elif Var "trait_broken" == Val (Bool False) [
Assign "trait_broken" = Val (Bool True)
,
Assign "razor_montage_panel_number" += Val (Int 1)
,,,
[If Var "razor_montage_panel_number" == Val (Int 2) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 3) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 4) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 5) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 6) [,]]
,,,,,,
[If Var "razor_montage_panel_number" == Val (Int 2) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 3) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 4) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 5) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 6) [,]]
,]]
,
[Elif Var "trait_smitten" == Val (Bool False) [
Assign "trait_smitten" = Val (Bool True)
,
Assign "razor_montage_panel_number" += Val (Int 1)
,,,
[If Var "razor_montage_panel_number" == Val (Int 2) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 3) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 4) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 5) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 6) [,]]
,,,,,,
[If Var "razor_montage_panel_number" == Val (Int 2) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 3) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 4) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 5) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 6) [,]]
,]]
,
[Elif Var "trait_paranoid" == Val (Bool False) [
Assign "trait_paranoid" = Val (Bool True)
,
Assign "razor_montage_panel_number" += Val (Int 1)
,,,
[If Var "razor_montage_panel_number" == Val (Int 2) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 3) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 4) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 5) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 6) [,]]
,,,,,,
[If Var "razor_montage_panel_number" == Val (Int 2) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 3) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 4) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 5) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 6) [,]]
,]]
,
[Elif Var "trait_cold" == Val (Bool False) [
Assign "trait_cold" = Val (Bool True)
,
Assign "razor_montage_panel_number" += Val (Int 1)
,,,
[If Var "razor_montage_panel_number" == Val (Int 2) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 3) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 4) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 5) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 6) [,]]
,,,,,,
[If Var "razor_montage_panel_number" == Val (Int 2) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 3) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 4) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 5) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 6) [,]]
,]]
,
[Elif Var "trait_opportunist" == Val (Bool False) [
Assign "trait_opportunist" = Val (Bool True)
,
Assign "razor_montage_panel_number" += Val (Int 1)
,,,
[If Var "razor_montage_panel_number" == Val (Int 2) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 3) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 4) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 5) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 6) [,]]
,,,,]]
,
[Elif Var "trait_skeptic" == Val (Bool False) [
Assign "trait_skeptic" = Val (Bool True)
,
Assign "razor_montage_panel_number" += Val (Int 1)
,,,
[If Var "razor_montage_panel_number" == Val (Int 2) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 3) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 4) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 5) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 6) [,]]
,,,,]]
,
Jump to razor_2_armed_montage_loop
]]
]}
,,,,,,,,,,,,,,,,,,
Assign "razor_blade" = Val (Bool True)
,
Jump to razor_final_staging
]}
]}
,
{Label: razor_2_unarmed_start
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "trait_paranoid" [
Assign "razor_paranoid_intro" = Val (Bool True)
,,]]
,
[Elif "trait_broken" [
Assign "razor_broken_intro" = Val (Bool True)
,,]]
,,,,,,,,,,,,,,,,,
{Label: razor_2_unarmed_beat_1
[
{Choice Branch: [Choice - We're fighting her, obviously.If Var "trait_stubborn" == Val (Bool False) []
[,,,,,,,,
[If "trait_broken" [,]]
,
[Else [,]]
,
{Choice Branch: [Choice - Maybe we'll win!
[,,
{Label: razor_2_unarmed_cheated_join
[,,,,,,,,,,,,,,,
[If "trait_broken" [,]]
,
[If "trait_paranoid" [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "trait_stubborn" = Val (Bool True)
,,]}
],Choice - See, but that's the brillia...
[
Jump to razor_2_unarmed_cheated_join
],Choice - I'm done explaining myself....
[,,
Jump to razor_2_unarmed_cheated_join
]]}
],Choice - We're going to appeal to he...If Var "trait_opportunist" == Val (Bool False) []
[
[If "trait_broken" [,]]
,
[If "trait_paranoid" [,]]
,,,,,,,
{Choice Branch: [Choice - ''You know, I'm a big fan o...
[
Jump to razor_empty_opportunist_join
],Choice - ''Look, both of us are stuc...
[
{Label: razor_empty_opportunist_join
[,,,,,,,]}
],Choice - ''Has anyone ever told you ...
[,,,,,,,,,,,,,,
{Choice Branch: [Choice - ''Yes! Yes I am. Did it wor...
[,,,],Choice - ''Psht. What? Me? I'm just ...
[,,,],Choice - [[Say nothing.]
[,,,]]}
,,,,]]}
,,,,,,,
[If "trait_broken" [,,,]]
,
[If "trait_paranoid" [,,]]
,,,,,,,,,,,,,,,,
Assign "trait_opportunist" = Val (Bool True)
,,,,,],Choice - We're going to unconditiona...If Var "trait_broken" == Val (Bool False) []
[,,,,,,,,,,
{Choice Branch: [Choice - ''I give up. I'll do anythi...
[
{Label: razor_empty_surrender
[,,,]}
],Choice - [[Silently throw your hands...
[,,
Jump to razor_empty_surrender
]]}
,,,,,,,,,,,,,,,,
Assign "trait_broken" = Val (Bool True)
,,,,,],Choice - I'm going to go with not le...If Var "trait_hunted" == Val (Bool False) []
[,,,,,,,,
[If "trait_broken" [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "trait_broken" [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "trait_hunted" = Val (Bool True)
,,,,,],Choice - Oh, that's easy. I'm going ...If Var "trait_smitten" == Val (Bool False) []
[,,,,,,,,,,,,
[If "trait_broken" [,,,,,]]
,
[Else [,,,,,]]
,
{Choice Branch: [Choice - ''I know you want to kill m...
[,,,,,,,,,,,,,,,],Choice - ''I just feel like I really...
[,,,,,,,,,,,,,,,],Choice - ''How about you buy me dinn...
[,,,,,,,,,,,,,,,],Choice - [[Give her {b}The Look{/b}.]
[,,,,,,,,,,,,,,,,,,,,,]]}
,,,,,,,,
[If "trait_broken" [,]]
,
[Elif "trait_paranoid" [,]]
,,,,,,,,,,,
Assign "trait_smitten" = Val (Bool True)
,,,,,],Choice - She has swords for arms and...If Var "trait_paranoid" == Val (Bool False) []
[,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "trait_paranoid" = Val (Bool True)
,,,,,],Choice - We're going to let her stab...If Var "trait_cold" == Val (Bool False) []
[,,,,
[If "trait_broken" [,,,]]
,
[Elif "trait_paranoid" [,,,,,]]
,
{Choice Branch: [Choice - ''Do your worst! I bet you ...
[,,,],Choice - [[Silently let her stab you.]
[,,,]]}
,,,,,,,,,,,,,,,,
Assign "trait_cold" = Val (Bool True)
,,,,,],Choice - [[All of these ideas suck. ...If Var "trait_skeptic" == Val (Bool False) []
[,,,,,,,,,,,,,,,,,,,,,,,
Assign "trait_skeptic" = Val (Bool True)
,,,,,]]}
]}
]}
,
{Label: razor_2_unarmed_beat_2
[,,,,,,,,,
[If "trait_paranoid" [,,
[If "trait_broken" [,]]
]]
,
[Elif "trait_broken" [,]]
,
[Else [,]]
,
[If "trait_cold" [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "trait_stubborn" [,,,]]
,
[If "trait_hunted" [,]]
,
[If "trait_cold" [,]]
,
[If "trait_smitten" [,]]
,
[If "trait_paranoid" && Var "razor_paranoid_intro" == Val (Bool False) [
Assign "razor_paranoid_intro" = Val (Bool True)
,,]]
,
[If "trait_broken" && Var "razor_broken_intro" == Val (Bool False) [
Assign "razor_broken_intro" = Val (Bool True)
,,]]
,
[If "trait_opportunist" [,]]
,,,,,,,
[If "trait_skeptic" [,]]
,
{Choice Branch: [Choice - We're fighting her, obviously.If Var "trait_stubborn" == Val (Bool False) []
[,,,,,,
Assign "trait_stubborn" = Val (Bool True)
,,,,,,,,,
Jump to razor_2_unarmed_montage
],Choice - We're going to appeal to he...If Var "trait_opportunist" == Val (Bool False) []
[,,,,,,
Assign "trait_opportunist" = Val (Bool True)
,,,,,,,,,
Jump to razor_2_unarmed_montage
],Choice - We're going to unconditiona...If Var "trait_broken" == Val (Bool False) []
[,,,,,,
Assign "trait_broken" = Val (Bool True)
,,,,,,,,,,,,,
Jump to razor_2_unarmed_montage
],Choice - I'm going to go with not le...If Var "trait_hunted" == Val (Bool False) []
[,,,,,,
Assign "trait_hunted" = Val (Bool True)
,,,,,,,,,,,,,
Jump to razor_2_unarmed_montage
],Choice - Oh, that's easy. I'm going ...If Var "trait_smitten" == Val (Bool False) []
[,,,,,,
Assign "trait_smitten" = Val (Bool True)
,,,,,,,,,,,,,
Jump to razor_2_unarmed_montage
],Choice - She has swords for arms and...If Var "trait_paranoid" == Val (Bool False) []
[,,,,,,
Assign "trait_paranoid" = Val (Bool True)
,,,,,,,,,,,,,
Jump to razor_2_unarmed_montage
],Choice - We're going to let her stab...If Var "trait_cold" == Val (Bool False) []
[,,,,,,
Assign "trait_cold" = Val (Bool True)
,,,,,,,,,,,,,
Jump to razor_2_unarmed_montage
],Choice - [[All of these ideas suck. ...If Var "trait_skeptic" == Val (Bool False) []
[,,,,,,
Assign "trait_skeptic" = Val (Bool True)
,,,,,,,,
Jump to razor_2_unarmed_montage
]]}
,
{Label: razor_2_unarmed_montage
[
Assign "razor_montage_panel_number" = Val (Int 1)
,
{Label: razor_2_unarmed_montage_loop
[
[If Var "razor_loop" <= Val (Int 5) [
Assign "razor_montage_panel_number" += Val (Int 1)
,
Assign "razor_loop" += Val (Int 1)
,
[If Var "razor_loop" == Val (Int 1) [,]]
,
[If Var "razor_loop" == Val (Int 2) [,]]
,
[If Var "razor_loop" == Val (Int 3) [,,,,,,,,,]]
,
[If Var "razor_loop" == Val (Int 4) [,,,]]
,
[If Var "razor_loop" == Val (Int 5) [,,,]]
,
[If Var "trait_stubborn" == Val (Bool False) [
Assign "trait_stubborn" = Val (Bool True)
,,,
[If Var "razor_montage_panel_number" == Val (Int 2) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 3) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 4) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 5) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 6) [,]]
,,,,]]
,
[Elif Var "trait_broken" == Val (Bool False) [
Assign "trait_broken" = Val (Bool True)
,,,,,
[If Var "razor_montage_panel_number" == Val (Int 2) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 3) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 4) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 5) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 6) [,]]
,,,,
[If Var "razor_montage_panel_number" == Val (Int 2) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 3) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 4) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 5) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 6) [,]]
,]]
,
[Elif Var "trait_hunted" == Val (Bool False) [
Assign "trait_hunted" = Val (Bool True)
,,,
[If Var "razor_montage_panel_number" == Val (Int 2) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 3) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 4) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 5) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 6) [,]]
,,,,,,
[If Var "razor_montage_panel_number" == Val (Int 2) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 3) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 4) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 5) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 6) [,]]
,]]
,
[Elif Var "trait_smitten" == Val (Bool False) [
Assign "trait_smitten" = Val (Bool True)
,,,
[If Var "razor_montage_panel_number" == Val (Int 2) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 3) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 4) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 5) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 6) [,]]
,,,,,,
[If Var "razor_montage_panel_number" == Val (Int 2) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 3) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 4) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 5) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 6) [,]]
,]]
,
[Elif Var "trait_paranoid" == Val (Bool False) [
Assign "trait_paranoid" = Val (Bool True)
,,,
[If Var "razor_montage_panel_number" == Val (Int 2) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 3) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 4) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 5) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 6) [,]]
,,,,,,
[If Var "razor_montage_panel_number" == Val (Int 2) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 3) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 4) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 5) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 6) [,]]
,]]
,
[Elif Var "trait_cold" == Val (Bool False) [
Assign "trait_cold" = Val (Bool True)
,,,
[If Var "razor_montage_panel_number" == Val (Int 2) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 3) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 4) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 5) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 6) [,]]
,,,,,,
[If Var "razor_montage_panel_number" == Val (Int 2) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 3) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 4) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 5) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 6) [,]]
,]]
,
[Elif Var "trait_opportunist" == Val (Bool False) [
Assign "trait_opportunist" = Val (Bool True)
,,,
[If Var "razor_montage_panel_number" == Val (Int 2) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 3) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 4) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 5) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 6) [,]]
,,,,]]
,
[Elif Var "trait_skeptic" == Val (Bool False) [
Assign "trait_skeptic" = Val (Bool True)
,,,
[If Var "razor_montage_panel_number" == Val (Int 2) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 3) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 4) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 5) [,]]
,
[Elif Var "razor_montage_panel_number" == Val (Int 6) [,]]
,,,,]]
,
Jump to razor_2_unarmed_montage_loop
]]
]}
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,
Jump to razor_final_staging
]}
]}
,
{Label: razor_2_start
[,,,
Assign "default_mouse" = Val (String "default")
,
Assign "blade_held" = Val (Bool False)
,
Assign "current_loop" = Val (Int 2)
,
Assign "quick_menu" = Val (Bool False)
,
Assign "config.menu_include_disabled" = Val (Bool False)
,,
[If "razor_1_cabin_blade_taken" [,
Assign "trait_hunted" = Val (Bool True)
]]
,
[Else [,
Assign "trait_contrarian" = Val (Bool True)
]]
,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
[If "razor_1_cabin_mirror_ask" || "razor_1_cabin_mirror_approached" [
Assign "razor_1_mirror_interact" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,,,,,,
[If "trait_contrarian" [,,
[If "trait_broken" [,]]
,
[Elif "trait_paranoid" [,]]
]]
,
[Elif "trait_hunted" [,,
[If "trait_stubborn" [,]]
,
[Elif "trait_broken" [,]]
,
[Elif "trait_paranoid" [,]]
]]
,
[If "trait_paranoid" [,,,]]
,,,,,,,,,
[If "trait_paranoid" [,]]
,
[If "trait_stubborn" [,]]
,
[If "trait_broken" [,]]
,,,,,,,,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,
[If "trait_contrarian" [,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,
[If "trait_broken" [,]]
,
[If "trait_paranoid" [,]]
]]
,
[Else [,,,,
[If "trait_broken" [,]]
,
[If "trait_stubborn" [,,,]]
,
[Elif "trait_paranoid" [,,,]]
]]
,
[If "trait_contrarian" || "trait_broken" [,]]
,,,,,
[If "razor_1_mirror_interact" [,]]
,
[Else [,]]
,,,
[If "trait_paranoid" [,]]
,
[If "trait_hunted" [,]]
,
[If "trait_stubborn" [,]]
]}
,
{Label: razor_2_cabin_menu
[
{Choice Branch: [Choice - [[Approach the mirror.]
[
Assign "current_run_mirror_comment" = Val (Bool True)
,,,,,,,,,,,
[If "trait_broken" [,]]
,,,
{Choice Branch: [Choice - [[Wipe the mirror clean.]
[
[If "trait_broken" [,]]
,,,,,,,,,,
[If "trait_contrarian" [,]]
,
[If "trait_hunted" [,]]
,
[If "trait_stubborn" [,]]
,
[If "trait_paranoid" [,]]
,,,,,]]}
,
Assign "quick_menu" = Val (Bool False)
,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,
[If "blade_held" [
Jump to razor_2_armed_start
]]
,
[Else [
Jump to razor_2_unarmed_start
]]
]]}
]}
,
{Label: razor_final_staging
[,,,
Assign "razor_finished" = Val (Bool True)
,
Assign "razor_just_finished" = Val (Bool True)
,,,,
Assign "default_mouse" = Val (String "default")
,
Assign "blade_held" = Val (Bool False)
,
Assign "current_loop" = Val (Int 2)
,
Assign "quick_menu" = Val (Bool False)
,
Assign "config.menu_include_disabled" = Val (Bool False)
,,,
[If "razor_blade" [
Assign "quick_menu" = Val (Bool False)
,,,,,,,,
Jump to razor_final_start_knife
]]
,
[Else [
Assign "quick_menu" = Val (Bool False)
,,,,,,,,
Jump to razor_final_start_unarmed
]]
]}
,
{Label: razor_final_start_knife
[
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to razor_final_basement
]}
,
{Label: razor_final_start_unarmed
[,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to razor_final_basement
]}
,
{Label: razor_final_basement
[,,,,,,,,,,,,,,,,
[If "razor_1_cabin_blade_taken" [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "razor_1_cabin_blade_taken" [,]]
,
[Else [,]]
,,,,,,
[If "razor_blade" [
Jump to razor_knife_final_menu
]]
,
[Else [
Jump to razor_empty_final_menu
]]
,
{Label: razor_knife_final_menu
[
{Choice Branch: [Choice - [[Empty your mind.]
[,,,,,,,,,,
{Choice Branch: [Choice - [[Him too.]
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,]]}
]]}
,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 1)
,
Assign "razor_end" = Val (String "fight")
,
Assign "current_princess" = Val (String "razor")
,
Jump to razor_final_mirror
]}
,
{Label: razor_empty_final_menu
[
{Choice Branch: [Choice - [[Empty your mind.]
[,,,,,,,,,,
{Choice Branch: [Choice - [[Him too.]
[
Assign "default_mouse" = Val (String "eye")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "razor_end" = Val (String "peace")
,
Assign "current_princess" = Val (String "razorheart")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 1)
,
Jump to razor_final_mirror
]]}
]]}
]}
]}
,
{Label: razor_final_mirror
[
{Choice Branch: [Choice - [[Approach the mirror.]
[,,,,,
Jump to mirror_n_wipe
]]}
]}
,
{Label: spectre_1_start
[
Assign "blade_held" = Val (Bool False)
,
Assign "trait_cold" = Val (Bool True)
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,
{Label: spectre_1_forest
[,,,,,,,
{Choice Branch: [Choice - (Explore) Oh, you bastard! ...If Var "spectre_1_forest_share_loop" == Val (Bool False) []
[
Assign "spectre_1_forest_share_loop" = Val (Bool True)
,,,
Jump to spectre_1_forest_narrator_share_join
],Choice - (Explore) I'm getting a ter...If Var "spectre_1_forest_share_loop" == Val (Bool False) []
[
Assign "spectre_1_forest_deja_vu" = Val (Bool True)
,,,
{Label: spectre_1_forest_narrator_share_join
[
Assign "spectre_1_forest_count" += Val (Int 1)
,
Assign "spectre_1_forest_share_loop" = Val (Bool True)
,,,,,,,
Jump to spectre_1_forest
]}
],Choice - (Explore) This is more than...If "spectre_1_forest_deja_vu" && Var "spectre_1_forest_deja_vu_follow_up" == Val (Bool False) []
[
Assign "spectre_1_forest_deja_vu_follow_up" = Val (Bool True)
,
Assign "spectre_1_forest_count" += Val (Int 1)
,,,
Jump to spectre_1_forest
],Choice - (Explore) Wait... hasn't th...If Var "spectre_1_forest_share_loop" == Val (Bool False) []
[,,
Jump to spectre_1_forest_narrator_share_join
],Choice - (Explore) Okay, no.If Var "spectre_1_forest_share_loop" == Val (Bool False) []
[,,
Jump to spectre_1_forest_narrator_share_join
],Choice - (Explore) But I killed myse...If Var "spectre_1_forest_share_loop" == Val (Bool False) []
[
Assign "spectre_1_forest_share_died" = Val (Bool True)
,,,
Jump to spectre_1_forest_narrator_share_join
],Choice - (Explore) But I already kil...If Var "current_princess" == Val (String "ghost") && Var "loop_2_forest_share_loop" == Val (Bool False) []
[
Assign "loop_2_forest_share_loop" = Val (Bool True)
,,,
Jump to spectre_1_forest_narrator_share_join
],Choice - (Explore) You trapped me he...If Var "current_princess" == Val (String "ghost") []
[,,
Jump to spectre_1_forest_narrator_share_join
],Choice - (Explore) Let's assume I'm ...If "spectre_1_forest_share_loop" && Var "spectre_1_forest_deja_vu" == Val (Bool False) || "spectre_1_forest_deja_vu_follow_up" && Var "spectre_1_forest_share_loop_insist" == Val (Bool False) []
[
Assign "spectre_1_forest_share_loop_insist" = Val (Bool True)
,
Assign "spectre_1_forest_count" += Val (Int 1)
,,,,,
[If Var "spectre_1_forest_share_died" == Val (Bool False) [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,
Jump to spectre_1_forest
],Choice - (Explore) Let's talk about ...If "spectre_1_forest_share_loop_insist" && Var "spectre_1_forest_princess_press" == Val (Bool False) []
[
Assign "spectre_1_forest_count" += Val (Int 1)
,
Assign "spectre_1_forest_princess_press" = Val (Bool True)
,,,
{Label: spectre_1_forest_princess
[,,,,,,,
{Choice Branch: [Choice - (Explore) If anything, the ...If Var "spectre_1_forest_princess_teleport" == Val (Bool False) []
[
Assign "spectre_1_forest_princess_teleport" = Val (Bool True)
,,,,,,,,,,,,,,,
Jump to spectre_1_forest_princess
],Choice - (Explore) Last time around ...If Var "spectre_1_forest_princess_why_strong" == Val (Bool False) []
[
Assign "spectre_1_forest_princess_why_strong" = Val (Bool True)
,
Assign "spectre_1_forest_princess_count" += Val (Int 1)
,,,
Jump to spectre_1_forest_princess
],Choice - (Explore) Who locked her in...If Var "spectre_1_forest_princess_basement_explain" == Val (Bool False) []
[
Assign "spectre_1_forest_princess_basement_explain" = Val (Bool True)
,
Assign "spectre_1_forest_princess_count" += Val (Int 1)
,,,
Jump to spectre_1_forest_princess
],Choice - (Explore) If people locked ...If "spectre_1_forest_princess_basement_explain" && Var "spectre_1_forest_princess_why_me" == Val (Bool False) []
[
Assign "spectre_1_forest_princess_why_me" = Val (Bool True)
,
Assign "spectre_1_forest_princess_count" += Val (Int 1)
,,,,,,,
Jump to spectre_1_forest_princess
],Choice - (Explore) You're being cage...If Var "spectre_1_forest_princess_cagey" == Val (Bool False) && Var "spectre_1_forest_princess_count" > Val (Int 1) []
[
Assign "spectre_1_forest_princess_cagey" = Val (Bool True)
,,,,,
Jump to spectre_1_forest_princess
],Choice - Nevermind.If Var "spectre_1_forest_princess_count" == Val (Int 0) []
[
{Label: spectre_1_forest_princess_leaving
[,,
Jump to spectre_1_forest
]}
],Choice - That's all.If Var "spectre_1_forest_princess_count" != Val (Int 0) []
[
Jump to spectre_1_forest_princess_leaving
]]}
]}
],Choice - [[Proceed to the cabin.]
[
Jump to spectre_1_cabin_arrival
],Choice - [[Turn around and leave.]If "mound_can_attempt_flee" []
[
[If Var "loops_finished" >= Val (Int 2) [
Assign "mound_can_attempt_flee" = Val (Bool False)
,,,
Jump to spectre_1_forest
]]
,,,
Jump to turn_and_leave_join
]]}
]}
]}
,
{Label: spectre_1_cabin_arrival
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,
{Choice Branch: [Choice - [[Proceed into the cabin.]
[
{Label: spectre_stranger_rejoin
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,]}
]]}
,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,
{Label: cabin_interior_2_spectre_menu
[,,,,,
{Choice Branch: [Choice - (Explore) You didn't say an...If Var "spectre_1_cabin_mirror_ask" == Val (Bool False) && "spectre_1_cabin_mirror_present" []
[
Assign "spectre_1_cabin_mirror_ask" = Val (Bool True)
,
Assign "current_run_mirror_comment" = Val (Bool True)
,,,,,,,,,
{Choice Branch: [Choice - I care about whether I'm be...
[,,,],Choice - I care. I want to look at m...
[,,,],Choice - You're right. It doesn't ma...
[
Assign "spectre_1_cabin_mirror_present" = Val (Bool False)
,,,,,,,,,],Choice - [[Remain silent.]
[,,,],Choice - [[Approach the mirror.]If Var "spectre_1_cabin_mirror_approached" == Val (Bool False) []
[
{Label: spectre_cabin_1_mirror_join
[
Assign "spectre_1_cabin_mirror_approached" = Val (Bool True)
,,,,,,,,,,,,,
[If Var "spectre_1_cabin_mirror_ask" == Val (Bool False) [,]]
,
[Else [,]]
,
Assign "current_run_mirror_touched" = Val (Bool True)
,
{Choice Branch: [Choice - [[Wipe the mirror clean.]
[
Assign "spectre_1_cabin_mirror_present" = Val (Bool False)
,,,,
[If Var "spectre_1_cabin_mirror_ask" == Val (Bool False) []]
,
[Else []]
,,,
[If "spectre_1_cabin_mirror_ask" [,]]
,
[Else [,]]
,,,,,,,,,
[If Var "spectre_1_cabin_blade_taken" == Val (Bool False) []]
,,
Jump to cabin_interior_2_spectre_menu
]]}
]}
]]}
,
Jump to cabin_interior_2_spectre_menu
],Choice - (Explore) This whole cabin ...If Var "spectre_1_cabin_last_time_comment" == Val (Bool False) && "spectre_1_forest_share_loop_insist" []
[
Assign "spectre_1_cabin_last_time_comment" = Val (Bool True)
,,,,,,,
Jump to cabin_interior_2_spectre_menu
],Choice - (Explore) [[Approach the mi...If "spectre_1_cabin_mirror_present" && Var "spectre_1_cabin_mirror_approached" == Val (Bool False) []
[
Assign "spectre_1_cabin_mirror_approached" = Val (Bool True)
,
Jump to spectre_cabin_1_mirror_join
],Choice - (Explore) [[Take the blade.]If Var "spectre_1_cabin_blade_taken" == Val (Bool False) []
[
Assign "spectre_1_cabin_blade_taken" = Val (Bool True)
,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,
Jump to cabin_interior_2_spectre_menu
],Choice - [[Enter the basement.]
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to spectre_encounter_start
]]}
]}
]}
,
{Label: spectre_encounter_start
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "blade_held" [,]]
,
[Else [,]]
,
{Choice Branch: [Choice - [[Slay the Princess.]If "blade_held" && Var "spectre_hostile" == Val (Bool False) []
[
{Label: spectre_slay_join
[,
Assign "spectre_hostile" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to spectre_hostile_join
]}
],Choice - [[Grab her.]If Var "blade_held" == Val (Bool False) []
[
{Label: spectre_grab_join
[,
Assign "spectre_hostile" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,
{Label: spectre_hostile_join
[,,,,,,
Jump to spectre_menu_hostile
]}
]}
],Choice - [[Wait and see how things p...
[
[If Var "blade_held" == Val (Bool False) [,,,,,,,,,,,,,]]
,
[Else [,,,,,,,]]
,
Jump to spectre_menu_friendly
]]}
]}
,
{Label: spectre_menu_friendly
[
{Choice Branch: [Choice - (Explore) See, this is exac...If "spectre_1_forest_share_loop" && Var "spectre_narrator_loop" == Val (Bool False) []
[
Assign "spectre_narrator_loop" = Val (Bool True)
,,,,,
[If "blade_held" [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,
Jump to spectre_menu_friendly
],Choice - (Explore) ''I killed you! W...If Var "spectre_not_dead_explore" == Val (Bool False) []
[
Assign "spectre_not_dead_explore" = Val (Bool True)
,
Assign "spectre_death_concept_comment" = Val (Bool True)
,,,,,,,,,,,,,
[If "spectre_1_cabin_mirror_ask" || "spectre_1_cabin_mirror_approached" [,]]
,,,
Jump to spectre_menu_friendly
],Choice - (Explore) ''Your body's rig...If "spectre_death_concept_comment" && Var "spectre_body_point" == Val (Bool False) []
[
Assign "spectre_body_point" = Val (Bool True)
,,,,,,,,,,,,,
Jump to spectre_menu_friendly
],Choice - (Explore) ''Do you know why...If Var "spectre_why_back" == Val (Bool False) []
[
Assign "spectre_why_back" = Val (Bool True)
,,,,,,,,,,,,,
Jump to spectre_menu_friendly
],Choice - (Explore) ''And where are y...If Var "spectre_home_comment" == Val (Bool False) && "spectre_why_back" []
[
Assign "spectre_home_comment" = Val (Bool True)
,,,,,
{Label: spectre_friendly_home_reveal
[,,,,,,,,,,,,,,,,
Jump to spectre_menu_friendly
]}
],Choice - (Explore) ''Is there any wa...If "spectre_home_comment" && Var "spectre_home_follow" == Val (Bool False) && Var "spectre_possession_ask" == Val (Bool False) && Var "spectre_bones_ask" == Val (Bool False) []
[
Assign "spectre_bones_ask" = Val (Bool True)
,
Assign "spectre_home_follow" = Val (Bool True)
,,,,,,,,,
Jump to spectre_friendly_possession_early_join
],Choice - (Explore) ''Stop playing th...If Var "spectre_victim" == Val (Bool False) []
[
{Label: spectre_victim_stop
[
Assign "spectre_victim" = Val (Bool True)
,,,,,,,
{Choice Branch: [Choice - (Explore) ''That knife coul...
[,,,,
[If "spectre_hostile" [
Jump to spectre_menu_hostile
]]
,
[Else [
Jump to spectre_menu_friendly
]]
],Choice - (Return) [[Leave it at that.]
[
[If "spectre_hostile" [
Jump to spectre_menu_hostile
]]
,
[Else [
Jump to spectre_menu_friendly
]]
]]}
]}
],Choice - (Explore) ''I'm sorry I kil...If Var "spectre_sorry" == Val (Bool False) []
[
Assign "spectre_sorry" = Val (Bool True)
,,,,,,,,,,,,,,,,,
Jump to spectre_menu_friendly
],Choice - (Explore) ''Do you want me ...If Var "spectre_grovel_1" == Val (Bool False) []
[
Assign "spectre_grovel_1" = Val (Bool True)
,
Assign "spectre_death_shared" = Val (Bool True)
,,,,,,,,,,,,,
[If "spectre_home_comment" [,,,]]
,
[Else [,,,,
Assign "spectre_home_comment" = Val (Bool True)
,
Jump to spectre_friendly_home_reveal
]]
,
Jump to spectre_menu_friendly
],Choice - (Explore) ''I'm sorry. Is t...If Var "spectre_sorry" == Val (Bool False) []
[
Assign "spectre_sorry" = Val (Bool True)
,
[If "spectre_possession_ask" [,,,,,]]
,
[Else [,,,,
Jump to spectre_friendly_possession_early_join
]]
,
Jump to spectre_menu_friendly
],Choice - (Explore) ''The people who ...If Var "spectre_trick" == Val (Bool False) && Var "spectre_home_comment" == Val (Bool False) && Var "spectre_home_comment" == Val (Bool False) []
[
Assign "spectre_trick" = Val (Bool True)
,,,
[If "spectre_narrator_loop" [,]]
,
[Elif "spectre_1_forest_share_loop" [
Assign "spectre_narrator_loop" = Val (Bool True)
,,,,,,]]
,
[Else [
Assign "spectre_narrator_loop" = Val (Bool True)
,,,,,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "spectre_home_comment" = Val (Bool True)
,
Jump to spectre_friendly_home_reveal
],Choice - (Explore) ''What do you wan...If Var "spectre_possession_ask" == Val (Bool False) []
[
[If "spectre_home_comment" [,,,]]
,
[Else [
Assign "spectre_home_comment" = Val (Bool True)
,,,,]]
,
{Label: spectre_friendly_possession_early_join
[,,,,,,,,,,,,
{Label: spectre_friendly_possession_join
[
Assign "spectre_possession_ask" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: spectre_friendly_possession_menu
[,,,,,
{Choice Branch: [Choice - (Explore) ''What if I say n...If Var "spectre_possession_no_explore" == Val (Bool False) []
[
Assign "spectre_possession_no_explore" = Val (Bool True)
,,,,,,,
Jump to spectre_friendly_possession_menu
],Choice - (Explore) ''You {b}won't{/b...If "spectre_possession_no_explore" && Var "spectre_possession_no_wont" == Val (Bool False) []
[
Assign "spectre_possession_no_wont" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,
[If Var "spectre_cold_trap_suggest" == Val (Bool False) [
{Label: spectre_cold_trap_suggest
[
Assign "spectre_cold_trap_suggest" = Val (Bool True)
,,,,]}
]]
,
Jump to spectre_friendly_possession_menu
],Choice - (Explore) ''This would just...If Var "spectre_possession_temporary" == Val (Bool False) []
[
Assign "spectre_possession_temporary" = Val (Bool True)
,,,,,,,
[If Var "spectre_cold_trap_suggest" == Val (Bool False) [,,
Jump to spectre_cold_trap_suggest
]]
,
[Else [,]]
,
Jump to spectre_friendly_possession_menu
],Choice - (Explore) ''If... if I let ...If Var "spectre_possession_control" == Val (Bool False) []
[
Assign "spectre_possession_control" = Val (Bool True)
,,,,,,,,,
[If Var "spectre_cold_trap_suggest" == Val (Bool False) [
Jump to spectre_cold_trap_suggest
]]
,
[Else [,]]
,
Jump to spectre_friendly_possession_menu
],Choice - ''Before I agree to anythin...If Var "spectre_world_end_explore" == Val (Bool False) []
[
Jump to spectre_world_end_join
],Choice - ''Sounds great. Do it.'' [[...
[
Jump to spectre_possession_join
],Choice - ''The answer's no.''If "spectre_can_wraith" []
[
[If "wraith_encountered" [
Assign "spectre_can_wraith" = Val (Bool False)
,,,,,
Jump to spectre_friendly_possession_menu
]]
,,,,,,,,,,
Jump to spectre_death
],Choice - (Return) ''I need to think ...
[,,,,,,
Jump to spectre_menu_friendly
]]}
]}
]}
]}
],Choice - (Explore) ''If I knew I'd w...If Var "spectre_if_only" == Val (Bool False) []
[
{Label: spectre_had_talk_again
[
Assign "spectre_if_only" = Val (Bool True)
,,,,,,,,,,,
[If "spectre_hostile" [
Jump to spectre_menu_hostile
]]
,
[Else [
Jump to spectre_menu_friendly
]]
]}
],Choice - (Explore) ''I died too and ...If Var "spectre_also_dead" == Val (Bool False) []
[
{Label: spectre_floating
[
Assign "spectre_death_shared" = Val (Bool True)
,
Assign "spectre_also_dead" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,
[If "spectre_possession_ask" [,,,]]
,
[Else [,,,,
Assign "spectre_home_comment" = Val (Bool True)
,,,,,,,
Jump to spectre_friendly_possession_join
]]
,,,
[If "spectre_hostile" [
Jump to spectre_menu_hostile
]]
,
[Else [
Jump to spectre_menu_friendly
]]
]}
],Choice - (Explore) ''You're dead. Or...If Var "spectre_how_hurt_explore" == Val (Bool False) []
[
{Label: spectre_how_hurt
[
Assign "spectre_how_hurt_explore" = Val (Bool True)
,
[If Var "spectre_death_concept_comment" == Val (Bool False) [,,,]]
,
[Else [,,,]]
,,,,,,,,,,,,,,,,,,,,,
[If "spectre_hostile" [
Jump to spectre_menu_hostile
]]
,
[Else [
Jump to spectre_menu_friendly
]]
]}
],Choice - (Explore) ''After I killed ...If Var "spectre_teleport" == Val (Bool False) []
[
Assign "spectre_death_shared" = Val (Bool True)
,
Assign "spectre_teleport" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,
Jump to spectre_menu_friendly
],Choice - (Explore) ''Before I agree ...If Var "spectre_world_end_explore" == Val (Bool False) && "spectre_possession_ask" []
[
Jump to spectre_world_end_join
],Choice - (Explore) ''I guess I shoul...If Var "spectre_world_end_explore" == Val (Bool False) []
[
Jump to spectre_world_end_join
],Choice - (Explore) ''I was told you ...If Var "spectre_world_end_explore" == Val (Bool False) []
[
{Label: spectre_world_end_join
[
Assign "spectre_world_end_explore" = Val (Bool True)
,,,,,,,,,,,
{Label: spectre_world_end_menu
[,,,,,,,,
{Choice Branch: [Choice - (Explore) Shit. Everyone so...If "spectre_world_end_grovel1" && Var "spectre_world_end_grovel2" == Val (Bool False) []
[
Assign "spectre_world_end_menu_count" += Val (Int 1)
,
Assign "spectre_world_end_grovel2" = Val (Bool True)
,,,,,
Jump to spectre_world_end_menu
],Choice - (Explore) ''Obviously it wa...If Var "spectre_world_end_menu_count" == Val (Bool False) && Var "spectre_world_end_player_wrong" == Val (Bool False) []
[
Assign "spectre_world_end_player_wrong" = Val (Bool True)
,
Assign "spectre_world_end_menu_count" += Val (Int 1)
,
[If Var "spectre_narrator_loop" == Val (Bool False) [
Assign "spectre_narrator_loop" = Val (Bool True)
,,,,,,]]
,,,,,,,,,,,,,
Jump to spectre_world_end_menu
],Choice - (Explore) ''What are you go...If Var "spectre_world_end_what_do" == Val (Bool False) []
[
Assign "spectre_world_end_what_do" = Val (Bool True)
,
Assign "spectre_world_end_menu_count" += Val (Int 1)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to spectre_world_end_menu
],Choice - (Explore) ''Well, were you ...If Var "spectre_world_end_what_did_past" == Val (Bool False) []
[
Assign "spectre_world_end_what_did_past" = Val (Bool True)
,
Assign "spectre_world_end_menu_count" += Val (Int 1)
,,,,,,,
Jump to spectre_world_end_menu
],Choice - (Explore) ''You didn't answ...If Var "spectre_world_end_what_do_follow" == Val (Bool False) []
[
Assign "spectre_world_end_what_do_follow" = Val (Bool True)
,
Assign "spectre_world_end_menu_count" += Val (Int 1)
,,,,,,,
Jump to spectre_world_end_menu
],Choice - (Explore) ''You still didn'...If "spectre_world_end_what_do_follow" && Var "spectre_world_end_what_do_follow2" == Val (Bool False) []
[
Assign "spectre_world_end_what_do_follow2" = Val (Bool True)
,
Assign "spectre_world_end_menu_count" += Val (Int 1)
,,,,,,,,,,,,,,,,,
[If "spectre_death_shared" [,,,]]
,,,,,
Jump to spectre_world_end_menu
],Choice - (Explore) ''I'm not cold! I...If Var "spectre_world_end_menu_count" == Val (Int 0) && Var "spectre_world_end_grovel1" == Val (Bool False) []
[
Assign "spectre_world_end_grovel1" = Val (Bool True)
,
Assign "spectre_world_end_menu_count" += Val (Int 1)
,,,,
[If Var "blade_held" == Val (Bool False) [,,,]]
,
[Else [,,,]]
,,,
Jump to spectre_world_end_menu
],Choice - (Return) [[Leave it at that.]
[
Jump to spectre_menu_friendly
]]}
]}
]}
],Choice - (Explore) ''Okay, clearly s...If Var "spectre_possession_ask" == Val (Bool False) []
[
Assign "spectre_home_comment" = Val (Bool True)
,,,,,,,,,
Jump to spectre_friendly_possession_early_join
],Choice - (Explore) ''If you can go t...If Var "spectre_walls" == Val (Bool False) && "spectre_home_comment" []
[
Assign "spectre_walls" = Val (Bool True)
,,,,,
[If Var "spectre_possession_ask" == Val (Bool False) [
Assign "spectre_possession_ask" = Val (Bool True)
,
Jump to spectre_friendly_possession_early_join
]]
,
[Else [,,
Jump to spectre_menu_friendly
]]
],Choice - (Explore) Okay team, I'm ou...If Var "spectre_thoughts_explore" == Val (Bool False) []
[
Assign "spectre_thoughts_explore" = Val (Bool True)
,,,,,,,,,,,,,,,
[If Var "spectre_possession_ask" == Val (Bool False) [,,,]]
,
[Else [,,,,,]]
,,,,,,,
Jump to spectre_menu_friendly
],Choice - ''Okay. I've given it enoug...If "spectre_possession_ask" []
[
Jump to spectre_possession_join
],Choice - ''Okay. I've given it enoug...If "spectre_can_wraith" && "spectre_possession_ask" []
[
[If "wraith_encountered" [
Assign "spectre_can_wraith" = Val (Bool False)
,,,,,
Jump to spectre_menu_friendly
]]
,,,,,,,,,,
Jump to spectre_death
],Choice - ''If you're dead, then ther...If "spectre_can_wraith" []
[
[If "wraith_encountered" [
Assign "spectre_can_wraith" = Val (Bool False)
,,,,,
Jump to spectre_menu_friendly
]]
,,,,,,
{Label: spectre_retrieve_abandon_join
[
Assign "spectre_end" = Val (String "abandon")
,,
Assign "spectre_music_flag" = Val (Bool True)
,,,,,,,,,
[If "spectre_blade_retrieve" [,,,]]
,
[Else [,,,]]
,,,,,,,,,
[If "spectre_blade_retrieve" [,,,,,,,]]
,
[Else [
Assign "spectre_paranoid_override" = Val (Bool True)
,,,,,,,,]]
,,,,,,,
Jump to spectre_death
]}
],Choice - ''Right. I don't think ther...If "spectre_can_wraith" && Var "blade_held" == Val (Bool False) []
[
[If "wraith_encountered" [
Assign "spectre_can_wraith" = Val (Bool False)
,,,,,
Jump to spectre_menu_friendly
]]
,,
Assign "spectre_blade_retrieve" = Val (Bool True)
,,,,,
Jump to spectre_retrieve_abandon_join
],Choice - [[Slay the Princess.]If "blade_held" []
[
Jump to spectre_slay_join
],Choice - [[Grab the Princess.]If Var "blade_held" == Val (Bool False) []
[
Jump to spectre_grab_join
]]}
]}
,
{Label: spectre_possession_join
[,,,,,,
[If "spectre_hostile" [,,,]]
,
[Else [,,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "spectre_hostile" [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,,,
[If "spectre_hostile" []]
,
[Else []]
,,,,
[If "spectre_hostile" [,]]
,
[Else [,]]
,,,,,
[If "spectre_hostile" [,]]
,
[Else [,]]
,,,,,
[If "spectre_hostile" [,]]
,
[Else [,]]
,,,,,
[If "spectre_hostile" []]
,
[Else []]
,,,,
[If "spectre_hostile" []]
,
[Else []]
,,,,,,,
[If "spectre_hostile" []]
,
[Else []]
,,,,
[If "spectre_hostile" [,,,]]
,
[Else [,]]
,,,
{Label: spectre_possession_menu
[,
{Choice Branch: [Choice - (Explore) I can't think str...If Var "spectre_possession_menu_explore" == Val (Bool False) []
[
Assign "spectre_possession_menu_explore" = Val (Bool True)
,
[If "spectre_hostile" [,]]
,
[Else [,,,]]
,,,
[If "spectre_hostile" [,]]
,
[Else [,]]
,
Jump to spectre_possession_menu
],Choice - [[Slay the Princess.]If "blade_held" []
[
Jump to spectre_self_slay_join
],Choice - [[Leave the basement.]
[
Jump to spectre_free_start
]]}
]}
]}
,
{Label: spectre_self_slay_join
[,,,,,,,,,
[If "spectre_hostile" [,]]
,
[Else [,]]
,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "blood")
,,,,,,
Jump to spectre_pristine_start
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "spectre_end" = Val (String "slay")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_deny" += Val (Int 1)
,
Jump to mirror_start
]}
,
{Label: spectre_free_start
[,
Assign "spectre_upstairs" = Val (Bool True)
,,,,,,,,,
[If "spectre_hostile" []]
,
[Else []]
,,,,
[If "spectre_hostile" []]
,
[Else []]
,,,,,,,,,,,,,,,,,,,
[If Var "blade_held" == Val (Bool False) []]
,,,,,
[If "spectre_hostile" [,,,]]
,
[Else [,,,]]
,,,,,,,
{Label: spectre_leaving_menu
[
{Choice Branch: [Choice - (Explore) [[Take the blade.]If Var "blade_held" == Val (Bool False) []
[,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,
Jump to spectre_leaving_menu
],Choice - [[Slay the Princess.]If "blade_held" && Var "spectre_1_cabin_blade_taken" == Val (Bool False) []
[
Jump to spectre_self_slay_join
],Choice - [[Trudge forward.]
[,,,,,,,
[If "blade_held" && Var "spectre_1_cabin_blade_taken" == Val (Bool False) [,]]
,
[Else [,]]
,
[If "spectre_hostile" [,]]
,
[Else [,]]
,,,,,,,,
{Choice Branch: [Choice - [[Open the door.]
[,,,,,,,,,,,,,,,,,,,,
[If "spectre_hostile" []]
,
[Else []]
,,,,,,,,,,
[If "spectre_hostile" [,]]
,
[Else [,]]
,,,,,,,,,,,,,,
[If "spectre_hostile" [,,,]]
,
[Else [,,,]]
,,,
[If "spectre_hostile" []]
,
[Else []]
,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "spectre_end" = Val (String "free")
,
Assign "princess_free" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 1)
,
Jump to mirror_start
]]}
]]}
]}
]}
,
{Label: spectre_death
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to spectre_kill_player
]}
,
{Label: spectre_kill_player
[,,,,,,,,,,,,,,,
{Choice Branch: [Choice - ''Did you miss?''
[,,,,
{Label: spectre_kill_player_join
[,,,,,,,,,,,,
[If "blade_held" [,,,,
{Choice Branch: [Choice - [[Slay the Princess.]
[
Assign "spectre_kill_player_slay_attempt" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,
Assign "trait_cheated" = Val (Bool True)
,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,
Jump to wraith_start
],Choice - [[Die.]
[,,,,,,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,
[If "spectre_paranoid_override" [
Assign "trait_paranoid" = Val (Bool True)
]]
,
[Else [
Assign "trait_cheated" = Val (Bool True)
]]
,
Jump to wraith_start
]]}
]]
,
[Else [,,,,,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,
[If "spectre_paranoid_override" [
Assign "trait_paranoid" = Val (Bool True)
]]
,
[Else [
Assign "trait_cheated" = Val (Bool True)
]]
,
Jump to wraith_start
]]
]}
],Choice - ''I'm not afraid of you.''
[,,,,
Jump to spectre_kill_player_join
],Choice - [[Stare at her in silence.]
[
Jump to spectre_kill_player_join
],Choice - [[Step away.]
[,,,,,,,
Jump to spectre_kill_player_join
]]}
]}
,
{Label: spectre_menu_hostile
[,,,
{Choice Branch: [Choice - (Explore) ''If I knew I'd h...If Var "spectre_if_only" == Val (Bool False) []
[
Jump to spectre_had_talk_again
],Choice - (Explore) ''I died too and ...If Var "spectre_also_dead" == Val (Bool False) []
[
Jump to spectre_floating
],Choice - (Explore) ''Stop playing th...If Var "spectre_victim" == Val (Bool False) []
[
Jump to spectre_victim_stop
],Choice - (Explore) ''What if I burie...If "spectre_thoughts_hostile_explore" && Var "spectre_bones_ask" == Val (Bool False) []
[
Assign "spectre_bones_ask" = Val (Bool True)
,,,,,,,
Jump to spectre_menu_hostile
],Choice - (Explore) ''Of course I att...If Var "spectre_world_end_explore" == Val (Bool False) []
[
{Label: spectre_hostile_world_join
[
Assign "spectre_world_end_explore" = Val (Bool True)
,,,,,
{Label: spectre_hostile_world_menu
[,,,
{Choice Branch: [Choice - (Explore) ''Well? Were you ...If Var "spectre_hostile_world_end_explore" == Val (Bool False) []
[
Assign "spectre_hostile_world_end_explore" = Val (Bool True)
,,,,,
[If "spectre_death_shared" [,,,]]
,,,,,,,,,
Jump to spectre_hostile_world_menu
],Choice - (Explore) ''Things end. Thi...If Var "spectre_hostile_world_end_explore_follow" == Val (Bool False) && "spectre_hostile_world_end_explore" []
[
Assign "spectre_hostile_world_end_explore_follow" = Val (Bool True)
,,,,,,,
Jump to spectre_hostile_world_menu
],Choice - (Explore) ''It's a yes or n...If Var "spectre_hostile_world_yes_no" == Val (Bool False) []
[
Assign "spectre_hostile_world_yes_no" = Val (Bool True)
,,,,,,,,,
Jump to spectre_hostile_world_menu
],Choice - (Return) [[Leave it at that.]
[
Jump to spectre_menu_hostile
]]}
]}
]}
],Choice - (Explore) ''You're dead. Or...If Var "spectre_how_hurt_explore" == Val (Bool False) []
[
Jump to spectre_how_hurt
],Choice - (Explore) ''What do you wan...If Var "spectre_possession_ask" == Val (Bool False) []
[,,,,,,,,,,,,,,,,,,,,
{Label: spectre_hostile_possession_join
[
Assign "spectre_possession_ask" = Val (Bool True)
,,,,,,,,,,,,,
{Label: spectre_hostile_possession_menu
[
{Choice Branch: [Choice - (Explore) ''What if I say n...If Var "spectre_possession_no_explore" == Val (Bool False) []
[
Assign "spectre_possession_no_explore" = Val (Bool True)
,,,,,,,,,,,
[If Var "spectre_narrator_loop" == Val (Bool False) [
Assign "spectre_narrator_loop" = Val (Bool True)
,,]]
,
[Else [,]]
,,,,,,,
Jump to spectre_hostile_possession_menu
],Choice - (Explore) ''This would just...If Var "spectre_possession_no_wont" == Val (Bool False) []
[
Assign "spectre_possession_no_wont" = Val (Bool True)
,,,,,,,,,,,,,
Jump to spectre_hostile_possession_menu
],Choice - (Explore) ''If... if I let ...If Var "spectre_possession_control" == Val (Bool False) []
[
Assign "spectre_possession_control" = Val (Bool True)
,,,,,,,,,,,,,,,,
Jump to spectre_hostile_possession_menu
],Choice - ''Before I agree to anythin...If Var "spectre_world_end_explore" == Val (Bool False) && "spectre_possession_ask" []
[
Jump to spectre_hostile_world_join
],Choice - ''No complaints here. Do it...
[
Jump to spectre_possession_join
],Choice - ''The answer is no.''If "spectre_can_wraith" []
[
[If "wraith_encountered" [
Assign "spectre_can_wraith" = Val (Bool False)
,,,,,
Jump to spectre_hostile_possession_menu
]]
,,,,,,
Jump to spectre_death
],Choice - (Return) ''I need to think ...
[,,,,,,
Jump to spectre_menu_hostile
]]}
]}
]}
],Choice - (Explore) Okay team, I'm ou...If Var "spectre_thoughts_explore" == Val (Bool False) []
[
Assign "spectre_thoughts_explore" = Val (Bool True)
,
Assign "spectre_thoughts_hostile_explore" = Val (Bool True)
,,,,,,,,,
Jump to spectre_menu_hostile
],Choice - ''Okay. I've given it enoug...If "spectre_possession_ask" []
[
Jump to spectre_possession_join
],Choice - ''Okay. I've given it enoug...If "spectre_can_wraith" && "spectre_possession_ask" []
[
[If "wraith_encountered" [
Assign "spectre_can_wraith" = Val (Bool False)
,,,,,
Jump to spectre_menu_hostile
]]
,,,,,
Jump to spectre_death
],Choice - [[Smash her bones.]If "spectre_thoughts_hostile_explore" && "spectre_can_wraith" []
[
[If "wraith_encountered" [
Assign "spectre_can_wraith" = Val (Bool False)
,,,,,
Jump to spectre_menu_hostile
]]
,,,,,,,,,,
Assign "spectre_bone_smash" = Val (Bool True)
,
[If "spectre_bones_ask" [,,
Jump to spectre_hostile_second_join
]]
,
[Else [
Jump to spectre_hostile_second_join
]]
],Choice - [[Slay the Princess, harder.]If "spectre_can_wraith" && "blade_held" []
[
[If "wraith_encountered" [
Assign "spectre_can_wraith" = Val (Bool False)
,,,,,
Jump to spectre_menu_hostile
]]
,,,,,,,,,,,,,,,,,,,,,,,,
{Label: spectre_hostile_second_join
[
[If "spectre_bone_smash" && Var "spectre_bones_ask" == Val (Bool False) [,,,,,,,]]
,
[Else [,,,,,]]
,,,,,,,,,,,,,,,,,
Jump to spectre_kill_player
]}
],Choice - [[Grab the Princess, but tr...If "spectre_can_wraith" && Var "blade_held" == Val (Bool False) []
[
[If "wraith_encountered" [
Assign "spectre_can_wraith" = Val (Bool False)
,,,,,
Jump to spectre_menu_hostile
]]
,,,,,,,,,,,,,,,,,,,,,
Jump to spectre_hostile_second_join
],Choice - ''Fine. If I can't hurt you...If "spectre_can_wraith" []
[
[If "wraith_encountered" [
Assign "spectre_can_wraith" = Val (Bool False)
,,,,,
Jump to spectre_menu_hostile
]]
,,,,
Jump to spectre_retrieve_abandon_join
],Choice - ''Right. I don't think ther...If Var "blade_held" == Val (Bool False) && "spectre_can_wraith" []
[
[If "wraith_encountered" [
Assign "spectre_can_wraith" = Val (Bool False)
,,,,,
Jump to spectre_menu_hostile
]]
,,
Assign "spectre_blade_retrieve" = Val (Bool True)
,,,
Jump to spectre_retrieve_abandon_join
]]}
]}
,
{Label: stranger_1_cabin_start
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,]}
,
{Label: cabin_interior_2_stranger_menu
[,,,,,,
{Choice Branch: [Choice - (Explore) You didn't say an...If Var "stranger_1_cabin_mirror_ask" == Val (Bool False) && "stranger_1_cabin_mirror_present" []
[
Assign "stranger_1_cabin_mirror_ask" = Val (Bool True)
,
Assign "current_run_mirror_comment" = Val (Bool True)
,,,
[If Var "stranger_1_cabin_blade_taken" == Val (Bool False) [,]]
,
[Else [,]]
,,,,,,,
{Choice Branch: [Choice - Why {b}would{/b} you lie ab...
[,],Choice - I also want to look at myse...
[,,,,,],Choice - It doesn't matter.
[
Assign "stranger_1_cabin_mirror_present" = Val (Bool False)
,,,,,,,,,],Choice - [[Remain silent.]
[,,,],Choice - [[Approach the mirror.]If Var "stranger_1_cabin_mirror_approached" == Val (Bool False) []
[
{Label: stranger_cabin_1_mirror_join
[
Assign "stranger_1_cabin_mirror_approached" = Val (Bool True)
,,,,,,,,,,,,
[If Var "stranger_1_cabin_mirror_ask" == Val (Bool False) [,]]
,
[Else [,]]
,
Assign "current_run_mirror_touched" = Val (Bool True)
,
{Choice Branch: [Choice - [[Wipe the mirror clean.]
[
Assign "stranger_1_cabin_mirror_present" = Val (Bool False)
,,,,
[If Var "stranger_1_cabin_mirror_ask" == Val (Bool False) []]
,
[Else []]
,,,
[If "stranger_1_cabin_mirror_ask" [,]]
,
[Else [,]]
,,,,,,,,
[If Var "stranger_1_cabin_blade_tossed" == Val (Bool False) []]
,
[Else []]
,,
[If Var "stranger_1_cabin_blade_taken" == Val (Bool False) []]
,,
Jump to cabin_interior_2_stranger_menu
]]}
]}
]]}
,
Jump to cabin_interior_2_stranger_menu
],Choice - (Explore) [[Approach the mi...If "stranger_1_cabin_mirror_present" && Var "stranger_1_cabin_mirror_approached" == Val (Bool False) []
[
Assign "stranger_1_cabin_mirror_approached" = Val (Bool True)
,
Jump to stranger_cabin_1_mirror_join
],Choice - (Explore) [[Take the blade.]If Var "stranger_1_cabin_blade_taken" == Val (Bool False) []
[
Assign "stranger_1_cabin_blade_taken" = Val (Bool True)
,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Keep your grip as it is.]
[,],Choice - [[Hold the blade the other ...
[,
Assign "stranger_other_way" = Val (Bool True)
,,
Assign "default_mouse" = Val (String "thumb")
,,,,,,,,]]}
,
Jump to cabin_interior_2_stranger_menu
],Choice - (Explore) [[Throw the blade...If "stranger_1_cabin_blade_taken" && "blade_held" []
[
Assign "stranger_1_cabin_blade_tossed" = Val (Bool True)
,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,
[If "stranger_1_woods_share_loop" [,]]
,
[Else [,]]
,,,,,
Jump to cabin_interior_2_stranger_menu
],Choice - [[Enter the basement.]
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,
Jump to stranger_1_basement_stairs
]]}
]}
,
{Label: stranger_1_basement_stairs
[,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,
[If Var "blade_held" == Val (Bool False) [,]]
,,,,,,,,,,
{Choice Branch: [Choice - [[Take the harsh stairs to ...
[
Assign "stranger_stairs_choice" = Val (String "left")
,
Assign "stranger_schism_first" = Val (String "harsh")
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,],Choice - [[Take the center staircase.]
[
Assign "stranger_stairs_choice" = Val (String "center")
,
Assign "stranger_schism_first" = Val (String "neutral")
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,],Choice - [[Take the soft stairs to t...
[
Assign "stranger_stairs_choice" = Val (String "right")
,
Assign "stranger_schism_first" = Val (String "gentle")
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,]]}
]}
,
{Label: stranger_1_basement
[,,,,,,,,,,,,
Assign "default_mouse" = Val (String "eye")
,,,,,,,,,,,,,,
[If "blade_held" [
Assign "default_mouse" = Val (String "blade")
]]
,
[Else [
Assign "default_mouse" = Val (String "default")
]]
,,,,,,,,,,,,
[If Var "stranger_schism_first" == Val (String "gentle") [,,,,]]
,
[Elif Var "stranger_schism_first" == Val (String "harsh") [,,,,]]
,
[Else [,,,,]]
,,,,,,,,,,,,,,,]}
,
{Label: stranger_basement_menu
[,,,,,,,,,,,,
[If "stranger_gentle_set" [
Assign "stranger_gentle_set" = Val (Bool False)
,
Assign "stranger_schism_gentle" = Val (Bool True)
]]
,
[If "stranger_neutral_set" [
Assign "stranger_neutral_set" = Val (Bool False)
,
Assign "stranger_schism_neutral" = Val (Bool True)
]]
,
[If "stranger_harsh_set" [
Assign "stranger_harsh_set" = Val (Bool False)
,
Assign "stranger_schism_harsh" = Val (Bool True)
]]
,
[If "stranger_emo_set" [
Assign "stranger_emo_set" = Val (Bool False)
,
Assign "stranger_schism_emo" = Val (Bool True)
]]
,
[If "stranger_monster_set" [
Assign "stranger_monster_set" = Val (Bool False)
,
Assign "stranger_schism_monster" = Val (Bool True)
]]
,,,,,,,,,,,,,,
[If Var "stranger_current_schism_comment" == Val (Bool False) && "stranger_schism_up" && Var "stranger_schism_count" != Val (Int 1) [
Assign "stranger_current_schism_comment" = Val (Bool True)
,
[If Var "stranger_schism_count" == Val (Int 2) [,,,,,,
[If Var "stranger_1_woods_share_loop" == Val (Bool False) [,,,,,,,,,,,]]
,
[Else [
[If "stranger_1_forest_share_loop_insist" [,,,]]
,
[Else [,,,,,]]
]]
,,,,,,]]
,
[If Var "stranger_schism_count" == Val (Int 3) [,,,,,]]
,
[If Var "stranger_schism_count" == Val (Int 4) [,,,,,]]
,
[If Var "stranger_schism_count" == Val (Int 5) [,,,,,,,,,]]
]]
,
{Choice Branch: [Choice - (Explore) ''I'm sorry... I ...If Var "stranger_schism_count" == Val (Int 1) && Var "stranger_menu_sorry" == Val (Bool False) []
[
Assign "stranger_menu_sorry" = Val (Bool True)
,
Assign "stranger_basement_menu_count" += Val (Int 1)
,
[If Var "stranger_schism_first" == Val (String "gentle") [,,,,,,,,,,,,,,,,]]
,
[Elif Var "stranger_schism_first" == Val (String "harsh") [,,,,,,,,,,,,,,,,,,,,]]
,
[Elif Var "stranger_schism_first" == Val (String "neutral") [,,,,,,,,,,,,,,,,,,]]
,
Assign "stranger_current_schism_comment" = Val (Bool False)
,
Assign "stranger_schism_count" += Val (Int 1)
,
[If "blade_held" [
[If Var "stranger_schism_first" != Val (String "harsh") [
Assign "stranger_schism_harsh" = Val (Bool True)
]]
,
[Else [
Assign "stranger_schism_neutral" = Val (Bool True)
]]
]]
,
[Else [
[If Var "stranger_schism_first" != Val (String "gentle") [
Assign "stranger_schism_gentle" = Val (Bool True)
]]
,
[Else [
Assign "stranger_schism_neutral" = Val (Bool True)
]]
]]
,
[If "stranger_schism_gentle" [,,,,]]
,
[If "stranger_schism_neutral" [,,,,]]
,
[If "stranger_schism_harsh" [,,,,]]
,
Jump to stranger_basement_menu
],Choice - (Explore) ''There's more of...If Var "stranger_schism_count" > Val (Int 1) && Var "stranger_menu_more" == Val (Bool False) && Var "stranger_schism_count" != Val (Int 5) []
[
Assign "stranger_menu_more" = Val (Bool True)
,
[If Var "stranger_schism_first" == Val (String "gentle") [,,]]
,
[Elif Var "stranger_schism_first" == Val (String "neutral") [,,]]
,
[Elif Var "stranger_schism_first" == Val (String "harsh") [,,]]
,,
[If "stranger_schism_emo" [,,,]]
,
[If "stranger_schism_monster" [,,,]]
,
[If Var "stranger_schism_neutral" == Val (Bool False) && Var "stranger_schism_first" != Val (String "neutral") [
Assign "stranger_menu_more_break" = Val (Bool True)
,
Assign "stranger_schism_neutral" = Val (Bool True)
,
Assign "stranger_current_schism_comment" = Val (Bool False)
,
Assign "stranger_schism_count" += Val (Int 1)
,,,,,,]]
,
[Elif Var "stranger_schism_harsh" == Val (Bool False) && Var "stranger_schism_first" != Val (String "harsh") [
Assign "stranger_menu_more_break" = Val (Bool True)
,
Assign "stranger_schism_harsh" = Val (Bool True)
,
Assign "stranger_current_schism_comment" = Val (Bool False)
,
Assign "stranger_schism_count" += Val (Int 1)
,,,,,,]]
,
[Elif Var "stranger_schism_gentle" == Val (Bool False) && Var "stranger_schism_first" != Val (String "gentle") [
Assign "stranger_menu_more_break" = Val (Bool True)
,
Assign "stranger_schism_gentle" = Val (Bool True)
,
Assign "stranger_current_schism_comment" = Val (Bool False)
,
Assign "stranger_schism_count" += Val (Int 1)
,,,,,,]]
,
[If "stranger_menu_more_break" [,,,,,]]
,
[Else [
[If "stranger_schism_neutral" [,,,]]
,
[If "stranger_schism_harsh" [,,,]]
,
[If "stranger_schism_gentle" [,,,]]
,,,,]]
,,,
[If Var "blade_held" == Val (Bool False) [,,
[If "stranger_1_cabin_blade_tossed" [,,,,,,,]]
,
[Else [,,,]]
]]
,
[Else [,,,,,,,]]
,
Jump to stranger_basement_menu
],Choice - (Explore) ''What's your nam...If Var "stranger_menu_name" == Val (Bool False) && Var "stranger_schism_count" != Val (Int 5) []
[
Assign "stranger_menu_name" = Val (Bool True)
,
[If Var "stranger_schism_count" == Val (Int 1) [,,]]
,
[Else []]
,
[If Var "stranger_schism_first" == Val (String "gentle") [,]]
,
[If Var "stranger_schism_first" == Val (String "neutral") [,]]
,
[If Var "stranger_schism_first" == Val (String "harsh") [,]]
,
[If Var "stranger_schism_count" == Val (Int 1) []]
,
[Else []]
,
[If Var "stranger_schism_count" == Val (Int 1) [
Assign "stranger_current_schism_comment" = Val (Bool False)
,
Assign "stranger_schism_count" += Val (Int 1)
,
[If "blade_held" [
[If Var "stranger_schism_first" != Val (String "harsh") [
Assign "stranger_schism_harsh" = Val (Bool True)
,,,,,,,,]]
,
[Else [
Assign "stranger_schism_neutral" = Val (Bool True)
,,,,,,,,]]
]]
,
[Else [
[If Var "stranger_schism_first" != Val (String "gentle") [
Assign "stranger_schism_gentle" = Val (Bool True)
,,,,,,,,]]
,
[Else [
Assign "stranger_schism_neutral" = Val (Bool True)
,,,,,,,]]
]]
]]
,
[If "stranger_schism_gentle" [,,,]]
,
[If "stranger_schism_neutral" [,,,]]
,
[If "stranger_schism_harsh" [,,,]]
,
[If "stranger_schism_emo" [,,,]]
,
[If "stranger_schism_monster" [,,,]]
,
[If Var "stranger_schism_count" != Val (Int 2) [,,,]]
,
Jump to stranger_basement_menu
],Choice - (Explore) ''Getting down he...If Var "stranger_menu_weird" == Val (Bool False) && Var "stranger_schism_count" != Val (Int 5) []
[
Assign "stranger_menu_weird" = Val (Bool True)
,,
[If Var "stranger_schism_count" == Val (Int 1) [,,]]
,
[Else []]
,
[If Var "stranger_schism_first" == Val (String "gentle") [,]]
,
[If Var "stranger_schism_first" == Val (String "harsh") [,]]
,
[If Var "stranger_schism_first" == Val (String "neutral") [,]]
,
[If Var "stranger_schism_count" == Val (Int 1) []]
,
[Else []]
,
[If Var "stranger_schism_emo" == Val (Bool False) [
Assign "stranger_schism_count" += Val (Int 1)
,
Assign "stranger_weird_break" = Val (Bool True)
,
Assign "stranger_emo_set" = Val (Bool True)
,,,,,,,,,,,]]
,
[Elif Var "stranger_schism_monster" == Val (Bool False) [
Assign "stranger_schism_count" += Val (Int 1)
,
Assign "stranger_weird_break" = Val (Bool True)
,
Assign "stranger_monster_set" = Val (Bool True)
,,,,,,,,,,,]]
,
[If Var "stranger_weird_break" == Val (Bool False) [
[If Var "stranger_schism_gentle" == Val (Bool False) && Var "stranger_schism_first" != Val (String "gentle") [
Assign "stranger_schism_count" += Val (Int 1)
,
Assign "stranger_current_schism_comment" = Val (Bool False)
,
Assign "stranger_gentle_set" = Val (Bool True)
,
Assign "stranger_weird_break" = Val (Bool True)
,,,,,,,,,,]]
,
[Elif Var "stranger_schism_harsh" == Val (Bool False) && Var "stranger_schism_first" != Val (String "harsh") [
Assign "stranger_schism_count" += Val (Int 1)
,
Assign "stranger_current_schism_comment" = Val (Bool False)
,
Assign "stranger_harsh_set" = Val (Bool True)
,
Assign "stranger_weird_break" = Val (Bool True)
,,,,,,,,,,,]]
,
[Elif Var "stranger_schism_neutral" == Val (Bool False) && Var "stranger_schism_first" != Val (String "neutral") [
Assign "stranger_schism_count" += Val (Int 1)
,
Assign "stranger_current_schism_comment" = Val (Bool False)
,
Assign "stranger_neutral_set" = Val (Bool True)
,
Assign "stranger_weird_break" = Val (Bool True)
,,,,,,,,,,,]]
]]
,
[If "stranger_schism_gentle" [,,,]]
,
[If "stranger_schism_neutral" [,,,]]
,
[If "stranger_schism_harsh" [,,,]]
,
[If "stranger_schism_emo" [,,,]]
,
[If "stranger_schism_monster" [,,,]]
,
Jump to stranger_basement_menu
],Choice - (Explore) ''For all I know,...If Var "stranger_menu_reason" == Val (Bool False) && Var "stranger_schism_count" != Val (Int 5) []
[
Assign "stranger_menu_reason" = Val (Bool True)
,
[If Var "stranger_schism_count" == Val (Int 1) [,,]]
,
[Else []]
,
[If Var "stranger_schism_first" == Val (String "gentle") [,]]
,
[If Var "stranger_schism_first" == Val (String "harsh") [,]]
,
[If Var "stranger_schism_first" == Val (String "neutral") [
[If "blade_held" [,]]
,
[Else [,]]
]]
,
[If Var "stranger_schism_count" == Val (Int 1) []]
,
[Else []]
,
[If Var "stranger_schism_emo" == Val (Bool False) [
Assign "stranger_emo_set" = Val (Bool True)
,
Assign "stranger_current_schism_comment" = Val (Bool False)
,
Assign "stranger_schism_count" += Val (Int 1)
,,,,,,,,,,]]
,
[Else [,,,,
[If Var "stranger_schism_monster" == Val (Bool False) [
Assign "stranger_monster_set" = Val (Bool True)
,
Assign "stranger_current_schism_comment" = Val (Bool False)
,
Assign "stranger_schism_count" += Val (Int 1)
,,,,,,,,,,]]
,
[Else [,,,]]
]]
,
Jump to stranger_basement_menu
],Choice - (Explore) ''You're apparent...If Var "stranger_menu_reason" == Val (Bool False) && Var "stranger_schism_count" != Val (Int 5) []
[
Assign "stranger_menu_reason" = Val (Bool True)
,
Assign "stranger_menu_threat_share" = Val (Bool True)
,
[If Var "stranger_schism_count" == Val (Int 1) [,,]]
,
[Else []]
,
[If Var "stranger_schism_first" == Val (String "gentle") [,]]
,
[Elif Var "stranger_schism_first" == Val (String "harsh") [,]]
,
[Elif Var "stranger_schism_first" == Val (String "neutral") [,]]
,
[If Var "stranger_schism_count" == Val (Int 1) []]
,
[Else []]
,
[If Var "stranger_schism_monster" == Val (Bool False) [
Assign "stranger_monster_set" = Val (Bool True)
,
Assign "stranger_current_schism_comment" = Val (Bool False)
,
Assign "stranger_schism_count" += Val (Int 1)
,,,,,,,,,,]]
,
[Else [,,,,
[If Var "stranger_schism_emo" == Val (Bool False) [
Assign "stranger_emo_set" = Val (Bool True)
,
Assign "stranger_current_schism_comment" = Val (Bool False)
,
Assign "stranger_schism_count" += Val (Int 1)
,,,,,,,,,,]]
,
[Else [,,,]]
]]
,
Jump to stranger_basement_menu
],Choice - (Explore) ''If I let you ou...If Var "stranger_menu_what_do" == Val (Bool False) && Var "stranger_schism_count" != Val (Int 5) && "stranger_menu_threat_share" || "stranger_menu_reason" && "stranger_schism_monster" []
[,,
Assign "stranger_menu_what_do" = Val (Bool True)
,
[If Var "stranger_schism_count" == Val (Int 1) [,,]]
,
[Else []]
,
[If Var "stranger_schism_first" == Val (String "gentle") [,]]
,
[Elif Var "stranger_schism_first" == Val (String "neutral") [,]]
,
[Elif Var "stranger_schism_first" == Val (String "harsh") [,]]
,
[If Var "stranger_schism_count" == Val (Int 1) []]
,
[Else []]
,
[If Var "stranger_what_do_break" == Val (Bool False) [
[If Var "stranger_schism_harsh" == Val (Bool False) && Var "stranger_schism_first" != Val (String "harsh") [
Assign "stranger_what_do_count" += Val (Int 1)
,
Assign "stranger_harsh_set" = Val (Bool True)
,
Assign "stranger_what_do_break" = Val (Bool True)
,
Assign "stranger_schism_count" += Val (Int 1)
,
Assign "stranger_current_schism_comment" = Val (Bool False)
,,,,,,,,,,]]
,
[Elif Var "stranger_schism_neutral" == Val (Bool False) && Var "stranger_schism_first" != Val (String "neutral") [
Assign "stranger_what_do_count" += Val (Int 1)
,
Assign "stranger_neutral_set" = Val (Bool True)
,
Assign "stranger_what_do_break" = Val (Bool True)
,
Assign "stranger_schism_count" += Val (Int 1)
,
Assign "stranger_current_schism_comment" = Val (Bool False)
,,,,,,,,,,]]
,
[Elif Var "stranger_schism_gentle" == Val (Bool False) && Var "stranger_schism_first" != Val (String "gentle") [
Assign "stranger_what_do_count" += Val (Int 1)
,
Assign "stranger_gentle_set" = Val (Bool True)
,
Assign "stranger_what_do_break" = Val (Bool True)
,
Assign "stranger_schism_count" += Val (Int 1)
,
Assign "stranger_current_schism_comment" = Val (Bool False)
,,,,,,,,,,]]
]]
,
[If Var "stranger_what_do_break" == Val (Bool False) [
[If "stranger_schism_neutral" [,,,]]
,
[Elif "stranger_schism_harsh" [,,,]]
,
[Elif "stranger_schism_gentle" [,,]]
]]
,
[If "stranger_schism_gentle" [,,,]]
,
[Elif "stranger_schism_neutral" [,,,]]
,
[Elif "stranger_schism_harsh" [,,,]]
,
[If "stranger_schism_monster" [,,,]]
,
[If "stranger_schism_emo" [,,,]]
,
[If Var "stranger_schism_monster" == Val (Bool False) [,,,]]
,
[Else [,,,]]
,,,,,
Jump to stranger_basement_menu
],Choice - ''I'm getting you out of he...If "blade_held" && Var "stranger_schism_count" >= Val (Int 2) []
[
Assign "stranger_floating" = Val (String "slay")
,
Jump to stranger_ending
],Choice - ''I'm getting you out of he...If Var "blade_held" == Val (Bool False) && Var "stranger_1_cabin_blade_tossed" == Val (Bool False) && Var "stranger_schism_count" >= Val (Int 2) []
[
Assign "stranger_floating" = Val (String "retrieve")
,
Jump to stranger_ending
],Choice - ''I'm getting you out of he...If Var "blade_held" == Val (Bool False) && "stranger_1_cabin_blade_tossed" && Var "stranger_schism_count" >= Val (Int 2) []
[
Assign "stranger_floating" = Val (String "mourn")
,
Jump to stranger_ending
]]}
]}
,
{Label: stranger_ending
[,,,,,,
[If Var "stranger_schism_count" != Val (Int 5) []]
,
[Else []]
,,,,,,,,,,,,,,
[If "blade_held" []]
,,,,,,
[If Var "stranger_floating" == Val (String "slay") [
[If "stranger_other_way" [
Assign "default_mouse" = Val (String "bloodthumb")
]]
,
[Else [
Assign "default_mouse" = Val (String "blood")
]]
,,,,,,,,,,]]
,
[Else [
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - ''It's going to be okay...''
[
Assign "fake_variable" = Val (Bool False)
],Choice - ''I'll do my best.''
[
Assign "fake_variable" = Val (Bool False)
],Choice - ''I don't think you're supp...
[
Assign "fake_variable" = Val (Bool False)
],Choice - ''No.''
[
Assign "fake_variable" = Val (Bool False)
],Choice - ''You just destroyed everyt...
[
Assign "fake_variable" = Val (Bool False)
],Choice - [[Say nothing.]
[,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Jump to stranger_end_say_nothing_join
]]}
,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
]}
,
{Label: stranger_end_say_nothing_join
[
Assign "current_princess" = Val (String "stranger")
,
Jump to mirror_start
]}
,
{Label: stranger_1_start
[,
Assign "trait_contrarian" = Val (Bool True)
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,]}
,
{Label: stranger_1_woods
[,,,,,,,,,
{Choice Branch: [Choice - (Explore) I'm getting a ter...If Var "stranger_1_woods_share_loop" == Val (Bool False) []
[
Assign "stranger_1_woods_share_loop" = Val (Bool True)
,,,
{Label: stranger_1_no_memory
[
Assign "stranger_1_woods_share_loop" = Val (Bool True)
,,,,,
[If "stranger_1_woods_walls" [,]]
,
[Else [,]]
,
Assign "stranger_1_world_end_share" = Val (Bool True)
,,,,,,,
Jump to stranger_1_woods
]}
],Choice - (Explore) Wait... hasn't th...If Var "stranger_1_woods_share_loop" == Val (Bool False) []
[
Assign "stranger_1_woods_share_loop" = Val (Bool True)
,,,
Jump to stranger_1_no_memory
],Choice - (Explore) Okay, no.If Var "stranger_1_woods_share_loop" == Val (Bool False) []
[
Assign "stranger_1_woods_share_loop" = Val (Bool True)
,,,
Jump to stranger_1_no_memory
],Choice - (Explore) You aren't kiddin...If Var "stranger_1_woods_share_loop" == Val (Bool False) []
[
Assign "stranger_1_woods_share_loop" = Val (Bool True)
,,,
Jump to stranger_1_no_memory
],Choice - (Explore) Oh, you bastard! ...If Var "stranger_1_woods_share_loop" == Val (Bool False) []
[
Assign "stranger_1_woods_share_loop" = Val (Bool True)
,,,
Jump to stranger_1_no_memory
],Choice - (Explore) But I died! The w...If Var "stranger_1_woods_share_loop" == Val (Bool False) []
[
Assign "stranger_1_woods_share_loop" = Val (Bool True)
,,,
Jump to stranger_1_no_memory
],Choice - (Explore) Those walls weren...If Var "stranger_1_woods_walls" == Val (Bool False) []
[
Assign "stranger_1_woods_walls" = Val (Bool True)
,,,
[If Var "stranger_1_woods_share_loop" == Val (Bool False) [
Jump to stranger_1_no_memory
]]
,
Jump to stranger_1_woods
],Choice - (Explore) Let's assume I'm ...If "stranger_1_forest_share_loop" && Var "stranger_1_forest_deja_vu" == Val (Bool False) || "stranger_1_forest_deja_vu_follow_up" && Var "stranger_1_forest_share_loop_insist" == Val (Bool False) []
[
Assign "stranger_1_forest_share_loop_insist" = Val (Bool True)
,
Assign "stranger_1_forest_count" += Val (Int 1)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to stranger_1_woods
],Choice - ) Yep. Okay. Heading to the...
[,,
Jump to cabin_arrival_stranger_1_menu
],Choice - Yeah, yeah. I get it. I'm g...
[
Jump to cabin_arrival_stranger_1_menu
],Choice - [[Silently proceed to the c...If Var "stranger_1_forest_count" == Val (Int 0) []
[
Jump to cabin_arrival_stranger_1_menu
],Choice - ''If I can't run away from ...If "mound_can_attempt_flee" && Var "loops_finished" >= Val (Int 1) []
[
[If Var "loops_finished" >= Val (Int 2) [
Assign "mound_can_attempt_flee" = Val (Bool False)
,,,
Jump to stranger_1_woods
]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to caught_late_join
]]}
]}
,
{Label: cabin_arrival_stranger_1_menu
[,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,
{Choice Branch: [Choice - [[Proceed into the cabin.]
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,]]}
,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
Jump to stranger_1_cabin_start
]}
,
{Label: tower_1_convo_start
[,,,,
[If "basement_1_shared_task" [
Assign "tower_self_knowledge" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,
[If "tower_1_forest_share_loop" [,,,,,,,]]
,
[Else [,,,,,,,,,]]
,,,,,
Jump to tower_1_join_me_menu
]]
,
[Else [
[If "tower_1_cabin_blade_taken" [
[If "tower_pathetic" [,,,]]
,
[Else [,,,]]
]]
,
[Else [,,,]]
,,,,,,,,,,,
[If "tower_1_forest_share_loop" [,]]
,
[Else [,,,,,,,,,]]
,
{Label: tower_1_share_motive_menu
[,,
{Choice Branch: [Choice - (Explore) I don't think I c...If Var "tower_resist_count" == Val (Int 0) && Var "tower_1_share_menu_give_in_explore" == Val (Bool False) []
[
Assign "tower_1_share_menu_give_in_explore" = Val (Bool True)
,,,,,
Jump to tower_1_share_motive_menu
],Choice - (Explore) N-no. I w-won't t...If Var "tower_resist_count" > Val (Int 0) && Var "tower_1_share_motive_resist_attempt" == Val (Bool False) && Var "tower_submit_count" != Val (Int 0) []
[
Assign "tower_resist_count" += Val (Int 1)
,
Assign "tower_1_share_motive_resist_attempt" = Val (Bool True)
,,,,,,,
Jump to tower_1_share_motive_menu
],Choice - ''You're supposed to end th...
[,,,,,,,,,,
{Label: tower_1_motive_shared_join
[,
Assign "tower_can_fury" = Val (Bool False)
,
Assign "tower_self_knowledge" = Val (Bool True)
,,,,,,,,,,,,,,,
Jump to tower_1_join_me_menu
]}
],Choice - ''I said NO!''If "tower_1_share_motive_resist_attempt" && "tower_1_cabin_blade_taken" && Var "tower_resist_count" >= Val (Int 3) []
[,,,,
Jump to tower_1_battle_motive_join
],Choice - ''No.''If Var "tower_submit_count" == Val (Int 0) []
[
Jump to tower_1_battle_motive_join
],Choice - [[Remain silent.]
[,,,,
[If Var "tower_submit_count" == Val (Int 0) [,,,,
Jump to tower_1_battle_motive_join
]]
,,,,,
[If Var "tower_1_cabin_blade_taken" == Val (Bool False) [,,,,,]]
,
[Else [,,,,,]]
,,,,,
Jump to tower_1_motive_shared_join
]]}
]}
]]
]}
,
{Label: tower_1_join_me_menu
[,,,,
{Choice Branch: [Choice - (Explore) ''What would you ...If Var "tower_join_me_what_role" == Val (Bool False) []
[
Assign "tower_join_me_what_role" = Val (Bool True)
,
Assign "tower_join_me_count" += Val (Int 1)
,,,,,,
Jump to tower_1_join_me_menu
],Choice - (Explore) ''If you're so po...If "tower_join_me_what_role" && Var "tower_break_self" == Val (Bool False) []
[
Assign "tower_break_self" = Val (Bool True)
,
Assign "tower_join_me_count" += Val (Int 1)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to tower_1_join_me_menu
],Choice - (Explore) ''Just because yo...If Var "tower_self_determination" == Val (Bool False) []
[
Assign "tower_join_me_count" += Val (Int 1)
,
Assign "tower_self_determination" = Val (Bool True)
,,,,,
Jump to tower_1_join_me_menu
],Choice - (Explore) ''I have question...If Var "tower_priest_offer" == Val (Bool False) []
[
{Label: tower_talk_refuse
[
Assign "tower_join_me_count" += Val (Int 1)
,
Assign "tower_priest_offer" = Val (Bool True)
,,,,,,,,,,,
Jump to tower_1_join_me_menu
]}
],Choice - (Explore) ''What happened t...If Var "tower_priest_offer" == Val (Bool False) []
[
Jump to tower_talk_refuse
],Choice - ''I'm not going to help you...If Var "tower_1_cabin_blade_taken" == Val (Bool False) && Var "tower_resist_count" >= Val (Int 2) []
[
{Label: tower_1_empty_refuse_join
[,,
Assign "tower_forced_pledge" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to tower_self_end_late_join
]}
],Choice - ''No. I won't take part in ...If Var "tower_1_cabin_blade_taken" == Val (Bool False) && Var "tower_resist_count" >= Val (Int 2) []
[
Jump to tower_1_empty_refuse_join
],Choice - ''I'm not going to help you...If "tower_1_cabin_blade_taken" []
[,,,,
Jump to tower_1_battle_motive_join
],Choice - ''I'm yours to command.'' [...
[,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
Jump to tower_pledge_join
]]}
]}
,
{Label: tower_1_battle_motive_join
[,,,,,,,,,,,,,,,,,,,
Assign "config.menu_include_disabled" = Val (Bool True)
,
{Choice Branch: [Choice - (Explore) ''Why? What are y...If "tower_false_choice" []
[],Choice - (Explore) ''I'm going to ki...If "tower_false_choice" []
[],Choice - (Explore) You're not kiddin...If "tower_false_choice" []
[],Choice - ''No.''If "tower_false_choice" []
[],Choice - [[Pick up the blade.]
[
Assign "config.menu_include_disabled" = Val (Bool False)
,,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,]]}
,,,,,,,,,,
Assign "config.menu_include_disabled" = Val (Bool True)
,
{Choice Branch: [Choice - ''I hate you. I hate you so...If "tower_false_choice" []
[],Choice - ''Stop making me do things!''If "tower_false_choice" []
[],Choice - ''I'm going to kneel here f...If "tower_false_choice" []
[],Choice - [[Stand.]
[,,,,,,]]}
,
Assign "config.menu_include_disabled" = Val (Bool False)
,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[End this.]
[,]]}
,,,,,,,
Assign "config.menu_include_disabled" = Val (Bool True)
,
{Choice Branch: [Choice - [[Slay yourself.]
[
Assign "config.menu_include_disabled" = Val (Bool False)
,,,,,,,,,
{Label: tower_self_end_join
[,
[If "tower_is_close" []]
,
[Else []]
,,,,
[If "tower_is_close" []]
,
[Else []]
,,,,
[If "tower_is_close" []]
,
[Else []]
,,,,
[If "tower_is_close" []]
,
[Else []]
,,,,,,,
[If "tower_is_close" []]
,
[Else []]
,,,,,,,,,
[If "tower_is_close" []]
,
[Else []]
,,,,
[If "tower_is_close" []]
,
[Else []]
,,,
Assign "default_mouse" = Val (String "blood")
,,,,
[If "tower_is_close" []]
,
[Else []]
,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,
[If "tower_is_close" []]
,
[Else []]
,,,,,
{Label: tower_self_end_late_join
[,
[If "tower_is_close" []]
,
[Else []]
,,,,
[If Var "tower_is_close" == Val (Bool False) []]
,,,
[If "tower_is_close" []]
,
[Else []]
,,,,
[If Var "tower_is_close" == Val (Bool False) []]
,,,,,,,,,,,
Jump to tower_2_start
]}
]}
],Choice - [[Resist.]If Var "tower_resist_count" >= Val (Int 3) && Var "tower_submit_count" > Val (Int 0) []
[
Jump to tower_advance_1
],Choice - [[Slay the Princess.]If Var "tower_submit_count" == Val (Int 0) []
[
{Label: tower_advance_1
[
Assign "config.menu_include_disabled" = Val (Bool False)
,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to tower_post_advance_menu
]}
]]}
]}
,
{Label: tower_post_advance_menu
[
Assign "config.menu_include_disabled" = Val (Bool True)
,
{Choice Branch: [Choice - [[Slay yourself.]
[
Assign "config.menu_include_disabled" = Val (Bool False)
,,,,,,,,,,
Jump to tower_self_end_join
],Choice - [[Push forward.]If Var "tower_resist_count" >= Val (Int 3) && Var "tower_submit_count" > Val (Int 0) []
[
Jump to tower_advance_2_join
],Choice - [[Slay the Princess.]If Var "tower_submit_count" == Val (Int 0) []
[
{Label: tower_advance_2_join
[
Assign "config.menu_include_disabled" = Val (Bool False)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If Var "tower_priest_offer" == Val (Bool False) [
Assign "tower_priest_offer" = Val (Bool True)
,,,,,,,,]]
,
[Else [,]]
,,,,,,,,,
Assign "config.menu_include_disabled" = Val (Bool True)
,
{Label: tower_final_choice
[
{Choice Branch: [Choice - ''I'm yours.'' [[Pledge you...
[,,
Assign "config.menu_include_disabled" = Val (Bool False)
,,,,,,,,,,,,,,
[If Var "tower_self_knowledge" == Val (Bool False) [
Assign "tower_self_knowledge" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,]]
,
Jump to tower_pledge_join
],Choice - ''I. Said. NO!'' [[Resist.]If Var "tower_submit_count" > Val (Int 0) || Var "tower_can_slay" == Val (Bool False) []
[,,
Assign "config.menu_include_disabled" = Val (Bool False)
,,
Assign "tower_is_close" = Val (Bool True)
,,,,,,,,,
Jump to tower_self_end_join
],Choice - [[Slay the Princess.]If Var "tower_submit_count" == Val (Int 0) && "tower_can_slay" []
[,
[If "fury_encountered" [
Assign "tower_can_slay" = Val (Bool False)
,,,,,
Jump to tower_final_choice
]]
,,
Assign "config.menu_include_disabled" = Val (Bool False)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,
Assign "fury_source" = Val (String "tower")
,
Jump to fury_start
]]}
]}
]}
]]}
]}
,
{Label: tower_pledge_join
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to tower_pledge_late_join
]}
,
{Label: tower_pledge_late_join
[,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "tower_1_cabin_blade_taken" [,]]
,
[Else [,]]
,,,,,,
{Label: tower_pledge_chains_break_menu
[,,
{Choice Branch: [Choice - (Explore) ''And what if I d...If Var "tower_pledge_no_believe" == Val (Bool False) []
[
Assign "tower_pledge_no_believe" = Val (Bool True)
,,,,,,,,,
Jump to tower_pledge_chains_break_menu
],Choice - (Explore) I have to. It's o...If Var "tower_pledge_sorry" == Val (Bool False) []
[
Assign "tower_pledge_sorry" = Val (Bool True)
,,,,,
Jump to tower_pledge_chains_break_menu
],Choice - [[Break her chains.]
[,,,,,,,,,,,,,,]]}
]}
,,,,,,,,,,,
{Choice Branch: [Choice - (Explore) ''What happens no...
[,,
{Choice Branch: [Choice - [[Take her hand.]
[
Jump to tower_finale_join
]]}
],Choice - [[Take her hand.]
[
{Label: tower_finale_join
[,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "current_princess" = Val (String "tower")
,
Assign "tower_end" = Val (String "submit")
,
Assign "princess_free" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 1)
,
Jump to mirror_start
]}
]]}
]}
,
{Label: tower_1_start
[
Assign "blade_held" = Val (Bool False)
,
Assign "trait_broken" = Val (Bool True)
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,
{Label: tower_1_forest
[,,,,,,,
{Choice Branch: [Choice - (Explore) I'm getting a ter...If Var "tower_1_forest_share_loop" == Val (Bool False) []
[
Assign "tower_1_forest_deja_vu" = Val (Bool True)
,,,
{Label: tower_1_forest_narrator_share_join
[
Assign "tower_1_forest_count" += Val (Int 1)
,
Assign "tower_1_forest_share_loop" = Val (Bool True)
,,,,,,,,,
Jump to tower_1_forest
]}
],Choice - (Explore) This is more than...If "tower_1_forest_deja_vu" && Var "tower_1_forest_deja_vu_follow_up" == Val (Bool False) []
[
Assign "tower_1_forest_deja_vu_follow_up" = Val (Bool True)
,
Assign "tower_1_forest_count" += Val (Int 1)
,,,
Jump to tower_1_forest
],Choice - (Explore) Wait... hasn't th...If Var "tower_1_forest_share_loop" == Val (Bool False) []
[,,
Jump to tower_1_forest_narrator_share_join
],Choice - (Explore) Okay, no.If Var "tower_1_forest_share_loop" == Val (Bool False) []
[,,
Jump to tower_1_forest_narrator_share_join
],Choice - (Explore) But I died! What ...If Var "tower_1_forest_share_loop" == Val (Bool False) []
[
Assign "tower_1_forest_share_died" = Val (Bool True)
,,,
Jump to tower_1_forest_narrator_share_join
],Choice - (Explore) She's going to ki...If Var "tower_1_forest_share_loop" == Val (Bool False) []
[
Assign "tower_1_forest_share_died" = Val (Bool True)
,,,
Jump to tower_1_forest_narrator_share_join
],Choice - (Explore) Let's assume I'm ...If "tower_1_forest_share_loop" && Var "tower_1_forest_deja_vu" == Val (Bool False) || "tower_1_forest_deja_vu_follow_up" && Var "tower_1_forest_share_loop_insist" == Val (Bool False) []
[
Assign "tower_1_forest_share_loop_insist" = Val (Bool True)
,
Assign "tower_1_forest_count" += Val (Int 1)
,,,,,,,
[If "tower_unharmed" [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,,,
Jump to tower_1_forest
],Choice - (Explore) Let's talk about ...If "tower_1_forest_share_loop_insist" && Var "tower_1_forest_princess_press" == Val (Bool False) []
[
Assign "tower_1_forest_count" += Val (Int 1)
,
Assign "tower_1_forest_princess_press" = Val (Bool True)
,,,
{Label: tower_1_forest_princess
[,,,,,,,
{Choice Branch: [Choice - (Explore) She killed me las...If Var "tower_1_forest_princess_tips" == Val (Bool False) []
[
Assign "tower_1_forest_princess_tips" = Val (Bool True)
,
Assign "tower_1_forest_princess_count" += Val (Int 1)
,,,
Jump to tower_1_forest_princess
],Choice - (Explore) All she did last ...If Var "tower_1_forest_princess_why_strong" == Val (Bool False) []
[
Assign "tower_1_forest_princess_why_strong" = Val (Bool True)
,
Assign "tower_1_forest_princess_count" += Val (Int 1)
,,,
[If Var "tower_1_forest_pessimism_comment" == Val (Bool False) [
Assign "tower_1_forest_pessimism_comment" = Val (Bool True)
,,,,,,,,,,]]
,
Jump to tower_1_forest_princess
],Choice - (Explore) To quote you from...If Var "tower_1_forest_princess_why_strong" == Val (Bool False) []
[
Assign "tower_1_forest_princess_why_strong" = Val (Bool True)
,
Assign "tower_1_forest_princess_count" += Val (Int 1)
,,,
[If Var "tower_1_forest_pessimism_comment" == Val (Bool False) [
Assign "tower_1_forest_pessimism_comment" = Val (Bool True)
,,,,,,,,,,]]
,
Jump to tower_1_forest_princess
],Choice - (Explore) Who locked her in...If Var "tower_1_forest_princess_basement_explain" == Val (Bool False) []
[
Assign "tower_1_forest_princess_basement_explain" = Val (Bool True)
,
Assign "tower_1_forest_princess_count" += Val (Int 1)
,,,
Jump to tower_1_forest_princess
],Choice - (Explore) If people locked ...If "tower_1_forest_princess_basement_explain" && Var "tower_1_forest_princess_why_me" == Val (Bool False) []
[
Assign "tower_1_forest_princess_why_me" = Val (Bool True)
,
Assign "tower_1_forest_princess_count" += Val (Int 1)
,,,,,,,,,
Jump to tower_1_forest_princess
],Choice - (Explore) You're being cage...If Var "tower_1_forest_princess_cagey" == Val (Bool False) && Var "tower_1_forest_princess_count" > Val (Int 1) []
[
Assign "tower_1_forest_princess_cagey" = Val (Bool True)
,,,
[If Var "tower_1_forest_pessimism_comment" == Val (Bool False) [
Assign "tower_1_forest_pessimism_comment" = Val (Bool True)
,,,,,,,,,,]]
,
[Else [,]]
,
Jump to tower_1_forest_princess
],Choice - Nevermind.If Var "tower_1_forest_princess_count" == Val (Int 0) []
[
{Label: tower_1_forest_princess_leaving
[,,
Jump to tower_1_forest
]}
],Choice - That's all.If Var "tower_1_forest_princess_count" != Val (Int 0) []
[
Jump to tower_1_forest_princess_leaving
]]}
]}
],Choice - [[Proceed to the cabin.]
[
Jump to tower_1_cabin_arrival
],Choice - [[Turn around and leave.]If "mound_can_attempt_flee" []
[
[If Var "loops_finished" >= Val (Int 2) [
Assign "mound_can_attempt_flee" = Val (Bool False)
,,,
Jump to tower_1_forest
]]
,,,
Jump to turn_and_leave_join
]]}
]}
]}
,
{Label: tower_1_cabin_arrival
[,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,
[If Var "tower_1_forest_pessimism_comment" == Val (Bool False) [
Assign "tower_1_forest_pessimism_comment" = Val (Bool True)
,,,,,,,,,,,,,,,,]]
,
[Else [,,,,,]]
,
{Choice Branch: [Choice - [[Proceed into the cabin.]
[
{Label: tower_stranger_rejoin
[,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,]}
]]}
,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,
{Label: cabin_interior_2_tower_menu
[,,,,,
{Choice Branch: [Choice - (Explore) You didn't say an...If Var "tower_1_cabin_mirror_ask" == Val (Bool False) && "tower_1_cabin_mirror_present" []
[
Assign "tower_1_cabin_mirror_ask" = Val (Bool True)
,
Assign "current_run_mirror_comment" = Val (Bool True)
,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - I care about whether I'm be...
[,,,],Choice - I want to look at myself. I...
[,,,,,],Choice - It doesn't matter if there'...
[
Assign "tower_1_cabin_mirror_present" = Val (Bool False)
,,,,,,,,,],Choice - [[Remain silent.]
[,,,],Choice - [[Approach the mirror.]If Var "tower_1_cabin_mirror_approached" == Val (Bool False) []
[
{Label: tower_cabin_1_mirror_join
[,,,,,,,,,,
Assign "tower_1_cabin_mirror_approached" = Val (Bool True)
,,,
[If Var "tower_1_cabin_mirror_ask" == Val (Bool False) [,]]
,
[Else [,]]
,
Assign "current_run_mirror_touched" = Val (Bool True)
,
{Choice Branch: [Choice - [[Wipe the mirror clean.]
[
Assign "tower_1_cabin_mirror_present" = Val (Bool False)
,,,,
[If Var "tower_1_cabin_mirror_ask" == Val (Bool False) []]
,
[Else []]
,,,,,,,,,,,
[If Var "tower_1_cabin_blade_taken" == Val (Bool False) []]
,,
Jump to cabin_interior_2_tower_menu
]]}
]}
]]}
,
Jump to cabin_interior_2_tower_menu
],Choice - (Explore) This whole cabin ...If Var "tower_1_cabin_last_time_comment" == Val (Bool False) && "tower_1_forest_share_loop_insist" []
[
Assign "tower_1_cabin_last_time_comment" = Val (Bool True)
,,,
Jump to cabin_interior_2_tower_menu
],Choice - (Explore) [[Approach the mi...If "tower_1_cabin_mirror_present" && Var "tower_1_cabin_mirror_approached" == Val (Bool False) []
[
Assign "tower_1_cabin_mirror_approached" = Val (Bool True)
,
Jump to tower_cabin_1_mirror_join
],Choice - (Explore) [[Take the blade.]If Var "tower_1_cabin_blade_taken" == Val (Bool False) []
[
Assign "tower_resist_count" += Val (Int 1)
,
Assign "tower_1_cabin_blade_taken" = Val (Bool True)
,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,
Jump to cabin_interior_2_tower_menu
],Choice - [[Enter the basement.]
[
[If Var "tower_1_cabin_blade_taken" == Val (Bool False) [
Assign "tower_submit_count" += Val (Int 1)
,,,,]]
,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,
[If Var "tower_1_cabin_blade_taken" == Val (Bool False) [,]]
,,,,,,,
{Choice Branch: [Choice - [[Continue down the stairs.]
[
Assign "fake_variable" = Val (Bool False)
]]}
,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,
[If "tower_1_cabin_blade_taken" [,,,,,,,
{Choice Branch: [Choice - Drop it.
[
Assign "tower_submit_count" += Val (Int 1)
,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,],Choice - Tighten your grip.
[
Assign "tower_resist_count" += Val (Int 1)
,
Assign "tower_1_basement_drop_tighten" = Val (Bool True)
,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,]]}
,,]]
,
[Else [,,,,,,,,]]
,,,,,
{Choice Branch: [Choice - ''No.''
[
Assign "tower_resist_count" += Val (Int 1)
,
[If "tower_1_basement_drop_tighten" [,,,,,,,,,,,,,,]]
,
[Else [,,,,,,,]]
],Choice - Kneel.
[
Assign "tower_submit_count" += Val (Int 1)
,,,,,,,,]]}
,,,,
Jump to tower_1_convo_start
]]}
]}
]}
,
{Label: tower_variables
[,]}
,
{Label: tower_2_start
[,,,
Assign "default_mouse" = Val (String "default")
,
Assign "blade_held" = Val (Bool False)
,
Assign "current_loop" = Val (Int 2)
,
Assign "quick_menu" = Val (Bool False)
,
Assign "config.menu_include_disabled" = Val (Bool False)
,
Assign "current_princess" = Val (String "apotheosis")
,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,
[If "tower_1_cabin_blade_taken" [
Assign "trait_contrarian" = Val (Bool True)
,
Jump to apotheosis_start_contrarian
]]
,
[Else [
Assign "trait_paranoid" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: apotheosis_explore_menu
[,
{Choice Branch: [Choice - (Explore) Okay, now hold on...If Var "apotheosis_explore" == Val (Bool False) []
[
Assign "apotheosis_explore" = Val (Bool True)
,,,
Jump to apotheosis_explore_menu
],Choice - (Explore) I'm not going to ...
[,,,,,,,,,,,],Choice - [[Head to the cabin.]
[
{Label: apotheosis_generic_join
[,,,,,,,,,,,]}
],Choice - [[Run away.]
[,
Assign "apotheosis_run" = Val (Bool True)
,
Jump to apotheosis_generic_join
],Choice - [[Stay where you are.]
[,,,,,,,,,,,,,,]]}
]}
]}
,
{Label: tower_2_cabin
[,,
[If "trait_paranoid" [,]]
,,,,,
{Choice Branch: [Choice - [[Proceed into the cabin.]
[,,,,,,,,,,,
[If "persistent.flickering" [,,,]]
,
[Else [,,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "trait_contrarian" [
Jump to contrarian_pristine_apoth_menu
]]
,
[Else [
Jump to paranoid_pristine_apoth_menu
]]
]]}
]}
,
{Label: tower_2_mirror
[,,,,,,,
Jump to mirror_start_2
]}
,
{Label: witch_1_encounter_start
[
[If "witch_1_forest_share_loop_insist" [,]]
,
[Elif "witch_1_forest_share_loop" [,,,]]
,
[Else [,,,]]
,,,,,,,
[If "witch_1_forest_share_loop" [,]]
,
[Else [,]]
,,,
[If "witch_1_forest_share_loop_insist" [,,,]]
,,,,,,,,,,,,,,,]}
,
{Label: witch_1_menu
[,,,,,,,,,,,,
{Choice Branch: [Choice - (Explore) ''I'm sorry about...If Var "witch_apologize" == Val (Bool False) && Var "witch_cant_apology" == Val (Bool False) []
[
Assign "witch_apologize" = Val (Bool True)
,,,,,,,,,,,,
Jump to witch_1_menu
],Choice - (Explore) ''Look, I made a ...If Var "witch_apologize" == Val (Bool False) && Var "witch_leave_together_knowledge" == Val (Bool False) []
[
Assign "witch_leave_together_knowledge" = Val (Bool True)
,
Assign "witch_apologize" = Val (Bool True)
,,,,,,,,,,,,,,,,
Jump to witch_1_menu
],Choice - (Explore) ''Don't worry, th...If "blade_held" && Var "witch_free" == Val (Bool False) []
[,,,,
Jump to witch_chains_fall_join
],Choice - (Explore) ''I get the sense...If Var "witch_not_happy" == Val (Bool False) []
[
Assign "witch_not_happy" = Val (Bool True)
,,,,,,
Jump to witch_1_menu
],Choice - (Explore) ''You scared me, ...If "witch_betrayal_mutual" && Var "witch_stall" == Val (Bool False) && Var "witch_apologize" == Val (Bool False) []
[
Assign "witch_stall" = Val (Bool True)
,,,,,,,,,,
Jump to witch_1_menu
],Choice - (Explore) ''I'm unarmed. Th...If Var "blade_held" == Val (Bool False) && Var "witch_apologize" == Val (Bool False) && Var "witch_stall" == Val (Bool False) []
[
Assign "witch_stall" = Val (Bool True)
,,,,,,,,,,,
Jump to witch_1_menu
],Choice - (Explore) ''We both died la...If "witch_betrayal_mutual" && Var "witch_stall" == Val (Bool False) []
[
Assign "witch_stall" = Val (Bool True)
,,,,,,
Jump to witch_1_menu
],Choice - (Explore) ''I didn't do shi...If "loop_1_locked" && Var "witch_stall" == Val (Bool False) && Var "witch_leave_together_knowledge" == Val (Bool False) []
[
Assign "witch_leave_together_knowledge" = Val (Bool True)
,
Assign "witch_stall" = Val (Bool True)
,
Assign "witch_cant_apology" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to witch_1_menu
],Choice - (Explore) ''I died last tim...If Var "current_mutual_death" == Val (Int 0) && Var "witch_stall" == Val (Bool False) []
[
Assign "witch_stall" = Val (Bool True)
,
[If "witch_rescue_path" [,,,]]
,
[Else [,,,]]
,,
Jump to witch_1_menu
],Choice - (Explore) ''Look, I know, I...If Var "witch_leave_together_knowledge" == Val (Bool False) []
[
Assign "witch_leave_together_knowledge" = Val (Bool True)
,,,,,,,,,,,
Jump to witch_1_menu
],Choice - (Explore) ''So we're at an ...If "witch_apologize" && Var "witch_leave_together_knowledge" == Val (Bool False) []
[
Assign "witch_leave_together_knowledge" = Val (Bool True)
,,,,,,,,,,,,,,
Jump to witch_1_menu
],Choice - (Explore) ''I didn't bring ...If "witch_leave_together_knowledge" && Var "witch_cut_ask" == Val (Bool False) && Var "blade_held" == Val (Bool False) && Var "witch_free" == Val (Bool False) []
[
{Label: witch_chains_no_cut
[
Assign "witch_cut_ask" = Val (Bool True)
,,,,,
Jump to witch_chains_fall_join
]}
],Choice - (Explore) ''I guess I'll cu...If "blade_held" && Var "witch_free" == Val (Bool False) && "witch_leave_together_knowledge" && Var "witch_cut_ask" == Val (Bool False) []
[
Jump to witch_chains_no_cut
],Choice - (Explore) ''Can't you get o...If Var "witch_betrayal_mutual" == Val (Bool False) && Var "witch_free" == Val (Bool False) []
[,,,,
{Label: witch_chains_fall_join
[
Assign "witch_free" = Val (Bool True)
,,,,,,,,,,,,,
[If Var "witch_heart_comment" == Val (Bool False) [
Assign "witch_heart_comment" = Val (Bool True)
,,]]
,,]}
,
Jump to witch_1_menu
],Choice - (Explore) ''If you could ha...If "witch_free" && Var "witch_leave_together_knowledge" == Val (Bool False) []
[
Assign "witch_leave_together_knowledge" = Val (Bool True)
,,,,,,,,,,
Jump to witch_1_menu
],Choice - (Explore) ''Why do I have a...If Var "witch_betrayal_explore" == Val (Bool False) []
[
Assign "witch_betrayal_explore" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,
Jump to witch_1_menu
],Choice - ''Okay. Let's leave.'' [[Le...If "witch_free" []
[,,,,
Jump to witch_1_stairs
],Choice - ''I don't want to hurt you,...If "blade_held" && Var "witch_blade_offer" == Val (Bool False) []
[
{Label: witch_blade_given_join
[,
Assign "witch_blade_offer" = Val (Bool True)
,,
[If "witch_at_stairs" [,]]
,
[Else [,]]
,,,,,,,,,,
{Choice Branch: [Choice - This isn't a democracy. We'...
[,,
[If "witch_at_stairs" [,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,]]
,
[Else [,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,
[If Var "witch_free" == Val (Bool False) [
Assign "witch_free" = Val (Bool True)
,,,,,,,,,,,,
[If Var "witch_heart_comment" == Val (Bool False) [
Assign "witch_heart_comment" = Val (Bool True)
,,]]
,
[Else [,]]
,,,,]]
,,,,,,,,,]]
,,,,,,,,,
{Choice Branch: [Choice - ''That's up to you. It's wh...
[
Assign "witch_2_voice" = Val (String "cheated")
,
Jump to witch_knife_trick
],Choice - ''We're both scared and we'...
[
Assign "witch_2_voice" = Val (String "smitten")
,
{Label: witch_knife_trick
[,,,,,,,]}
],Choice - ''You're beautiful. I want ...
[
Assign "witch_2_voice" = Val (String "smitten")
,,,,,,,,,,,,,,,,,,],Choice - ''If you're like someone I ...
[
Assign "witch_2_voice" = Val (String "cheated")
,,,,,,,,,,,,,,],Choice - [[Remain silent.]
[
Assign "witch_2_voice" = Val (String "cheated")
,,,,]]}
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,],Choice - Haha. Yeah nevermind that w...
[,,,
[If "witch_at_stairs" []]
,
[Else []]
,,,
[If "witch_at_stairs" []]
,
[Else []]
,,
[If "witch_at_stairs" [
Jump to witch_1_stairs_menu
]]
,
[Else [
Jump to witch_1_menu
]]
]]}
]}
],Choice - ''I don't trust you. Not en...If "witch_can_wild" []
[
[If "wild_encountered" [
Assign "witch_can_wild" = Val (Bool False)
,,,
Jump to witch_1_menu
]]
,,,,,,,,,,,,,,,,,,,,,,,,
Jump to witch_1_flee
],Choice - ''I'd like to be straightfo...If "blade_held" && "witch_can_wild" []
[
[If "wild_encountered" [
Assign "witch_can_wild" = Val (Bool False)
,,,
Jump to witch_1_menu
]]
,,,,,,,,,,,,,,,,,,
Jump to witch_attack_join
],Choice - [[Slay the Princess.]If "blade_held" && "witch_can_wild" []
[
[If "wild_encountered" [
Assign "witch_can_wild" = Val (Bool False)
,,,
Jump to witch_1_menu
]]
,,,
[If Var "witch_menu_count" == Val (Int 0) [,,,,]]
,
[Else [,,,,]]
,,,,,,,
{Label: witch_attack_join
[,,,,,
[If "witch_free" [,,,,,,,,,,,,,,,]]
,
[Else [
Assign "witch_free" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,
[If Var "witch_heart_comment" == Val (Bool False) [
Assign "witch_heart_comment" = Val (Bool True)
,,]]
,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: witch_fight_menu
[
[If Var "witch_fight_menu_count" == Val (Int 1) [,,,,,,]]
,
[Elif Var "witch_fight_menu_count" == Val (Int 2) [,,,,,,,,]]
,
[Elif Var "witch_fight_menu_count" >= Val (Int 3) [
Assign "wild_bonus_voice" = Val (String "cheated")
,
Jump to witch_basement_constriction_join
]]
,
Assign "witch_fight_menu_count" += Val (Int 1)
,,,,,,,
{Choice Branch: [Choice - (Explore) ''What about you?...If Var "witch_fight_mutual_crush_comment" == Val (Bool False) []
[
Assign "witch_fight_mutual_crush_comment" = Val (Bool True)
,,,,,,,,,,,
Jump to witch_fight_menu
],Choice - (Explore) ''Make them stop!...If Var "witch_fight_mutual_crush_comment_follow" == Val (Bool False) []
[
Assign "witch_fight_mutual_crush_comment_follow" = Val (Bool True)
,
[If Var "witch_fight_mutual_crush_comment" == Val (Bool False) [
Assign "witch_fight_mutual_crush_comment" = Val (Bool True)
,,,,,,,,,,]]
,
[Else [,,,,,]]
,
Jump to witch_fight_menu
],Choice - (Explore) ''Why, though? Wh...If "witch_fight_mutual_crush_comment" && Var "witch_fight_mutual_crush_comment_follow" == Val (Bool False) []
[
Assign "witch_fight_mutual_crush_comment_follow" = Val (Bool True)
,,,,,,,,,,,
Jump to witch_fight_menu
],Choice - (Explore) ''Come on! They'r...If Var "witch_fight_menu_count" > Val (Int 1) && Var "witch_fight_menu_sucks_comment" == Val (Bool False) []
[
Assign "witch_fight_menu_sucks_comment" = Val (Bool True)
,,,,,,,,,,,
Jump to witch_fight_menu
],Choice - (Explore) ''We're not anima...If Var "witch_fight_menu_animals_comment" == Val (Bool False) []
[
Assign "witch_fight_menu_animals_comment" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,
Jump to witch_fight_menu
],Choice - (Explore) ''I take it all b...If Var "witch_fight_menu_sorry" == Val (Bool False) []
[
Assign "witch_fight_menu_sorry" = Val (Bool True)
,,,,,,,
Jump to witch_fight_menu
],Choice - [[Give up, and await your d...
[,
Assign "wild_bonus_voice" = Val (String "cheated")
,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,
{Label: witch_basement_constriction_join
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "wild_source" = Val (String "witch")
,
Jump to wild_start
]}
],Choice - [[Go out fighting.]
[
Assign "wild_bonus_voice" = Val (String "stubborn")
,,,,,,,,,,,
Jump to witch_basement_constriction_join
]]}
]}
]}
]]}
]}
,
{Label: witch_1_stairs
[,,
Assign "witch_at_stairs" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "blade_held" [,]]
,
[Else [,]]
,,,
{Label: witch_1_stairs_menu
[,,
{Choice Branch: [Choice - (Explore) ''You first.''If Var "witch_stairs_explore" == Val (Bool False) && Var "witch_stairs_implore" == Val (Bool False) []
[
Assign "witch_stairs_explore" = Val (Bool True)
,,,,,,,,,
Jump to witch_1_stairs_menu
],Choice - (Explore) ''Clearly, there'...If "blade_held" && Var "witch_blade_offer" == Val (Bool False) && Var "witch_stairs_implore" == Val (Bool False) []
[
Assign "witch_blade_offer" = Val (Bool True)
,
Jump to witch_blade_given_join
],Choice - (Explore) ''You're the one ...If Var "witch_stairs_implore" == Val (Bool False) && "witch_stairs_explore" []
[
Assign "witch_stairs_implore" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,
Jump to witch_1_stairs_menu
],Choice - [[Step onto the stairs.]
[
[If "witch_stairs_implore" [
Jump to witch_stairs_princess_first
]]
,
[Else [,,
Jump to witch_stairs_player_first
]]
]]}
]}
]}
,
{Label: witch_stairs_princess_first
[,,,,,,,,,
[If "blade_held" [,,,,,,
{Label: witch_back_stab_menu
[,
{Choice Branch: [Choice - (Explore) I'm not stabbing ...If Var "witch_back_stab_refuse_explore" == Val (Bool False) []
[
Assign "witch_back_stab_refuse_explore" = Val (Bool True)
,,,,,,,,,
Jump to witch_back_stab_menu
],Choice - I said I'm not stabbing her...
[,
Assign "witch_great_idea" = Val (Bool True)
,,,
Jump to witch_leave_join
],Choice - Wow, that's an amazing idea...
[,,
Jump to witch_back_stab
],Choice - I am not going to praise yo...
[,,
Jump to witch_back_stab
],Choice - Ugh. Fine. [[Stab her in th...
[,,
{Label: witch_back_stab
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to witch_betrayal_menu
]}
]]}
]}
]]
,
[Else [
{Label: witch_leave_join
[,,
[If Var "blade_held" == Val (Bool False) [,,,,,]]
,
[Else [,]]
,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,
[If Var "blade_held" == Val (Bool False) []]
,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
[If Var "blade_held" == Val (Bool False) [,,,,,,,,,,,,,,]]
,,,,,,,,,,,,,,,,,,
[If "loop_1_locked" [,]]
,
[If Var "blade_held" == Val (Bool False) [,]]
,
[Else [,]]
,,,
[If "loop_1_locked" [,]]
,
[Else [,]]
,
{Label: witch_leave_locked_menu
[,,,,,
{Choice Branch: [Choice - (Explore) Try the door.If Var "witch_leave_locked_try" == Val (Bool False) && Var "witch_leave_locked_force" == Val (Bool False) []
[
Assign "witch_leave_locked_try" = Val (Bool True)
,,,,
Jump to witch_leave_locked_menu
],Choice - (Explore) Force the door.If Var "witch_leave_locked_force" == Val (Bool False) []
[
Assign "witch_leave_locked_force" = Val (Bool True)
,,,,
Jump to witch_leave_locked_menu
],Choice - (Explore) ''Okay. Fine. You...If Var "witch_leave_locked_funny" == Val (Bool False) []
[
Assign "witch_leave_locked_funny" = Val (Bool True)
,,,
Jump to witch_leave_locked_menu
],Choice - (Explore) ''Please just let...If Var "witch_leave_locked_plead" == Val (Bool False) []
[
Assign "witch_leave_locked_plead" = Val (Bool True)
,,,,,
Jump to witch_leave_locked_menu
],Choice - (Explore) ''I thought you n...If Var "witch_leave_locked_need" == Val (Bool False) []
[
Assign "witch_leave_locked_need" = Val (Bool True)
,,,,,
Jump to witch_leave_locked_menu
],Choice - Okay. What happens now? I'm...
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "witch_end" = Val (String "witch_betray_lock")
,
Assign "princess_deny" += Val (Int 1)
,
Assign "princess_kept" += Val (Int 1)
,
Jump to mirror_start
]]}
]}
]}
]]
]}
,
{Label: witch_stairs_player_first
[,,,,,,,,,,,,,,
[If Var "blade_held" == Val (Bool False) [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to witch_betrayal_menu
]}
,
{Label: witch_betrayal_menu
[,
{Choice Branch: [Choice - ''I can't get up. You broke...If Var "witch_back_broken_share" == Val (Bool False) []
[
Assign "witch_back_broken_share" = Val (Bool True)
,,,,,,,,,,,,],Choice - ''What the hell was that fo...If Var "witch_stairs_implore" == Val (Bool False) []
[,,,,,,,],Choice - ''Damn. I thought I had you...If "witch_stairs_implore" []
[,,,,,,,,,,,],Choice - ''We were never going to ge...
[,,,,
[If Var "witch_stairs_implore" == Val (Bool False) [,,,]]
,
[Else [
[If "loop_1_locked" [,,,]]
,
[Else [,,,]]
,,,,]]
],Choice - ''We could have gotten out ...
[
[If "loop_1_locked" [,,,]]
,
[Else [,,,]]
,
[If Var "witch_stairs_implore" == Val (Bool False) [,,,]]
,
[Else [
{Label: witch_locked_joke
[
[If "loop_1_locked" [,,,]]
,
[Else [,,,]]
,,,,]}
]]
],Choice - [[Say nothing.]
[
[If Var "witch_stairs_implore" == Val (Bool False) [,,,]]
,
[Else [,,,,
Jump to witch_locked_joke
]]
]]}
,,,
[If "witch_stairs_implore" [,,,,,,,,,]]
,
[Else [
[If "blade_held" [,]]
,
[Else [,]]
,,,,,
[If "blade_held" [,,,,,,,,,]]
,
[Else [,,,,,,,]]
]]
,,,,,,
[If Var "witch_stairs_implore" == Val (Bool False) [,]]
,
[Else [,]]
,
[If "witch_back_broken_share" [,,,]]
,
[Else [,,,,,,,,,,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
[If "witch_stairs_implore" [
Assign "witch_end" = Val (String "player_betray")
]]
,
[Else [
Assign "witch_end" = Val (String "witch_betray")
]]
,
Assign "princess_deny" += Val (Int 1)
,
Assign "princess_kept" += Val (Int 1)
,
Jump to mirror_start
]}
,
{Label: witch_1_flee
[,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,
{Label: witch_upstairs_menu
[,
[If Var "witch_upstairs_count" == Val (Int 1) [,,,,,,,]]
,
[Elif Var "witch_upstairs_count" == Val (Int 2) [,,,,,,,]]
,
[Elif Var "witch_upstairs_count" == Val (Int 3) [
Jump to witch_upstairs_end
]]
,
Assign "witch_upstairs_count" += Val (Int 1)
,
{Choice Branch: [Choice - (Explore) ''What about you?...If Var "witch_fight_mutual_crush_comment" == Val (Bool False) []
[
Assign "witch_fight_mutual_crush_comment" = Val (Bool True)
,,,,,,,
Jump to witch_upstairs_menu
],Choice - (Explore) ''Make them stop!...If Var "witch_fight_mutual_crush_comment_follow" == Val (Bool False) []
[
Assign "witch_fight_mutual_crush_comment_follow" = Val (Bool True)
,
[If Var "witch_fight_mutual_crush_comment" == Val (Bool False) [
Assign "witch_fight_mutual_crush_comment" = Val (Bool True)
,,,,,,]]
,
[Else [,]]
,
Jump to witch_upstairs_menu
],Choice - (Explore) ''Why, though? Wh...If "witch_fight_mutual_crush_comment" && Var "witch_fight_mutual_crush_comment_follow" == Val (Bool False) []
[
Assign "witch_fight_mutual_crush_comment_follow" = Val (Bool True)
,,,,,,,,,
Jump to witch_upstairs_menu
],Choice - (Explore) ''Come on! They'r...If Var "witch_upstairs_count" > Val (Int 1) && Var "witch_fight_menu_sucks_comment" == Val (Bool False) []
[
Assign "witch_fight_menu_sucks_comment" = Val (Bool True)
,,,,,,,
Jump to witch_upstairs_menu
],Choice - (Explore) ''We're not anima...If Var "witch_fight_menu_animals_comment" == Val (Bool False) []
[
Assign "witch_fight_menu_animals_comment" = Val (Bool True)
,,,,,
Jump to witch_upstairs_menu
],Choice - (Explore) ''I take it all b...If Var "witch_fight_menu_sorry" == Val (Bool False) []
[
Assign "witch_fight_menu_sorry" = Val (Bool True)
,,,
Jump to witch_upstairs_menu
],Choice - [[Give up, and await your d...
[
{Label: witch_upstairs_end
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "wild_source" = Val (String "witch")
,
Assign "wild_bonus_voice" = Val (String "paranoid")
,
Jump to wild_start
]}
]]}
]}
]}
,
{Label: witch_1_start
[
Assign "blade_held" = Val (Bool False)
,
Assign "trait_opportunist" = Val (Bool True)
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,
{Label: witch_1_forest
[,,,,,,,
{Choice Branch: [Choice - (Explore) I'm getting a ter...If Var "witch_1_forest_share_loop" == Val (Bool False) []
[
Assign "witch_1_forest_deja_vu" = Val (Bool True)
,,,
{Label: witch_1_forest_narrator_share_join
[
Assign "witch_1_forest_count" += Val (Int 1)
,
Assign "witch_1_forest_share_loop" = Val (Bool True)
,,,,,,,,,
Jump to witch_1_forest
]}
],Choice - (Explore) This is more than...If "witch_1_forest_deja_vu" && Var "witch_1_forest_deja_vu_follow_up" == Val (Bool False) []
[
Assign "witch_1_forest_deja_vu_follow_up" = Val (Bool True)
,
Assign "witch_1_forest_count" += Val (Int 1)
,,,
Jump to witch_1_forest
],Choice - (Explore) Wait... hasn't th...If Var "witch_1_forest_share_loop" == Val (Bool False) []
[,,
Jump to witch_1_forest_narrator_share_join
],Choice - (Explore) Okay, no.If Var "witch_1_forest_share_loop" == Val (Bool False) []
[,,
Jump to witch_1_forest_narrator_share_join
],Choice - (Explore) But I died! What ...If Var "witch_1_forest_share_loop" == Val (Bool False) []
[
Assign "witch_1_forest_share_died" = Val (Bool True)
,,,
Jump to witch_1_forest_narrator_share_join
],Choice - (Explore) She's going to ki...If Var "witch_1_forest_share_loop" == Val (Bool False) && Var "loop_1_locked" == Val (Bool False) []
[
Assign "witch_1_forest_share_died" = Val (Bool True)
,,,
Jump to witch_1_forest_narrator_share_join
],Choice - (Explore) But I already sle...If Var "witch_1_forest_share_loop" == Val (Bool False) && Var "loop_1_locked" == Val (Bool False) []
[
Assign "witch_1_forest_share_died" = Val (Bool True)
,,,
Jump to witch_1_forest_narrator_share_join
],Choice - (Explore) Let's assume I'm ...If "witch_1_forest_share_loop" && Var "witch_1_forest_deja_vu" == Val (Bool False) || "witch_1_forest_deja_vu_follow_up" && Var "witch_1_forest_share_loop_insist" == Val (Bool False) []
[
Assign "witch_1_forest_share_loop_insist" = Val (Bool True)
,
Assign "witch_1_forest_count" += Val (Int 1)
,,,,,
[If Var "witch_1_forest_share_died" == Val (Bool False) [,]]
,
[Else [,]]
,,,
[If Var "current_mutual_death" > Val (Int 0) [,,,]]
,
[Else [,]]
,,,
[If Var "current_mutual_death" > Val (Int 0) [,]]
,
[Elif "loop_1_locked" [,]]
,
[Else [,]]
,
[If Var "current_mutual_death" > Val (Int 0) [,,,]]
,
[Else [,,,,,]]
,,,,,,,,,
Jump to witch_1_forest
],Choice - (Explore) Let's talk about ...If "witch_1_forest_share_loop_insist" && Var "witch_1_forest_princess_press" == Val (Bool False) []
[
Assign "witch_1_forest_count" += Val (Int 1)
,
Assign "witch_1_forest_princess_press" = Val (Bool True)
,,,
{Label: witch_1_forest_princess
[,,,,,,
{Choice Branch: [Choice - (Explore) She killed me las...If Var "witch_1_forest_princess_tips" == Val (Bool False) []
[
Assign "witch_1_forest_princess_tips" = Val (Bool True)
,
Assign "witch_1_forest_princess_count" += Val (Int 1)
,,,
Jump to witch_1_forest_princess
],Choice - (Explore) She killed me by ...If Var "witch_1_forest_princess_why_strong" == Val (Bool False) && Var "loop_1_locked" == Val (Bool False) []
[
Assign "witch_1_forest_princess_why_strong" = Val (Bool True)
,
Assign "witch_1_forest_princess_count" += Val (Int 1)
,,,
Jump to witch_1_forest_princess
],Choice - (Explore) All she did last ...If Var "witch_1_forest_princess_why_strong" == Val (Bool False) && "loop_1_locked" []
[
Assign "witch_1_forest_princess_why_strong" = Val (Bool True)
,
Assign "witch_1_forest_princess_count" += Val (Int 1)
,,,
Jump to witch_1_forest_princess
],Choice - (Explore) To quote you from...If Var "witch_1_forest_princess_why_strong" == Val (Bool False) && Var "loop_1_locked" == Val (Bool False) []
[
Assign "witch_1_forest_princess_why_strong" = Val (Bool True)
,
Assign "witch_1_forest_princess_count" += Val (Int 1)
,,,
Jump to witch_1_forest_princess
],Choice - (Explore) Who locked her in...If Var "witch_1_forest_princess_basement_explain" == Val (Bool False) []
[
Assign "witch_1_forest_princess_basement_explain" = Val (Bool True)
,
Assign "witch_1_forest_princess_count" += Val (Int 1)
,,,
Jump to witch_1_forest_princess
],Choice - (Explore) If people locked ...If "witch_1_forest_princess_basement_explain" && Var "witch_1_forest_princess_why_me" == Val (Bool False) []
[
Assign "witch_1_forest_princess_why_me" = Val (Bool True)
,
Assign "witch_1_forest_princess_count" += Val (Int 1)
,,,,,,,,,,,,,
Jump to witch_1_forest_princess
],Choice - (Explore) You're being cage...If Var "witch_1_forest_princess_cagey" == Val (Bool False) && Var "witch_1_forest_princess_count" > Val (Int 1) []
[
Assign "witch_1_forest_princess_cagey" = Val (Bool True)
,,,
[If Var "loop_1_locked" == Val (Bool False) [,]]
,
[If Var "witch_1_forest_princess_count" < Val (Int 2) [,]]
,
[Else [,]]
,,,,,
Jump to witch_1_forest_princess
],Choice - Nevermind.If Var "witch_1_forest_princess_count" == Val (Int 0) []
[
{Label: witch_1_forest_princess_leaving
[,,
Jump to witch_1_forest
]}
],Choice - That's all.If Var "witch_1_forest_princess_count" != Val (Int 0) []
[
Jump to witch_1_forest_princess_leaving
]]}
]}
],Choice - [[Proceed to the cabin.]
[
Jump to witch_1_cabin_arrival
],Choice - [[Turn around and leave.]If "mound_can_attempt_flee" []
[
[If Var "loops_finished" >= Val (Int 2) [
Assign "mound_can_attempt_flee" = Val (Bool False)
,,,
Jump to witch_1_forest
]]
,,,
Jump to turn_and_leave_join
]]}
]}
]}
,
{Label: witch_1_cabin_arrival
[,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,
[If "witch_1_forest_share_loop_insist" [,]]
,
[Else [,]]
,
{Choice Branch: [Choice - [[Proceed into the cabin.]
[
{Label: witch_stranger_rejoin
[,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,]}
]]}
,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,
{Label: cabin_interior_2_witch_menu
[,,,,,
{Choice Branch: [Choice - (Explore) You didn't say an...If Var "witch_1_cabin_mirror_ask" == Val (Bool False) && "witch_1_cabin_mirror_present" []
[
Assign "witch_1_cabin_mirror_ask" = Val (Bool True)
,
Assign "current_run_mirror_comment" = Val (Bool True)
,,,,,,,
{Choice Branch: [Choice - I trust my eyes. Why would ...
[,,,],Choice - I want to look at myself. I...
[,,,,,,,,,,,],Choice - It doesn't matter.
[
Assign "witch_1_cabin_mirror_present" = Val (Bool False)
,,,,,,,,,,,],Choice - [[Remain silent.]
[,,,,,],Choice - [[Approach the mirror.]If Var "witch_1_cabin_mirror_approached" == Val (Bool False) []
[
{Label: witch_cabin_1_mirror_join
[
Assign "witch_1_cabin_mirror_approached" = Val (Bool True)
,,,,,,,,,,,,,
[If Var "witch_1_cabin_mirror_ask" == Val (Bool False) [,]]
,
[Else [,]]
,
Assign "current_run_mirror_touched" = Val (Bool True)
,
{Choice Branch: [Choice - [[Wipe the mirror clean.]
[
Assign "witch_1_cabin_mirror_present" = Val (Bool False)
,,,,
[If Var "witch_1_cabin_mirror_ask" == Val (Bool False) []]
,
[Else []]
,,,
[If "witch_1_cabin_mirror_ask" [,]]
,,,,,,,
[If Var "witch_1_cabin_blade_taken" == Val (Bool False) []]
,,
Jump to cabin_interior_2_witch_menu
]]}
]}
]]}
,
Jump to cabin_interior_2_witch_menu
],Choice - (Explore) This whole cabin ...If Var "witch_1_cabin_last_time_comment" == Val (Bool False) && "witch_1_forest_share_loop_insist" []
[
Assign "witch_1_cabin_last_time_comment" = Val (Bool True)
,,,,,,,
Jump to cabin_interior_2_witch_menu
],Choice - (Explore) [[Approach the mi...If "witch_1_cabin_mirror_present" && Var "witch_1_cabin_mirror_approached" == Val (Bool False) []
[
Assign "witch_1_cabin_mirror_approached" = Val (Bool True)
,
Jump to witch_cabin_1_mirror_join
],Choice - (Explore) [[Take the blade.]If Var "witch_1_cabin_blade_taken" == Val (Bool False) []
[
Assign "witch_1_cabin_blade_taken" = Val (Bool True)
,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,,,,,
Jump to cabin_interior_2_witch_menu
],Choice - [[Enter the basement.]
[
[If Var "witch_1_cabin_blade_taken" == Val (Bool False) [
[If "witch_1_forest_share_loop_insist" [,]]
,
[Else [,]]
,,]]
,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,
{Choice Branch: [Choice - ''I'm not nasty!''
[,,,],Choice - ''Hello.''
[,],Choice - Say nothing.
[,]]}
,
[If Var "witch_1_forest_share_loop_insist" == Val (Bool False) [,]]
,
[Else [,,,]]
,,,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,
[If "witch_1_cabin_blade_taken" [,,,,,,,,,,,,]]
,
[Else [,,]]
,
Jump to witch_1_encounter_start
]]}
]}
]}
,
{Label: witch_2_start
[,,,
Assign "default_mouse" = Val (String "default")
,
Assign "blade_held" = Val (Bool False)
,
Assign "current_loop" = Val (Int 2)
,
Assign "quick_menu" = Val (Bool False)
,
Assign "config.menu_include_disabled" = Val (Bool False)
,
Assign "current_princess" = Val (String "thorn")
,
[If Var "witch_2_voice" == Val (String "cheated") [
Assign "trait_cheated" = Val (Bool True)
]]
,
[Else [
Assign "trait_smitten" = Val (Bool True)
]]
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,
[If "trait_cheated" [,,,,,,,,,]]
,
[Else [,,,,,,,,,,,,,,,,,,,,,,,]]
,,,,,
[If "trait_smitten" [,,,]]
,
[Else [,]]
,,,,,,,]}
,
{Label: witch_2_path_menu
[,,,,,,
{Choice Branch: [Choice - (Explore) This place is dif...If Var "witch_2_different" == Val (Bool False) []
[
Assign "witch_2_different" = Val (Bool True)
,,,,,
[If "trait_cheated" [,]]
,,,
[If "trait_smitten" [,]]
,
Jump to witch_2_path_menu
],Choice - (Explore) We're going to fr...If Var "witch_2_intentions" == Val (Bool False) []
[
Assign "witch_2_intentions" = Val (Bool True)
,
Assign "witch_2_intent_free" = Val (Bool True)
,,,
[If "trait_smitten" [,]]
,
[Else [,]]
,,,
{Label: witch_2_opportunist_waffle_join
[,,,,,,,]}
,
Jump to witch_2_path_menu
],Choice - (Explore) We're even now. I...If Var "witch_2_intentions" == Val (Bool False) []
[
Assign "witch_2_intentions" = Val (Bool True)
,,,,,,,,,,,
[If "trait_smitten" [,]]
,
[Else [,]]
,,,
Jump to witch_2_path_menu
],Choice - (Explore) I hope you don't ...If Var "witch_2_intentions" == Val (Bool False) []
[
Assign "witch_2_intent_harsh" = Val (Bool True)
,
Assign "witch_2_intentions" = Val (Bool True)
,,,
[If "trait_smitten" [,]]
,
[Else [,]]
,,,
Jump to witch_2_opportunist_waffle_join
],Choice - (Explore) Screw the cabin, ...If Var "witch_2_leave_explore" == Val (Bool False) []
[
Assign "witch_2_leave_explore" = Val (Bool True)
,,,
[If "trait_smitten" [,,,]]
,
[Else [,,,,,]]
,
Jump to witch_2_path_menu
],Choice - (Explore) You sure seem to ...If Var "witch_2_looping" == Val (Bool False) []
[
Assign "witch_2_looping" = Val (Bool True)
,,,,,,,
[If "trait_smitten" [,]]
,
[Else [,]]
,,,,,,,
Jump to witch_2_path_menu
],Choice - No matter what happens next...
[
Jump to witch_2_exterior
],Choice - [[Silently proceed to the c...
[
Jump to witch_2_exterior
],Choice - I'm done with this. Bye! [[...If "mound_can_attempt_flee" []
[
[If Var "loops_finished" >= Val (Int 2) [
Assign "mound_can_attempt_flee" = Val (Bool False)
,,,
Jump to witch_2_path_menu
]]
,
Assign "caught_origin_ch3" = Val (Bool True)
,
Assign "caught_origin_current" = Val (String "witch2")
,,,
[If "trait_cheated" [,]]
,,,,,,,,,
[If "trait_smitten" [,]]
,
Jump to caught_start
]]}
]}
,
{Label: witch_2_exterior
[,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,
[If Var "witch_2_looping" == Val (Bool False) [,]]
,
[Else [,]]
,
{Choice Branch: [Choice - [[Proceed into the cabin.]
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,
Jump to witch_2_cabin
]]}
]}
,
{Label: witch_2_cabin
[,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,
[If "trait_cheated" [,]]
,
[Else [,,,]]
,
{Label: witch_2_cabin_menu
[,
{Choice Branch: [Choice - (Explore) How do we even ge...If Var "witch_2_mirror_comment" == Val (Bool False) []
[
Assign "witch_2_mirror_comment" = Val (Bool True)
,
Assign "current_run_mirror_comment" = Val (Bool True)
,
[If "witch_1_cabin_mirror_ask" || "witch_1_cabin_mirror_approached" [,,,]]
,
[Else [,,,]]
,
[If "witch_1_cabin_mirror_ask" || "witch_1_cabin_mirror_approached" [,,
[If "trait_cheated" [,]]
]]
,
[Else [,,
[If "trait_cheated" [,]]
]]
,
[If "trait_cheated" [,]]
,
[If "trait_smitten" [,,,]]
,,,,,
Jump to witch_2_cabin_menu
],Choice - [[Approach the mirror.]
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
[If "trait_smitten" [,]]
,
[If "witch_1_cabin_mirror_approached" [
[If "trait_cheated" [,]]
,
[Else [,]]
]]
,
[Else [
[If "trait_cheated" [,]]
]]
,
Assign "current_run_mirror_touched" = Val (Bool True)
,
{Choice Branch: [Choice - [[Wipe the mirror clean.]
[,
[If "witch_2_mirror_comment" [,]]
,
[Else [,]]
,
[If "trait_smitten" [,]]
,
[Else [,]]
,,,,,
{Choice Branch: [Choice - [[Enter the basement.]
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,
Jump to witch_2_stairs
]]}
]]}
]]}
]}
]}
,
{Label: witch_2_stairs
[,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,
[If "trait_smitten" [,]]
,
[Else [,,,]]
,,,
[If "loop_1_locked" [,]]
,
[Elif Var "current_mutual_death" == Val (Int 1) [,]]
,
[Else [,]]
,,,
{Label: witch_2_stairs_menu
[,
{Choice Branch: [Choice - (Explore) ''I want to figur...If Var "witch_2_stairs_menu_explore" == Val (Bool False) []
[
Jump to witch_2_stairs_join
],Choice - (Explore) ''I don't know wh...If Var "witch_2_stairs_menu_explore" == Val (Bool False) []
[
Jump to witch_2_stairs_join
],Choice - (Explore) ''I want to free ...If Var "witch_2_stairs_menu_explore" == Val (Bool False) []
[
Jump to witch_2_stairs_join
],Choice - (Explore) ''I just want to ...If Var "witch_2_stairs_menu_explore" == Val (Bool False) []
[
{Label: witch_2_stairs_join
[
Assign "witch_2_stairs_menu_explore" = Val (Bool True)
,,,
Jump to witch_2_stairs_menu
]}
],Choice - [[Proceed down the stairs.]
[
Jump to witch_2_basement
]]}
]}
]}
,
{Label: witch_2_basement
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
]}
,
{Label: witch_2_basement_menu
[,,,,,,,,
[If "blade_held" [
[If "trait_smitten" [,,,,,,,]]
,
[Else [,,,,,,,]]
,,,,,
[If "trait_smitten" [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,,]]
,
{Choice Branch: [Choice - (Explore) ''Yeah. I'm here ...If Var "witch_2_player_hostile" == Val (Bool False) && Var "witch_2_menu_count" == Val (Int 0) && Var "blade_held" == Val (Bool False) && Var "witch_2_intro" == Val (Bool False) []
[
Assign "witch_2_menu_count" += Val (Int 1)
,
Assign "witch_2_player_hostile" = Val (Bool True)
,,,,,,,,,,,,,,,
[If "trait_smitten" [,,,]]
,
[If "trait_cheated" [,,,,,]]
,
Jump to witch_2_basement_menu
],Choice - (Explore) ''I'm not here to...If Var "witch_2_player_hostile" == Val (Bool False) && Var "blade_held" == Val (Bool False) && Var "witch_2_intro" == Val (Bool False) []
[
Assign "witch_2_intro" = Val (Bool True)
,
Assign "witch_2_menu_count" += Val (Bool True)
,,,,,,,,,,,,,,,
Jump to witch_2_basement_menu
],Choice - (Explore) ''You're not the ...If "witch_2_intro" && Var "witch_2_follow" == Val (Bool False) && Var "witch_2_player_hostile" == Val (Bool False) && Var "blade_held" == Val (Bool False) []
[
Assign "witch_2_follow" = Val (Bool True)
,
Assign "witch_2_menu_count" += Val (Int 1)
,,,,,,,,,,,,,,,,,,,
Jump to witch_2_basement_menu
],Choice - (Explore) ''I can cut you f...If Var "witch_2_intro" == Val (Bool False) && Var "blade_held" == Val (Bool False) []
[
Assign "witch_2_intro" = Val (Bool True)
,
Assign "witch_2_menu_count" += Val (Int 1)
,
[If "witch_2_player_hostile" [,,,,,]]
,
[Else [,,,,,]]
,
Jump to witch_2_basement_menu
],Choice - (Explore) ''Is there nothin...If Var "blade_held" == Val (Bool False) && Var "witch_2_what_say" == Val (Bool False) && Var "witch_2_menu_count" >= Val (Int 1) && Var "witch_2_ask_approve" == Val (Bool False) []
[
Assign "witch_2_what_say" = Val (Bool True)
,
Assign "witch_2_menu_count" += Val (Int 1)
,
[If "witch_2_player_hostile" [,,,,,,,,,,,,
[If "trait_cheated" [,]]
,
[Else [,]]
]]
,
[Else [,,,,,,,,
[If "trait_smitten" [,]]
,
[Else [,,,]]
]]
,
Jump to witch_2_basement_menu
],Choice - (Explore) ''Then maybe it's...If Var "blade_held" == Val (Bool False) && "witch_2_what_say" && Var "witch_2_player_hostile" == Val (Bool False) && Var "witch_2_ask_approve" == Val (Bool False) []
[
Assign "witch_2_menu_count" += Val (Int 1)
,
Jump to witch_2_take_blade_join
],Choice - (Explore) ''Can I take the ...If "witch_2_follow" && Var "blade_held" == Val (Bool False) && Var "witch_2_blade_ask" == Val (Bool False) && Var "witch_2_player_hostile" == Val (Bool False) []
[,
Assign "witch_2_ask_approve" = Val (Bool True)
,
Assign "witch_2_blade_ask" = Val (Bool True)
,
Assign "witch_2_menu_count" += Val (Int 1)
,,,,,,,,,,,,,,,
Jump to witch_2_basement_menu
],Choice - (Explore) [[Reach for the b...If Var "blade_held" == Val (Bool False) && Var "witch_2_blade_hostile_attempt" == Val (Bool False) []
[
Assign "witch_2_menu_count" += Val (Int 1)
,
[If "witch_2_follow" || "witch_2_blade_ask" [
{Label: witch_2_take_blade_join
[
[If "witch_2_blade_attempt" [
Assign "witch_2_blade_attempt" = Val (Bool True)
,,,,,,,,]]
,
[Else [
Assign "witch_2_blade_attempt" = Val (Bool True)
,,,,,,,,]]
,,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blood")
,,,,,,,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,
Jump to witch_2_basement_menu
]}
]]
,
[Else [
[If Var "witch_2_blade_attempt" == Val (Bool False) [
Assign "witch_2_blade_attempt" = Val (Bool True)
,,,,,,,,,,,,,,,,]]
,
[Else [,
Assign "witch_2_blade_hostile_attempt" = Val (Bool True)
,
Assign "witch_2_player_hostile" = Val (Bool True)
,,,,,,,,,,,,,,,,,,]]
,
Jump to witch_2_basement_menu
]]
],Choice - ''You're in a prison of you...If Var "blade_held" == Val (Bool False) []
[
Jump to witch_2_leave
],Choice - ''I guess I don't have anyt...If Var "blade_held" == Val (Bool False) []
[
Jump to witch_2_leave
],Choice - ''Fine. If you're going to ...If Var "blade_held" == Val (Bool False) []
[
Jump to witch_2_leave
],Choice - [[Cut her free.]If "blade_held" []
[
Jump to witch_2_free
],Choice - [[Slay the Princess.]If "blade_held" []
[
Jump to witch_2_slain
],Choice - ''I just wanted my blade ba...If "blade_held" []
[
Jump to witch_2_leave
]]}
]}
,
{Label: witch_2_slain
[,
[If "trait_smitten" [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "trait_smitten" [,]]
,
[If "trait_cheated" [,]]
,,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "thorn_end" = Val (String "slay_attempt")
,
Assign "princess_deny" += Val (Int 1)
,
Assign "princess_kept" += Val (Int 1)
,
Jump to mirror_start
]}
,
{Label: witch_2_free
[,,,,,,
[If "trait_smitten" [,,,,,,,,,]]
,
[Else [,,,,,]]
,,,,,,,,,,,,,,,,,,,,
[If "trait_smitten" [,,,]]
,
[Else [,,,]]
,,,,,,,,,,,,,,
[If "trait_smitten" [,,]]
,
{Choice Branch: [Choice - ''Of course I did.''
[
{Label: witch_2_free_join
[,,,,
[If "trait_smitten" && Var "witch_2_kiss" == Val (Bool False) [,]]
]}
],Choice - ''I just really hate the pe...
[,,,,
Jump to witch_2_free_join
],Choice - [[Kiss her.]If "trait_smitten" []
[,
Assign "witch_2_kiss" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to witch_2_no_smile_join
],Choice - [[Remain silent.]
[
{Label: witch_2_no_smile_join
[,,,]}
]]}
,,,,,,,,,,,,,,,,
[If "trait_smitten" [,]]
,
[Else [,]]
,,,,,,,
{Choice Branch: [Choice - [[Cut into the thorns.]
[,,,,,,,],Choice - [[Step into the thorns.]
[,,,,,,]]}
,,,,,,,,,,,,,,
[If "trait_cheated" [,]]
,
[If "trait_smitten" [
[If "witch_2_kiss" [,]]
,
[Else [,]]
,,]]
,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Step into your freedom.]
[,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
[If "witch_2_kiss" [
Assign "thorn_end" = Val (String "free_kiss")
,
Assign "princess_satisfy" += Val (Int 1)
]]
,
[Else [
Assign "thorn_end" = Val (String "free")
]]
,
Assign "princess_free" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 1)
,
Jump to mirror_start
]]}
]}
,
{Label: witch_2_leave
[
[If "blade_held" [,,,]]
,
[Else []]
,,,,,,,,,,,,
[If "blade_held" [,]]
,
[Else []]
,,,,,
[If Var "blade_held" == Val (Bool False) [,,,]]
,
[Else [,]]
,,,,
[If "trait_smitten" [,,,
[If "blade_held" [,]]
,,,]]
,
[Else [,,,,,
[If "blade_held" [,]]
,]]
,
[If "blade_held" [,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "thorn_end" = Val (String "abandoned")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_deny" += Val (Int 1)
,
Jump to mirror_start
]]
,
[Else [,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "trait_smitten" [,]]
,,,,,,,
[If "trait_cheated" [,]]
,,,,,,,,
{Choice Branch: [Choice - [[Rush for the blade.]
[,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "thorn_end" = Val (String "stuck_together")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_deny" += Val (Int 1)
,
Jump to mirror_start
],Choice - [[Do nothing.]
[,,,,,,,,,,,,,,
[If "trait_smitten" [,,,]]
,
[Else [,,,,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "thorn_end" = Val (String "stuck")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_deny" += Val (Int 1)
,
Jump to mirror_start
]]}
]]
]}
,
{Label: fury_start
[,,,
Assign "default_mouse" = Val (String "default")
,
Assign "blade_held" = Val (Bool False)
,
Assign "current_loop" = Val (Int 2)
,
Assign "quick_menu" = Val (Bool False)
,
Assign "config.menu_include_disabled" = Val (Bool False)
,,,,,,,
Assign "current_princess" = Val (String "fury")
,
Assign "fury_encountered" = Val (Bool True)
,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
[If Var "fury_source" == Val (String "tower") [
[If "tower_1_cabin_mirror_ask" || "tower_1_cabin_mirror_approached" [
Assign "fury_mirror_previous_comment_made" = Val (Bool True)
]]
,
Jump to fury_start_tower
]]
,
[Else [
[If "adversary_1_cabin_mirror_ask" || "adversary_1_cabin_mirror_approached" [
Assign "fury_mirror_previous_comment_made" = Val (Bool True)
]]
,
[If Var "fury_source" == Val (String "pacifism") [
Jump to fury_start_pacifism
]]
,
[Elif Var "fury_source" == Val (String "unarmed") [
Jump to fury_start_death_unarmed
]]
,
[Else [
Jump to fury_start_adversary_other
]]
]]
]}
,
{Label: fury_start_tower
[
Assign "trait_stubborn" = Val (Bool True)
,
Assign "trait_broken" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to fury_start_late_join
]}
,
{Label: fury_start_pacifism
[
Assign "trait_stubborn" = Val (Bool True)
,
Assign "trait_cold" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to fury_path_menu
]}
,
{Label: fury_start_death_unarmed
[
Assign "trait_stubborn" = Val (Bool True)
,
[If Var "fury_unarmed_sub" == Val (String "broken") [
Assign "trait_broken" = Val (Bool True)
]]
,
[Else [
Assign "trait_contrarian" = Val (Bool True)
]]
,,,,,,
[If "trait_contrarian" [,,,,,,
[If "adversary_1_face_missing_explore" [,,,,,]]
,,,,,,]]
,
[Else [,,,,
Jump to fury_death_start_join
]]
,
Jump to fury_start_join
]}
,
{Label: fury_start_adversary_other
[
Assign "trait_stubborn" = Val (Bool True)
,
Assign "trait_broken" = Val (Bool True)
,,,,
[If "adversary_1_cabin_blade_taken" [,,,]]
,
[Else [,,,]]
,,,
{Label: fury_death_start_join
[,]}
]}
,
{Label: fury_start_join
[,,,,
[If "trait_contrarian" [,]]
,
[Else [,,,]]
,
[If Var "fury_source" != Val (String "tower") [,]]
,
{Label: fury_start_late_join
[,]}
]}
,
{Label: fury_path_menu
[,,,
{Choice Branch: [Choice - (Explore) It feels like I'm...If Var "fury_path_menu_pulled" == Val (Bool False) []
[
Assign "fury_path_menu_pulled" = Val (Bool True)
,
[If "trait_broken" && Var "fury_source" != Val (String "tower") [,]]
,
[If "trait_contrarian" [,]]
,
[If Var "fury_source" == Val (String "tower") [,,,,,,,,,,,,,,,,,]]
,
[Elif "trait_cold" [,,,,,,,,,]]
,
[Else [,]]
,
Jump to fury_path_menu
],Choice - (Explore) If we hit this 'p...If Var "fury_path_menu_brinksmanship" == Val (Bool False) []
[
Assign "fury_path_menu_brinksmanship" = Val (Bool True)
,,,,,,,
[If "trait_contrarian" [,,,]]
,
[Elif "trait_cold" [,,,,,,,]]
,
[Else [,,,]]
,
Jump to fury_path_menu
],Choice - No matter what happens next...
[
Jump to fury_cabin_exterior
],Choice - [[Silently proceed to the c...
[
Jump to fury_cabin_exterior
],Choice - I'm done with this. Bye! [[...If "mound_can_attempt_flee" []
[
[If Var "loops_finished" >= Val (Int 2) [
Assign "mound_can_attempt_flee" = Val (Bool False)
,,,
Jump to fury_path_menu
]]
,
Assign "caught_origin_current" = Val (String "fury")
,
Assign "caught_origin_ch3" = Val (Bool True)
,
[If "trait_contrarian" [,]]
,,,
Jump to caught_start
]]}
]}
,
{Label: fury_cabin_exterior
[,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,
[If "trait_contrarian" [,]]
,
[Elif Var "fury_source" == Val (String "tower") [,,,]]
,
[Else [,]]
,
{Choice Branch: [Choice - [[Proceed into the cabin.]
[,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,
Jump to fury_cabin_interior
]]}
]}
,
{Label: fury_cabin_interior
[,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,
[If Var "fury_source" == Val (String "tower") [,]]
,
[Elif "trait_contrarian" [,]]
,
[Elif "trait_cold" [,,,,,]]
,
[Else [,]]
,,,,,
[If "trait_contrarian" [,,
[If Var "adversary_1_cabin_blade_taken" == Val (Bool False) [,]]
,
[Else [,]]
]]
,
{Label: fury_cabin_interior_menu
[,,,
{Choice Branch: [Choice - (Explore) It's that mirror ...If Var "fury_mirror_comment" == Val (Bool False) []
[
Jump to fury_no_door_join
],Choice - (Explore) You didn't mentio...If Var "fury_mirror_comment" == Val (Bool False) []
[
Jump to fury_no_door_join
],Choice - (Explore) How are we suppos...If Var "fury_mirror_comment" == Val (Bool False) []
[
{Label: fury_no_door_join
[
Assign "fury_mirror_comment" = Val (Bool True)
,
[If "current_run_mirror_comment" [,,,
[If "trait_contrarian" [
[If Var "blade_held" == Val (Bool False) [,]]
,
[Else [,]]
]]
,
[Else [,,
[If "trait_cold" [,]]
]]
]]
,
[Else [
[If Var "blade_held" == Val (Bool False) [,]]
,
[Else [,]]
,
[If "trait_contrarian" [,,,,,]]
,
[Else [,,
[If "trait_cold" [,]]
]]
]]
,,,,,
[If "trait_broken" [,,,]]
,
[Else [,]]
,
[If "current_run_mirror_touched" [,]]
,
[Else [,]]
,
Jump to fury_cabin_interior_menu
]}
],Choice - (Explore) [[Take the blade.]If Var "fury_blade_taken" == Val (Bool False) []
[
Assign "fury_blade_taken" = Val (Bool True)
,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,,,,
[If "trait_contrarian" [,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,
{Choice Branch: [Choice - ''No. We absolutely did not...
[,,,,
Jump to fury_pristine_toss_join
],Choice - ''Hey, I thought I was the ...
[,,
Jump to fury_pristine_toss_join
],Choice - ''So, what, you can all jus...
[,,
{Label: fury_pristine_toss_join
[,]}
],Choice - Hell yeah, that kicked ass....
[
Jump to fury_pristine_toss_join
],Choice - [[Let it go.]
[
Jump to fury_pristine_toss_join
]]}
]]
,
Jump to fury_cabin_interior_menu
],Choice - [[Approach the mirror.]
[,,,,,,,,,,,
[If "fury_mirror_comment" [,]]
,
[Else [,,,]]
,
[If "current_run_mirror_touched" [,]]
,
[Else [,,
[If "fury_mirror_comment" [,,,]]
,
[Else [,,,,,,,]]
]]
,
[If Var "fury_source" == Val (String "tower") [,,,,,]]
,
[Else [
[If "trait_contrarian" [,]]
,,,,,
[If "trait_cold" [,]]
]]
,
Assign "current_run_mirror_touched" = Val (Bool True)
,,,
{Choice Branch: [Choice - [[Wipe the mirror clean.]
[,,,,,,,,,,,,,],Choice - [[Smash it.]
[,,,,,,,,,,,,,,,,,]]}
,
[If "current_run_mirror_touched" [,]]
,
[Else [,,,]]
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,]]}
]}
]}
,
{Label: fury_stairs
[,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,
[If Var "fury_source" == Val (String "tower") [,,,,,,,,,,,,,,
[If "tower_self_knowledge" [,]]
,
[Else [,]]
,,]]
,
[Elif Var "fury_source" == Val (String "pacifism") || Var "fury_source" == Val (String "death_downstairs") [,,,,,,
[If "trait_contrarian" [,]]
,
[Elif "trait_cold" [,]]
,
[If "trait_broken" [
Jump to fury_broken_intro
]]
]]
,
[Else [
[If Var "fury_source" == Val (String "unarmed") || Var "fury_unarmed_sub" == Val (String "broken") [,,,]]
,
[Else [,,,]]
,,,
[If "trait_broken" [
{Label: fury_broken_intro
[,]}
]]
,
[Else [,]]
]]
,
{Choice Branch: [Choice - [[Continue down the stairs.]
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,]]}
,,,,
[If "trait_broken" && Var "fury_source" != Val (String "tower") [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If Var "fury_source" == Val (String "tower") [,,,]]
,
[Elif "trait_contrarian" [,,,]]
,
[Elif "trait_cold" [,,,,,,,]]
,
[Else [,]]
,
[If Var "fury_blade_taken" == Val (Bool False) [,,,]]
,,,,
{Choice Branch: [Choice - ''Given up on destroying th...If Var "fury_source" == Val (String "tower") && "tower_self_knowledge" []
[,,,
Jump to fury_no_fight_end
],Choice - ''What happened to you?''
[,
[If Var "fury_source" == Val (String "tower") [,]]
,
[Else [,]]
,
Jump to fury_no_fight_end
],Choice - ''Wait! We don't have to do...
[,
[If Var "fury_source" == Val (String "tower") [,]]
,
[Else [,]]
,
Jump to fury_no_fight_end
],Choice - ''I'm sorry, okay? I'm sorr...
[,,
Assign "fury_early_sorry" = Val (Bool True)
,
[If Var "fury_source" == Val (String "tower") [,,,]]
,
[Else [,,,]]
,
Jump to fury_no_fight_end
],Choice - ''Please just listen to me!''
[,
[If Var "fury_source" == Val (String "tower") [,]]
,
[Else [,]]
,
{Label: fury_no_fight_end
[,,,,,,,,,,
Jump to fury_mirror
]}
],Choice - ''This isn't over until I s...If Var "fury_source" == Val (String "unarmed") []
[
Jump to fury_claim_charge_join
],Choice - ''I'm going to end you.'' [...If "blade_held" && Var "fury_source" != Val (String "pacifism") []
[
{Label: fury_claim_charge_join
[,,
Jump to fury_blade_charge_join
]}
],Choice - [[Slay the Princess.]If "blade_held" && Var "fury_source" != Val (String "pacifism") []
[
{Label: fury_blade_charge_join
[,,,,,,,,,,,,,
Jump to fury_mirror
]}
],Choice - [[Round three.]If Var "fury_source" == Val (String "unarmed") []
[
Jump to fury_blade_charge_join
],Choice - [[Fight back.]If Var "blade_held" == Val (Bool False) && Var "fury_source" != Val (String "unarmed") []
[,,,,,,,,,,,,,
Jump to fury_mirror
],Choice - [[Let her end you.]
[,
[If "blade_held" [
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,]]
,
[Else [,,,,,,,,]]
,
Jump to fury_mirror
]]}
]}
,
{Label: fury_mirror
[,
[If Var "fury_source" != Val (String "tower") && "blade_held" [
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,]]
,,,,,,,,
Jump to fury_pristine
]}
,
{Label: grey_start
[,,,
Assign "default_mouse" = Val (String "default")
,
Assign "blade_held" = Val (Bool False)
,
Assign "current_loop" = Val (Int 3)
,
Assign "quick_menu" = Val (Bool False)
,
Assign "config.menu_include_disabled" = Val (Bool False)
,
Assign "grey_encountered" = Val (Bool True)
,,,,,,,,,,,
[If Var "current_princess" == Val (String "damsel") [
Assign "grey_source" = Val (String "damsel")
,
Assign "current_princess" = Val (String "greydamsel")
,
Assign "trait_cold" = Val (Bool True)
,
Assign "trait_smitten" = Val (Bool True)
,
[If "damsel_1_cabin_mirror_ask" || "damsel_1_cabin_mirror_approached" [
Assign "grey_mirror_previous" = Val (Bool True)
]]
,
[If "damsel_1_cabin_mirror_approached" [
Assign "grey_mirror_touch_prev" = Val (Bool True)
]]
,,,,,,,,,,,]]
,
[Else [,,,,
Assign "grey_source" = Val (String "prisoner")
,
Assign "trait_cold" = Val (Bool True)
,
Assign "current_princess" = Val (String "greyprisoner")
,
Assign "trait_skeptic" = Val (Bool True)
,
[If "prisoner_1_cabin_mirror_ask" || "prisoner_1_cabin_mirror_approached" [
Assign "grey_mirror_previous" = Val (Bool True)
]]
,
[If "prisoner_1_cabin_mirror_approached" [
Assign "grey_mirror_touch_prev" = Val (Bool True)
]]
,,,,,]]
,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,
[If "trait_skeptic" [,,,,,,,]]
,
[Else [,,,,,,,,,,,,,]]
,,,,,,,
[If "trait_skeptic" [
[If "prisoner_1_forest_share_loop_insist" [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,
[If "prisoner_heart_stop" [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,,]]
,
[Else [,,,,,,,,,,,,,,,,,,,,,,,,,,,,]]
]}
,
{Label: grey_woods_menu
[,,,
{Choice Branch: [Choice - (Explore) It's raining. It ...If "trait_skeptic" && Var "grey_woods_different" == Val (Bool False) []
[,,
Jump to grey_woods_different_join
],Choice - (Explore) We haven't talked...If Var "grey_woods_different" == Val (Bool False) []
[
{Label: grey_woods_different_join
[
Assign "grey_woods_different" = Val (Bool True)
,,,
[If "trait_skeptic" [,,,,,,,,,,,,,,,]]
,
[Else [,,,,,,,,,,,,,,,]]
,
Jump to grey_woods_menu
]}
],Choice - (Explore) What happens if w...If Var "grey_woods_no_cabin" == Val (Bool False) []
[
Assign "grey_woods_no_cabin" = Val (Bool True)
,,,
[If "trait_skeptic" [,]]
,
[Else [,,,]]
,,,
Jump to grey_woods_menu
],Choice - (Explore) I'm the one in ch...If "trait_smitten" && Var "grey_woods_charge" == Val (Bool False) []
[
Assign "grey_woods_charge" = Val (Bool True)
,,,,,,,,,
Jump to grey_woods_menu
],Choice - (Explore) I'll have you kno...If "prisoner_heart_stop" && Var "grey_woods_charge" == Val (Bool False) []
[
Assign "grey_woods_charge" = Val (Bool True)
,,,,,,,,,,,
Jump to grey_woods_menu
],Choice - Whatever happens next, it s...
[
Jump to grey_cabin_exterior
],Choice - I'm done with this. Bye! [[...If "mound_can_attempt_flee" []
[
[If Var "loops_finished" >= Val (Int 2) [
Assign "mound_can_attempt_flee" = Val (Bool False)
,,,
Jump to grey_woods_menu
]]
,
Assign "caught_origin_ch3" = Val (Bool True)
,
[If "trait_skeptic" [,]]
,
[Else [,]]
,,,,,,,
Assign "quick_menu" = Val (Bool False)
,
[If Var "grey_source" == Val (String "prisoner") [,,,,,]]
,
[Else [,,,,]]
,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,
[If "trait_skeptic" [,,,]]
,
[Else [,,,]]
,,,,,,,,,,,,,,,,,,,
Jump to caught_late_join
]]}
]}
,
{Label: grey_cabin_exterior
[
Assign "quick_menu" = Val (Bool False)
,
[If Var "grey_source" == Val (String "prisoner") [,,,,,,,,,,,,]]
,
[Else [,,,,,,,,,,,]]
,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,
[If "trait_skeptic" [,,,,,,,,,,,,,,,,,,,,,,,,,]]
,
[Else [,,,,,,,,,,,,,,,]]
,,,
{Choice Branch: [Choice - [[Proceed into the cabin.]
[
[If Var "grey_source" == Val (String "prisoner") []]
,,,,,,,,,,,,,,
Jump to grey_cabin
]]}
]}
,
{Label: grey_cabin
[
[If Var "grey_source" == Val (String "prisoner") [,,,,,,]]
,
[Else [,,,,,,]]
,,
[If "trait_skeptic" [,,,]]
,
[Else [,,,]]
,,,
[If "trait_smitten" [,,,]]
,
[Else [,,,,,]]
,,,,,
[If "grey_mirror_previous" [,,
[If "trait_skeptic" [,]]
,
[Else [,]]
]]
,
[Else [,]]
,,,,,,
[If "prisoner_decapitate" [,]]
,
[Else [,]]
,
[If "trait_skeptic" [,,,]]
,
[Else [,]]
,,,
{Label: grey_cabin_mirror
[,
{Choice Branch: [Choice - (Explore) ''But there is no...If Var "grey_no_door" == Val (Bool False) []
[
Assign "grey_no_door" = Val (Bool True)
,
[If "trait_skeptic" [
[If "grey_mirror_previous" [
[If "grey_mirror_touch_prev" [,]]
,
[Else [,]]
]]
,
[Else [,]]
]]
,
[Else [,]]
,,,
Jump to grey_cabin_mirror
],Choice - [[Approach the mirror.]
[,,,,,
[If "trait_skeptic" []]
,
[Else []]
,,,,
[If "grey_mirror_touch_prev" [,,,,
[If "trait_skeptic" [,]]
]]
,
[Else [,]]
,
{Choice Branch: [Choice - [[Wipe the mirror clean.]
[
[If "trait_smitten" [,]]
,,,,,,
[If "trait_skeptic" [,]]
,,,,,
[If "trait_smitten" [,]]
,,,
{Choice Branch: [Choice - [[Enter the basement.]
[,
Assign "quick_menu" = Val (Bool False)
,,,,
Jump to grey_stairs
]]}
]]}
]]}
]}
]}
,
{Label: grey_stairs
[
Assign "current_run_mirror_comment" = Val (Bool True)
,
[If "trait_skeptic" [,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,]]
,
[Else [,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,]]
,,,
[If "trait_skeptic" [,]]
,
[Else [,]]
,,,,
[If "trait_skeptic" [,]]
,
[Else [,]]
,,,,,
{Label: grey_stairs_menu
[,
{Choice Branch: [Choice - (Explore) ''I'm sorry about...If Var "grey_stairs_menu_explore" == Val (Bool False) []
[
{Label: grey_stairs_menu_explore_join
[
Assign "grey_stairs_menu_explore" = Val (Bool True)
,,,
{Label: grey_stairs_late_join
[,,
[If "trait_smitten" [,]]
,
[Else [,]]
,,,,]}
,
Jump to grey_stairs_menu
]}
],Choice - (Explore) ''Is anyone there?''If Var "grey_stairs_menu_explore" == Val (Bool False) []
[
Jump to grey_stairs_menu_explore_join
],Choice - (Explore) ''I think we have...If Var "grey_stairs_menu_explore" == Val (Bool False) []
[
Jump to grey_stairs_menu_explore_join
],Choice - (Explore) ''I don't have a ...If Var "grey_stairs_menu_explore" == Val (Bool False) []
[
Assign "grey_stairs_menu_explore" = Val (Bool True)
,,,
Jump to grey_stairs_late_join
],Choice - [[Proceed down the stairs.]
[
Jump to grey_basement
]]}
]}
]}
,
{Label: grey_basement
[
Assign "quick_menu" = Val (Bool False)
,
[If "trait_skeptic" [,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,]]
,
[Else [,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,]]
,,,,,
[If "trait_smitten" [,,,,,,,,,,,,,,,,]]
,
[Else [,,,,,,,,,,,,,,,,,,,]]
,,,,,,,,,
[If "trait_smitten" [,]]
,
[Else [,]]
,,,
[If Var "grey_source" == Val (String "damsel") [,,,,,,,,,,
Jump to grey_damsel
]]
,
[Else [,,,
[If "prisoner_decapitate" [,]]
,,
Jump to grey_prisoner
]]
]}
,
{Label: grey_damsel
[,,,,,,,,,,,,,,,,,,,,,,,
{Label: grey_damsel_menu
[,,,,,,,,,,
Assign "grey_death_timer" += Val (Int 1)
,
[If Var "grey_death_timer" == Val (Int 1) [,,,,,,,,,,,,,,]]
,
[Elif Var "grey_death_timer" == Val (Int 2) [,,,,,,,]]
,
[Elif Var "grey_death_timer" == Val (Int 3) [
Assign "quick_menu" = Val (Bool False)
,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,
Jump to grey_damsel_end
]]
,
{Choice Branch: [Choice - (Explore) ''Why did you clo...If Var "grey_damsel_close_explore" == Val (Bool False) []
[
Assign "grey_damsel_close_explore" = Val (Bool True)
,,,,,
[If Var "grey_damsel_together_explore" == Val (Bool False) [
{Label: grey_damsel_together_explore_join
[
Assign "grey_damsel_together_explore" = Val (Bool True)
,,,,,,,
Jump to grey_damsel_menu
]}
]]
],Choice - (Explore) ''Let me out! Are...If Var "grey_damsel_let_out_explore" == Val (Bool False) []
[
Assign "grey_damsel_let_out_explore" = Val (Bool True)
,,,,,
[If Var "grey_damsel_together_explore" == Val (Bool False) [
Jump to grey_damsel_together_explore_join
]]
,
Jump to grey_damsel_menu
],Choice - (Explore) ''I'm going to bu...If Var "grey_damsel_burn_explore" == Val (Bool False) []
[
Assign "grey_damsel_burn_explore" = Val (Bool True)
,,,,,,,
Jump to grey_damsel_menu
],Choice - (Explore) ''What's wrong wi...If Var "grey_damsel_want_explore" == Val (Bool False) && "grey_damsel_together_explore" []
[
Assign "grey_damsel_want_explore" = Val (Bool True)
,,,,,
[If Var "grey_damsel_grudge_explore" == Val (Bool False) [
{Label: grey_damsel_grudge_explore_join
[
Assign "grey_damsel_grudge_explore" = Val (Bool True)
,,,,]}
]]
,
Jump to grey_damsel_menu
],Choice - (Explore) ''Please! I'm beg...If Var "grey_damsel_beg_explore" == Val (Bool False) && "grey_damsel_together_explore" []
[
Assign "grey_damsel_beg_explore" = Val (Bool True)
,,,,,
[If Var "grey_damsel_grudge_explore" == Val (Bool False) [
Jump to grey_damsel_grudge_explore_join
]]
,
Jump to grey_damsel_menu
],Choice - (Explore) ''Are you mad at ...If Var "grey_damsel_mad_explore" == Val (Bool False) []
[
Assign "grey_damsel_mad_explore" = Val (Bool True)
,,,,,
[If Var "grey_damsel_grudge_explore" == Val (Bool False) [
Jump to grey_damsel_grudge_explore_join
]]
,
Jump to grey_damsel_menu
],Choice - [[Rush for the blade.]
[
Assign "grey_rush" = Val (String "blade")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to grey_damsel_end
],Choice - [[Rush to the door.]
[
Assign "grey_rush" = Val (String "door")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to grey_damsel_end
]]}
,
{Label: grey_damsel_end
[,,,
[If "grey_dams_knife_var" []]
,
[Else []]
,,,,,,
[If "grey_dams_knife_var" []]
,
[Else []]
,,,,,,,,,,,,,,,,,,,,,,
[If "grey_dams_knife_var" []]
,
[Else []]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "grey_end" = Val (String "burn")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 1)
,
Jump to mirror_start
]}
]}
]}
,
{Label: grey_prisoner
[
{Label: grey_prisoner_menu
[
Assign "grey_death_timer" += Val (Int 1)
,
[If Var "grey_death_timer" == Val (Int 1) [,,,,,,,,,,,,,,,,]]
,
[Elif Var "grey_death_timer" == Val (Int 2) [,,,,,,,,,,,,,,,,,,]]
,
[Elif Var "grey_death_timer" == Val (Int 3) [,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to grey_prisoner_end
]]
,,,,,,,,
{Choice Branch: [Choice - (Explore) ''Why did you clo...If Var "grey_death_timer" == Val (Int 0) && Var "grey_prisoner_why" == Val (Bool False) []
[
Assign "grey_prisoner_why" = Val (Bool True)
,
Jump to grey_prisoner_menu
],Choice - (Explore) ''Let me out! Are...If Var "grey_prisoner_kill_ask" == Val (Bool False) []
[
Assign "grey_prisoner_kill_ask" = Val (Bool True)
,
[If Var "grey_death_timer" == Val (Int 1) [,,,]]
,
Jump to grey_prisoner_menu
],Choice - (Explore) ''I'm going to dr...If Var "grey_prisoner_drown" == Val (Bool False) && "grey_death_timer" []
[
Assign "grey_prisoner_drown" = Val (Bool True)
,
[If Var "grey_death_timer" == Val (Int 1) [,,,]]
,
Jump to grey_prisoner_menu
],Choice - (Explore) ''What's wrong wi...If Var "grey_prisoner_wrong" == Val (Bool False) []
[
Assign "grey_prisoner_wrong" = Val (Bool True)
,
[If Var "grey_death_timer" == Val (Int 1) [,,,]]
,
Jump to grey_prisoner_menu
],Choice - (Explore) ''I didn't even k...If Var "grey_prisoner_even" == Val (Bool False) && "prisoner_decapitate" []
[
Jump to grey_prisoner_even_join
],Choice - (Explore) ''I only killed y...If Var "grey_prisoner_even" == Val (Bool False) && Var "prisoner_decapitate" == Val (Bool False) []
[
{Label: grey_prisoner_even_join
[
Assign "grey_prisoner_even" = Val (Bool True)
,
[If Var "grey_death_timer" == Val (Int 1) [,,,]]
,
Jump to grey_prisoner_menu
]}
],Choice - (Explore) ''Please! I'm beg...If Var "grey_prisoner_beg" == Val (Bool False) []
[
Assign "grey_prisoner_beg" = Val (Bool True)
,
[If Var "grey_death_timer" == Val (Int 1) [,,,]]
,
Jump to grey_prisoner_menu
],Choice - (Explore) ''Is this about l...If Var "grey_prisoner_sorry" == Val (Bool False) []
[
Assign "grey_prisoner_sorry" = Val (Bool True)
,
[If Var "grey_death_timer" == Val (Int 1) [,,,]]
,
Jump to grey_prisoner_menu
],Choice - [[Rush for the blade.]
[
Jump to grey_prisoner_rush
],Choice - [[Rush to the door.]
[
{Label: grey_prisoner_rush
[,,,,,,,
[If Var "grey_death_timer" == Val (Int 1) []]
,
[If Var "grey_death_timer" == Val (Int 1) []]
,
[If Var "grey_death_timer" == Val (Int 2) []]
,,,,,,,,,,,,,,,,,,,,,,
Jump to grey_prisoner_end
]}
]]}
]}
,
{Label: grey_prisoner_end
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If Var "prisoner_decapitate" == Val (Bool False) [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "grey_end" = Val (String "drown")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_deny" += Val (Int 1)
,
Jump to mirror_start
]}
]}
,
{Label: wild_start
[,,,
Assign "default_mouse" = Val (String "default")
,
Assign "blade_held" = Val (Bool False)
,
Assign "current_loop" = Val (Int 2)
,
Assign "quick_menu" = Val (Bool False)
,
Assign "config.menu_include_disabled" = Val (Bool False)
,,,
[If Var "current_princess" == Val (String "witch") [
Assign "wild_source" = Val (String "witch")
]]
,
[Else [
Assign "wild_source" = Val (String "beast")
]]
,
Assign "current_princess" = Val (String "wild")
,
Assign "wild_encountered" = Val (Bool True)
,
[If Var "wild_bonus_voice" == Val (String "stubborn") [
Assign "trait_stubborn" = Val (Bool True)
]]
,
[If Var "wild_bonus_voice" == Val (String "paranoid") [
Assign "trait_paranoid" = Val (Bool True)
]]
,
[If Var "wild_bonus_voice" == Val (String "cheated") [
Assign "trait_cheated" = Val (Bool True)
]]
,
[If Var "wild_bonus_voice" == Val (String "stubborn") [
Assign "trait_stubborn" = Val (Bool True)
]]
,
[If Var "wild_bonus_voice" == Val (String "broken") [
Assign "trait_broken" = Val (Bool True)
]]
,
[If Var "wild_bonus_voice" == Val (String "contrarian") [
Assign "trait_contrarian" = Val (Bool True)
]]
,
[If Var "wild_bonus_voice" == Val (String "opportunist") [
Assign "trait_opportunist" = Val (Bool True)
]]
,,,,,
Assign "default_mouse" = Val (String "eye")
,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,,,
[If "trait_contrarian" [,,,]]
,,,,,,,,,,,,,,,,,
[If Var "wild_source" == Val (String "witch") [
[If "trait_paranoid" [,,,,,]]
,
[Elif "trait_stubborn" [,,,,,,,,,]]
,
[Else [,,,]]
,,,,,,,,,,,,]]
,
[Else [
[If "trait_stubborn" [,]]
,
[Else [,]]
,,,
[If "trait_broken" || "trait_stubborn" [
[If "trait_broken" [,,,,,]]
,
[Else [,,,,,]]
,,,
[If "trait_stubborn" [,]]
]]
,
[If "trait_opportunist" || "trait_contrarian" [,,,,,,,,
[If "trait_opportunist" [,,,,,,,,,,,,,]]
,
[Else [,]]
]]
,,]]
,,,,,,,
[If "trait_contrarian" [,,,,,]]
,
[Elif "trait_broken" [,,,,,]]
]}
,
{Label: wild_menu_1
[,,,
{Choice Branch: [Choice - (Explore) ''This... thing w...If Var "wild_menu_what_narrator" == Val (Bool False) []
[
Assign "wild_menu_what_narrator" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to wild_menu_1
],Choice - ''I've had enough of this g...If "wild_menu_what_narrator" []
[
Jump to wild_princess_join
],Choice - ''Okay. Let's say I want to...If "wild_menu_what_narrator" []
[
Jump to wild_menu_narrator_push_1_join
],Choice - [[Passively exist.]If "trait_contrarian" []
[
Assign "wild_passive" = Val (Bool True)
,
{Label: wild_menu_1_narrator_join
[
[If "trait_contrarian" [,]]
,,,
[If Var "wild_source" == Val (String "witch") [,,
{Label: wild_dissonance_witch_early_join
[,,
{Label: wild_dissonance_witch_join
[,,,,,,,,]}
]}
]]
,
[Else [
{Label: wild_dissonance_beast_early_join
[,,
{Label: wild_dissonance_beast_join
[,,,,,,,,]}
]}
]]
,,,,,,,,,,
[If Var "wild_source" == Val (String "witch") [,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "trait_cheated" [,,,,,,,,]]
,
[If "trait_paranoid" [,,,,,,,,]]
]]
,
[Else [,,,,,,,,,,,,,,,,,,,
[If "trait_contrarian" [,,,,,,,,,,,,]]
,
[If "trait_opportunist" [,,,,,,,,]]
]]
,
[If "trait_stubborn" [,]]
,
Jump to wild_menu_2
]}
],Choice - ''Why should anyone do anyt...
[
Jump to wild_menu_1_narrator_join
],Choice - ''Why are you being nice to...If Var "wild_source" == Val (String "witch") []
[
Jump to wild_dissonance_witch_join
],Choice - ''Why are you being nice to...If Var "wild_source" == Val (String "beast") []
[
Jump to wild_dissonance_beast_join
],Choice - ''He's right! I don't want ...If "trait_contrarian" && Var "wild_menu_what_narrator" == Val (Bool False) []
[
{Label: wild_menu_narrator_push_1_join
[,,
{Label: wild_menu_1_options_join
[,,,,,,
[If Var "wild_source" == Val (String "beast") [
Jump to wild_dissonance_beast_early_join
]]
,
[Else [,,,,,,
Jump to wild_dissonance_witch_early_join
]]
]}
]}
],Choice - ''I can feel the pressure o...
[
Jump to wild_princess_join
],Choice - ''This is how we're suppose...If Var "wild_menu_what_narrator" == Val (Bool False) []
[
{Label: wild_princess_join
[
Assign "wild_2_soft" = Val (Bool True)
,,,,,,,,,
{Choice Branch: [Choice - (Explore) [[Remember how it...
[
[If Var "wild_source" == Val (String "beast") [
Jump to wild_dissonance_beast_join
]]
,
[Else [
Jump to wild_dissonance_witch_join
]]
],Choice - [[Turn inward and find your...
[
Jump to wild_side_princess
]]}
]}
],Choice - ''Whatever we are right now...
[,,,,,,,,,,,,
Jump to wild_menu_1_options_join
],Choice - ''I don't like this. I'm su...
[,,,,,,,,,,,,
Jump to wild_menu_1_options_join
],Choice - ''Okay, you, Narrator. How ...
[
Jump to wild_menu_narrator_push_1_join
],Choice - [[Do nothing.]If Var "trait_contrarian" == Val (Bool False) []
[
Assign "wild_passive" = Val (Bool True)
,
Jump to wild_menu_1_narrator_join
]]}
]}
,
{Label: wild_menu_2
[
{Choice Branch: [Choice - [[Gaze at the terror in you...If Var "wild_source" == Val (String "beast") []
[,,,,,,
Jump to wild_side_narrator
],Choice - [[Gaze at the hatred in you...If Var "wild_source" == Val (String "witch") []
[,,,,,,
Jump to wild_side_narrator
],Choice - [[Bury it. Now. Before it's...
[,,,,,,,,,,,,
{Choice Branch: [Choice - ''But the past does exist. ...
[
Jump to wild_side_narrator
],Choice - [[Turn inward and find your...
[
Jump to wild_side_princess
]]}
]]}
]}
,
{Label: wild_side_narrator
[,,,,,,,
[If Var "wild_source" == Val (String "witch") [,,
[If "trait_stubborn" [,]]
,
[If "trait_cheated" [,]]
,
[If "trait_paranoid" [,]]
,,,,]]
,
[If Var "wild_source" == Val (String "beast") [,,,,
[If "trait_stubborn" [,]]
,
[If "trait_opportunist" [,]]
,,]]
,
Assign "default_mouse" = Val (String "default")
,,,
[If "trait_contrarian" [,]]
,
[If "trait_broken" [
[If "trait_broken" [,]]
]]
,
[If Var "wild_source" == Val (String "witch") [,,,,,,,,,,]]
,
[Else [,,,,,,,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,
[If Var "wild_source" == Val (String "witch") [,,,]]
,
[Else [,,,]]
,,,
[If "trait_stubborn" [,]]
,
[If "trait_broken" [,]]
,
[If "trait_contrarian" [,]]
,
[If "trait_hunted" [,]]
,
[If "trait_paranoid" [,]]
,
[If "trait_opportunist" [,]]
,
[If "trait_cheated" [,]]
,,,,,
Assign "current_princess" = Val (String "wildwound")
,
{Choice Branch: [Choice - ''I never wanted to kill yo...
[,,
[If "trait_cheated" [,]]
,
[Elif "trait_paranoid" [,]]
,
[Else [,,,]]
,
[If "trait_cheated" || "trait_paranoid" [,]]
,
[If "trait_stubborn" [,]]
,
[Elif "trait_hunted" [,]]
,
[If "trait_opportunist" [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "trait_contrarian" [,]]
,
[If "trait_broken" [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "wild_end" = Val (String "separate")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 1)
,
Jump to mirror_start
],Choice - [[Slay the Princess.]
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "wild_end" = Val (String "slay")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_deny" += Val (Int 1)
,
Jump to mirror_start
]]}
]}
,
{Label: wild_side_princess
[,,,,,,,,,,,,
[If "trait_hunted" [,,
[If "trait_opportunist" [,]]
]]
,
[Elif "trait_opportunist" [,]]
,,,,,
[If "trait_broken" [,]]
,
[If "trait_stubborn" [,]]
,
[If "trait_contrarian" [,]]
,
[If "trait_cheated" [,]]
,,,,,,,,
{Choice Branch: [Choice - [[There is a place you need...
[,,,,,,,,,,,,,,,,,,]]}
,
[If "trait_paranoid" [,]]
,
[If "trait_hunted" [,]]
,
[If "trait_stubborn" [,]]
,
[If "trait_opportunist" [,]]
,
[If "trait_contrarian" [,]]
,,,,,
[If "trait_cheated" [,]]
,
[If "trait_broken" [,]]
,
{Choice Branch: [Choice - I trust you. [[Find the way...
[,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Shatter the cage.]
[,,,,,,,,,,
[If "trait_paranoid" [,]]
,
[If "trait_opportunist" [,,
[If "trait_stubborn" [,]]
]]
,,,,,,,,,,,,,,,,,
[If "trait_hunted" [,]]
,
[If "trait_cheated" [,]]
,
[If "trait_contrarian" [,]]
,
[If "trait_stubborn" && Var "trait_opportunist" == Val (Bool False) [,]]
,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "current_princess" = Val (String "wildnerves")
,
Assign "wild_end" = Val (String "joined")
,
Assign "princess_free" += Val (Int 2)
,
Assign "princess_satisfy" += Val (Int 1)
,
Jump to mirror_start
]]}
]]}
]}
,
{Label: wraith_start
[,,,
Assign "default_mouse" = Val (String "default")
,
Assign "blade_held" = Val (Bool False)
,
Assign "current_loop" = Val (Int 2)
,
Assign "quick_menu" = Val (Bool False)
,
Assign "config.menu_include_disabled" = Val (Bool False)
,
Assign "wraith_encountered" = Val (Bool True)
,,,,,,
[If Var "current_princess" == Val (String "nightmare") [
Assign "wraith_source" = Val (String "nightmare")
,
Assign "current_princess" = Val (String "wraith")
]]
,
[Else [
Assign "wraith_source" = Val (String "spectre")
,
Assign "current_princess" = Val (String "wraith")
]]
,
[If Var "wraith_bonus_voice" == Val (String "paranoid") [
Assign "trait_paranoid" = Val (Bool True)
]]
,
[Elif Var "wraith_bonus_voice" == Val (String "opportunist") [
Assign "trait_opportunist" = Val (Bool True)
]]
,
[Elif Var "wraith_bonus_voice" == Val (String "cold") [
Assign "trait_cold" = Val (Bool True)
]]
,
[Elif Var "wraith_bonus_voice" == Val (String "cheated") [
Assign "trait_cheated" = Val (Bool True)
]]
,
Assign "current_princess" = Val (String "wraith")
,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,
[If "trait_paranoid" [,,
[If "trait_cold" [,,,,
[If Var "wraith_source" == Val (String "nightmare") [,]]
,
[Else [,,
[If "spectre_possession_ask" [,]]
,
[Else [,,,]]
]]
,
[If Var "wraith_source" == Val (String "spectre") [,]]
]]
,
[Else [,,,,,]]
,,,,,
[If "trait_opportunist" [,]]
,
[Else [
[If Var "wraith_source" == Val (String "nightmare") [,]]
,
[Else [,]]
,,]]
,,,
{Label: wraith_start_join
[,,,,,,
[If "trait_opportunist" [,]]
,
Jump to wraith_woods_menu
]}
]]
,
[Elif "trait_cold" [,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to wraith_woods_menu
]]
]}
,
{Label: wraith_woods_menu
[,,,,,
{Choice Branch: [Choice - (Explore) ''And why should ...If Var "wraith_woods_why_help_explore" == Val (Bool False) && "trait_cold" && "trait_cheated" []
[
Assign "wraith_woods_why_help_explore" = Val (Bool True)
,,,,,,,,,
Jump to wraith_woods_menu
],Choice - (Explore) ''Are you the sam...If Var "wraith_woods_loop_explore" == Val (Bool False) []
[
Assign "wraith_woods_loop_explore" = Val (Bool True)
,
[If "trait_paranoid" [,]]
,,,
[If "trait_cheated" [,]]
,
[Elif "trait_cold" [,]]
,
[Else [,]]
,,,,,
[If "trait_cold" [,]]
,
[Else [,]]
,,,
Jump to wraith_woods_menu
],Choice - (Explore) ''We've killed he...If Var "wraith_woods_explore" == Val (Bool False) []
[
Assign "wraith_woods_explore" = Val (Bool True)
,,,,,,,
[If "trait_cheated" [,]]
,
[If "trait_opportunist" [,]]
,
[If "trait_paranoid" [,]]
,
[If "trait_cold" && "wraith_woods_loop_explore" [,]]
,
Jump to wraith_woods_menu
],Choice - (Explore) ''What happens if...If Var "wraith_woods_leave_explore" == Val (Bool False) []
[
Assign "wraith_woods_leave_explore" = Val (Bool True)
,,,
[If "trait_opportunist" [,]]
,
[Else [
[If "trait_cheated" [,]]
,,,,]]
,,,
[If "trait_paranoid" [,]]
,
[Else [,]]
,,,,,
[If "trait_cheated" [
[If "wraith_woods_explore" [,]]
,
[Else [,]]
]]
,
Jump to wraith_woods_menu
],Choice - [[Proceed to the cabin.]
[,,
Jump to wraith_cabin_arrive
],Choice - [[Turn around and leave.]If "wraith_woods_leave_explore" && "mound_can_attempt_flee" []
[
Jump to wraith_woods_leave
],Choice - ''There's something else we...If Var "wraith_woods_leave_explore" == Val (Bool False) && "mound_can_attempt_flee" []
[
{Label: wraith_woods_leave
[
[If Var "loops_finished" >= Val (Int 2) [
Assign "mound_can_attempt_flee" = Val (Bool False)
,,,
Jump to wraith_woods_menu
]]
,
Assign "caught_origin_ch3" = Val (Bool True)
,,,
[If "trait_cold" [,]]
,
[If "trait_cheated" [,]]
,
[If Var "trait_cold" == Val (Bool False) [,]]
,
[If "trait_paranoid" [,]]
,
[If "trait_opportunist" [,,,,,]]
,,,,,,,
Jump to caught_start
]}
]]}
]}
,
{Label: wraith_cabin_arrive
[,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,
[If "trait_opportunist" [,]]
,
[If "trait_paranoid" [,,,]]
,
[If "trait_cheated" [,]]
,,,
[If "trait_cold" [,]]
,
{Label: wraith_cabin_ext_menu
[,
{Choice Branch: [Choice - (Explore) ''Are you trying ...If Var "wraith_cabin_ext_explore" == Val (Bool False) []
[
Assign "wraith_cabin_ext_explore" = Val (Bool True)
,,,
[If "trait_cold" [,]]
,
[Elif "trait_paranoid" [,]]
,,,
Jump to wraith_cabin_ext_menu
],Choice - [[Enter the cabin.]
[,
Assign "quick_menu" = Val (Bool False)
,,,,,,,
Jump to wraith_cabin_interior
]]}
]}
]}
,
{Label: wraith_cabin_interior
[,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,
[If "trait_cheated" [,]]
,
[If "trait_paranoid" [
[If Var "wraith_source" == Val (String "nightmare") && "nightmare_1_cabin_mirror_ask" || "nightmare_1_cabin_mirror_approached" || Var "wraith_source" == Val (String "spectre") && "spectre_1_cabin_mirror_ask" || "spectre_1_cabin_mirror_approached" [,]]
,
[Else [,]]
]]
,
[If "trait_cold" [,]]
,
[If "trait_opportunist" [,,,,,,,,,]]
]}
,
{Label: wraith_cabin_int_menu
[,,
{Choice Branch: [Choice - (Explore) ''Let's pretend t...If Var "wraith_int_explore" == Val (Bool False) []
[
Assign "wraith_int_explore" = Val (Bool True)
,,,
[If Var "trait_paranoid" == Val (Bool False) [,]]
,
[If "trait_paranoid" [
[If Var "wraith_source" == Val (String "spectre") [,]]
,
[Else [,]]
,
[If "trait_cold" [,]]
]]
,,,
[If "trait_paranoid" [
[If Var "wraith_source" == Val (String "nightmare") [
Assign "wraith_surprise_comment" = Val (Bool True)
,,]]
]]
,
[Elif "trait_cheated" [
Assign "wraith_surprise_comment" = Val (Bool True)
,,]]
,
[If Var "wraith_source" == Val (String "nightmare") || "trait_cheated" [,]]
,
[If "trait_opportunist" [,]]
,
[If "trait_cheated" [,,,]]
,
Jump to wraith_cabin_int_menu
],Choice - [[Approach the mirror.]
[,,,,,,,,,,,,
[If "trait_paranoid" [,]]
,
[Elif "trait_cold" [,]]
,
[If "trait_cheated" [,]]
,
[If "trait_opportunist" [,]]
,,,,,,,,,,,
{Choice Branch: [Choice - [[Wipe the mirror clean.]
[
[If Var "wraith_surprise_comment" == Val (Bool False) [
[If "trait_paranoid" [,]]
,
[If "trait_cheated" [,]]
]]
,
[Else [
[If "trait_paranoid" [,]]
,
[If "trait_cheated" [,]]
]]
,,,,,,
[If "trait_paranoid" [,]]
,
[Elif "trait_cheated" [,]]
,,
[If Var "wraith_source" == Val (String "nightmare") [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If Var "wraith_source" == Val (String "nightmare") [,,,,,]]
,
[Else [
[If Var "spectre_end" == Val (String "abandon") [,,,,,]]
,
[Else [,,,,,,
[If "spectre_kill_player_slay_attempt" [,,,,,,,]]
]]
,,,,]]
,,,,,,
Jump to wraith_convo_menu
]]}
]]}
]}
,
{Label: wraith_convo_menu
[
Assign "current_run_mirror_touched" = Val (Bool True)
,
Assign "wraith_convo_count" += Val (Int 1)
,
[If Var "wraith_convo_count" == Val (Int 0) [
[If "trait_opportunist" [,,,,,,,]]
,
[Elif "trait_paranoid" [,,,,,,,,,,,,,,,,,,,]]
,
[Elif "trait_cold" [,,,,,,,,,,,]]
]]
,
[If Var "wraith_convo_count" >= Val (Int 2) [,,,,
Jump to wraith_possession
]]
,,,,,,,,,,
{Choice Branch: [Choice - (Explore) ''I thought you c...If "spectre_possession_no_wont" && Var "wraith_consent_explore" == Val (Bool False) []
[
Assign "wraith_consent_explore" = Val (Bool True)
,,,,,
Jump to wraith_convo_menu
],Choice - (Explore) ''Look, we're eve...If Var "wraith_source" == Val (String "spectre") && Var "wraith_water_bridge_explore" == Val (Bool False) []
[
Assign "wraith_water_bridge_explore" = Val (Bool True)
,,,,,
[If Var "spectre_end" == Val (String "abandon") [,,,]]
,
[Else [,,,]]
,
{Label: wraith_even_join
[,,,]}
,
Jump to wraith_convo_menu
],Choice - (Explore) ''Look, we're eve...If Var "wraith_source" == Val (String "nightmare") && Var "wraith_water_bridge_explore" == Val (Bool False) []
[
Assign "wraith_water_bridge_explore" = Val (Bool True)
,,,,,
Jump to wraith_even_join
],Choice - (Explore) ''I never wanted ...If Var "wraith_never_hurt_want" == Val (Bool False) []
[
Assign "wraith_never_hurt_want" = Val (Bool True)
,,,,,,
Jump to wraith_convo_menu
],Choice - (Explore) ''I'm a victim in...If Var "wraith_victim_explore" == Val (Bool False) []
[
Assign "wraith_victim_explore" = Val (Bool True)
,,,,,,,
[If "trait_paranoid" [,,,]]
,,,,,
Jump to wraith_convo_menu
],Choice - (Explore) ''Wouldn't posses...If Var "wraith_no_better_explore" == Val (Bool False) []
[
Assign "wraith_no_better_explore" = Val (Bool True)
,,,,,,,
Jump to wraith_convo_menu
],Choice - (Explore) ''Do you {b}need{...If Var "wraith_barter_explore" == Val (Bool False) []
[
Assign "wraith_barter_explore" = Val (Bool True)
,
[If Var "wraith_source" == Val (String "nightmare") && "trait_opportunist" [,,,]]
,
[Elif Var "wraith_source" == Val (String "nightmare") [,,,]]
,
[Else [,,,]]
,,,,,
Jump to wraith_convo_menu
],Choice - ''Okay. Fine. Just do it.''If Var "wraith_convo_count" != Val (Int 0) []
[
{Label: wraith_consent_join
[
Assign "wraith_consent" = Val (Bool True)
,
[If Var "wraith_source" == Val (String "spectre") [,,,]]
,
[Else [,,,,,,,]]
,
Jump to wraith_possession
]}
],Choice - ''That's fine. I actually c...If Var "wraith_convo_count" == Val (Int 0) []
[
Jump to wraith_consent_join
],Choice - [[Struggle.]
[
Assign "wraith_struggle" = Val (Bool True)
,,,,,,,,,,
Jump to wraith_possession
]]}
]}
,
{Label: wraith_possession
[,,,,,,,,,,,,,,,,,,,,,,,,
[If "trait_cheated" [,,,,,]]
,
[If "trait_opportunist" [,,,,,]]
,
[If "trait_paranoid" [,,
[If Var "wraith_source" == Val (String "nightmare") [,,,]]
,
[Else [,]]
,
[If "trait_cold" [,]]
]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "wraith_consent" [
Jump to wraith_end_free
]]
,
[If "trait_opportunist" [,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to wraith_reap_join
]]
,
[Elif "trait_cheated" [,,,,,,,,,]]
,
[Else [,,
[If Var "wraith_source" == Val (String "spectre") [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,,,,,,
{Label: wraith_reap_join
[,,,]}
]]
,,,,,,,,,,
{Choice Branch: [Choice - [[Leave the cabin.]
[
Jump to wraith_end_free
],Choice - [[Throw your body into the ...
[
Jump to wraith_end_fall
]]}
]}
,
{Label: wraith_end_free
[
[If "wraith_consent" [,,
[If "trait_paranoid" [,]]
,
[If "trait_cheated" [,]]
,
[If "trait_opportunist" [,]]
,
[If "trait_cold" [,]]
,,]]
,
[Else [,,,,
[If "trait_cheated" [,]]
,,,
[If "trait_opportunist" [,]]
,
[If "trait_paranoid" [,]]
,
[If "trait_cold" [,]]
,,,
[If "trait_opportunist" [,]]
]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "trait_opportunist" [,,,]]
,
[Elif "trait_cold" [,,,]]
,,,
[If "trait_paranoid" [,]]
,
[If "trait_cheated" [,]]
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,
[If "trait_cold" [,]]
,
[If "trait_opportunist" [,]]
,
[If "trait_paranoid" [,]]
,
[If "trait_opportunist" [,]]
,
[If "trait_cheated" [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "wraith_end" = Val (String "free")
,
Assign "princess_free" += Val (Int 1)
,
Assign "princess_deny" += Val (Int 1)
,
Jump to mirror_start
]}
,
{Label: wraith_end_fall
[,,,,,,,,,,,,,
[If "trait_opportunist" [,,,,,]]
,
[Elif "trait_cheated" [,,,]]
,
[Elif "trait_cold" [,,,,,,,]]
,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,
[If "trait_opportunist" [,,,]]
,
[Elif "trait_cheated" [,,,]]
,
[Else [,,,]]
,,,,,,,,,,,
[If "trait_paranoid" [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,
[If "trait_cheated" [,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "wraith_end" = Val (String "slay")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_deny" += Val (Int 2)
,
Jump to mirror_start
]}
,
{Label: restart_start
[
[If Var "first_princess_set" == Val (Bool False) && Var "oblivion_flag" == Val (Bool False) [
Assign "first_princess_set" = Val (Bool True)
,
[If Var "current_princess" == Val (String "stranger") [
Assign "first_princess" = Val (String "stranger")
]]
,
[Elif "blade_taken_1" [
Assign "first_princess" = Val (String "harsh")
]]
,
[Else [
Assign "first_princess" = Val (String "gentle")
]]
]]
,
Assign "mound_can_attempt_flee" = Val (Bool True)
,
Assign "config.menu_include_disabled" = Val (Bool False)
,
Assign "can_spectre" = Val (Bool True)
,,,,
[If Var "oblivion_flag" == Val (Bool False) [
[If Var "current_princess" == Val (String "adversary") [,,,]]
,
[Elif Var "current_princess" == Val (String "needle") [,,,]]
,
[Elif Var "current_princess" == Val (String "beast") [,,,]]
,
[Elif Var "current_princess" == Val (String "den") [,,,]]
,
[Elif Var "current_princess" == Val (String "damsel") [,,,]]
,
[Elif Var "current_princess" == Val (String "dereal") [,,,]]
,
[Elif Var "current_princess" == Val (String "nightmare") [,,,]]
,
[Elif Var "current_princess" == Val (String "clarity") [,,,]]
,
[Elif Var "current_princess" == Val (String "prisonerhead") [,,,]]
,
[Elif Var "current_princess" == Val (String "prisonerchain") [,,,]]
,
[Elif Var "current_princess" == Val (String "razorheart") [,,,]]
,
[Elif Var "current_princess" == Val (String "razor") [,,,]]
,
[Elif Var "current_princess" == Val (String "spectre") [,,,]]
,
[Elif Var "current_princess" == Val (String "stranger") [,,,]]
,
[Elif Var "current_princess" == Val (String "tower") [,,,]]
,
[Elif Var "current_princess" == Val (String "apotheosis") [,,,]]
,
[Elif Var "current_princess" == Val (String "witch") [,,,]]
,
[Elif Var "current_princess" == Val (String "thorn") [,,,]]
,
[Elif Var "current_princess" == Val (String "fury") [,,]]
,
[Elif Var "current_princess" == Val (String "greydamsel") [,,,]]
,
[Elif Var "current_princess" == Val (String "greyprisoner") [,,,]]
,
[Elif Var "current_princess" == Val (String "wildnerves") [,,,]]
,
[Elif Var "current_princess" == Val (String "wildwound") [,,,]]
,
[Elif Var "current_princess" == Val (String "wraith") [,,,]]
,
[Elif Var "current_princess" == Val (String "happy") [,,,]]
,
[Elif Var "current_princess" == Val (String "happydry") [,,,]]
,
[Elif Var "current_princess" == Val (String "dragon") || Var "current_princess" == Val (String "dragonhand") [,,,]]
,
[Elif Var "current_princess" == Val (String "dragonfused") [,,,]]
,
[Elif Var "current_princess" == Val (String "cage") [,,,]]
,
[Elif Var "current_princess" == Val (String "furyheart") [,,]]
]]
,
[If Var "oblivion_flag" == Val (Bool False) [
[If "trait_stubborn" [
Assign "stubborn_met" = Val (Bool True)
,
Assign "trait_stubborn" = Val (Bool False)
]]
,
[If "trait_hunted" [
Assign "hunted_met" = Val (Bool True)
,
Assign "trait_hunted" = Val (Bool False)
]]
,
[If "trait_smitten" [
Assign "smitten_met" = Val (Bool True)
,
Assign "trait_smitten" = Val (Bool False)
]]
,
[If "trait_paranoid" [
Assign "paranoid_met" = Val (Bool True)
,
Assign "trait_paranoid" = Val (Bool False)
]]
,
[If "trait_skeptic" [
Assign "skeptic_met" = Val (Bool True)
,
Assign "trait_skeptic" = Val (Bool False)
]]
,
[If "trait_cheated" [
Assign "cheated_met" = Val (Bool True)
,
Assign "trait_cheated" = Val (Bool False)
]]
,
[If "trait_cold" [
Assign "cold_met" = Val (Bool True)
,
Assign "trait_cold" = Val (Bool False)
]]
,
[If "trait_contrarian" [
Assign "contrarian_met" = Val (Bool True)
,
Assign "trait_contrarian" = Val (Bool False)
]]
,
[If "trait_broken" [
Assign "broken_met" = Val (Bool True)
,
Assign "trait_broken" = Val (Bool False)
]]
,
[If "trait_opportunist" [
Assign "opportunist_met" = Val (Bool True)
,
Assign "trait_opportunist" = Val (Bool False)
]]
,
Assign "loops_finished" += Val (Int 1)
,
[If Var "loops_finished" == Val (Int 1) [
[If Var "current_princess" == Val (String "adversary") [
Assign "first_mound" = Val (String "adversary")
]]
,
[Elif Var "current_princess" == Val (String "needle") [
Assign "first_mound" = Val (String "needle")
]]
,
[Elif Var "current_princess" == Val (String "beast") [
Assign "first_mound" = Val (String "beast")
]]
,
[Elif Var "current_princess" == Val (String "den") [
Assign "first_mound" = Val (String "den")
]]
,
[Elif Var "current_princess" == Val (String "damsel") [
Assign "first_mound" = Val (String "damsel")
]]
,
[Elif Var "current_princess" == Val (String "dereal") [
Assign "first_mound" = Val (String "dereal")
]]
,
[Elif Var "current_princess" == Val (String "nightmare") [
Assign "first_mound" = Val (String "nightmare")
]]
,
[Elif Var "current_princess" == Val (String "clarity") [
Assign "first_mound" = Val (String "clarity")
]]
,
[Elif Var "current_princess" == Val (String "prisonerhead") [
Assign "first_mound" = Val (String "prisonerhead")
]]
,
[Elif Var "current_princess" == Val (String "prisonerchain") [
Assign "first_mound" = Val (String "prisonerchain")
]]
,
[Elif Var "current_princess" == Val (String "razorheart") [
Assign "first_mound" = Val (String "razorheart")
]]
,
[Elif Var "current_princess" == Val (String "razor") [
Assign "first_mound" = Val (String "razor")
]]
,
[Elif Var "current_princess" == Val (String "spectre") [
Assign "first_mound" = Val (String "spectre")
]]
,
[Elif Var "current_princess" == Val (String "stranger") [
Assign "first_mound" = Val (String "stranger")
]]
,
[Elif Var "current_princess" == Val (String "tower") [
Assign "first_mound" = Val (String "tower")
]]
,
[Elif Var "current_princess" == Val (String "apotheosis") [
Assign "first_mound" = Val (String "apotheosis")
]]
,
[Elif Var "current_princess" == Val (String "witch") [
Assign "first_mound" = Val (String "witch")
]]
,
[Elif Var "current_princess" == Val (String "thorn") [
Assign "first_mound" = Val (String "thorn")
]]
,
[Elif Var "current_princess" == Val (String "fury") [
Assign "first_mound" = Val (String "fury")
]]
,
[Elif Var "current_princess" == Val (String "greydamsel") [
Assign "first_mound" = Val (String "greydamsel")
]]
,
[Elif Var "current_princess" == Val (String "greyprisoner") [
Assign "first_mound" = Val (String "greyprisoner")
]]
,
[Elif Var "current_princess" == Val (String "wildnerves") [
Assign "first_mound" = Val (String "wildnerves")
]]
,
[Elif Var "current_princess" == Val (String "wildwound") [
Assign "first_mound" = Val (String "wildwound")
]]
,
[Elif Var "current_princess" == Val (String "wraith") [
Assign "first_mound" = Val (String "wraith")
]]
,
[Elif Var "current_princess" == Val (String "happy") [
Assign "first_mound" = Val (String "happy")
]]
,
[Elif Var "current_princess" == Val (String "happydry") [
Assign "first_mound" = Val (String "happydry")
]]
,
[Elif Var "current_princess" == Val (String "furyheart") [
Assign "first_mound" = Val (String "furyheart")
]]
,
[Elif Var "current_princess" == Val (String "dragon") [
Assign "first_mound" = Val (String "dragon")
]]
,
[Elif Var "current_princess" == Val (String "dragonfused") [
Assign "first_mound" = Val (String "dragonfused")
]]
,
[Elif Var "current_princess" == Val (String "dragonhand") [
Assign "first_mound" = Val (String "dragonhand")
]]
,
[Elif Var "current_princess" == Val (String "cage") [
Assign "first_mound" = Val (String "cage")
]]
]]
,
[Elif Var "loops_finished" == Val (Int 2) [
[If Var "current_princess" == Val (String "adversary") [
Assign "second_mound" = Val (String "adversary")
]]
,
[Elif Var "current_princess" == Val (String "needle") [
Assign "second_mound" = Val (String "needle")
]]
,
[Elif Var "current_princess" == Val (String "beast") [
Assign "second_mound" = Val (String "beast")
]]
,
[Elif Var "current_princess" == Val (String "den") [
Assign "second_mound" = Val (String "den")
]]
,
[Elif Var "current_princess" == Val (String "damsel") [
Assign "second_mound" = Val (String "damsel")
]]
,
[Elif Var "current_princess" == Val (String "dereal") [
Assign "second_mound" = Val (String "dereal")
]]
,
[Elif Var "current_princess" == Val (String "nightmare") [
Assign "second_mound" = Val (String "nightmare")
]]
,
[Elif Var "current_princess" == Val (String "clarity") [
Assign "second_mound" = Val (String "clarity")
]]
,
[Elif Var "current_princess" == Val (String "prisonerhead") [
Assign "second_mound" = Val (String "prisonerhead")
]]
,
[Elif Var "current_princess" == Val (String "prisonerchain") [
Assign "second_mound" = Val (String "prisonerchain")
]]
,
[Elif Var "current_princess" == Val (String "razorheart") [
Assign "second_mound" = Val (String "razorheart")
]]
,
[Elif Var "current_princess" == Val (String "razor") [
Assign "second_mound" = Val (String "razor")
]]
,
[Elif Var "current_princess" == Val (String "spectre") [
Assign "second_mound" = Val (String "spectre")
]]
,
[Elif Var "current_princess" == Val (String "stranger") [
Assign "second_mound" = Val (String "stranger")
]]
,
[Elif Var "current_princess" == Val (String "tower") [
Assign "second_mound" = Val (String "tower")
]]
,
[Elif Var "current_princess" == Val (String "apotheosis") [
Assign "second_mound" = Val (String "apotheosis")
]]
,
[Elif Var "current_princess" == Val (String "witch") [
Assign "second_mound" = Val (String "witch")
]]
,
[Elif Var "current_princess" == Val (String "thorn") [
Assign "second_mound" = Val (String "thorn")
]]
,
[Elif Var "current_princess" == Val (String "fury") [
Assign "second_mound" = Val (String "fury")
]]
,
[Elif Var "current_princess" == Val (String "greydamsel") [
Assign "second_mound" = Val (String "greydamsel")
]]
,
[Elif Var "current_princess" == Val (String "greyprisoner") [
Assign "second_mound" = Val (String "greyprisoner")
]]
,
[Elif Var "current_princess" == Val (String "wildnerves") [
Assign "second_mound" = Val (String "wildnerves")
]]
,
[Elif Var "current_princess" == Val (String "wildwound") [
Assign "second_mound" = Val (String "wildwound")
]]
,
[Elif Var "current_princess" == Val (String "wraith") [
Assign "second_mound" = Val (String "wraith")
]]
,
[Elif Var "current_princess" == Val (String "happy") [
Assign "second_mound" = Val (String "happy")
]]
,
[Elif Var "current_princess" == Val (String "happydry") [
Assign "second_mound" = Val (String "happydry")
]]
,
[Elif Var "current_princess" == Val (String "furyheart") [
Assign "second_mound" = Val (String "furyheart")
]]
,
[Elif Var "current_princess" == Val (String "dragon") [
Assign "second_mound" = Val (String "dragon")
]]
,
[Elif Var "current_princess" == Val (String "dragonfused") [
Assign "second_mound" = Val (String "dragonfused")
]]
,
[Elif Var "current_princess" == Val (String "dragonhand") [
Assign "second_mound" = Val (String "dragonhand")
]]
,
[Elif Var "current_princess" == Val (String "cage") [
Assign "second_mound" = Val (String "cage")
]]
]]
,
[Elif Var "loops_finished" == Val (Int 3) [
[If Var "current_princess" == Val (String "adversary") [
Assign "third_mound" = Val (String "adversary")
]]
,
[Elif Var "current_princess" == Val (String "needle") [
Assign "third_mound" = Val (String "needle")
]]
,
[Elif Var "current_princess" == Val (String "beast") [
Assign "third_mound" = Val (String "beast")
]]
,
[Elif Var "current_princess" == Val (String "den") [
Assign "third_mound" = Val (String "den")
]]
,
[Elif Var "current_princess" == Val (String "damsel") [
Assign "third_mound" = Val (String "damsel")
]]
,
[Elif Var "current_princess" == Val (String "dereal") [
Assign "third_mound" = Val (String "dereal")
]]
,
[Elif Var "current_princess" == Val (String "nightmare") [
Assign "third_mound" = Val (String "nightmare")
]]
,
[Elif Var "current_princess" == Val (String "clarity") [
Assign "third_mound" = Val (String "clarity")
]]
,
[Elif Var "current_princess" == Val (String "prisonerhead") [
Assign "third_mound" = Val (String "prisonerhead")
]]
,
[Elif Var "current_princess" == Val (String "prisonerchain") [
Assign "third_mound" = Val (String "prisonerchain")
]]
,
[Elif Var "current_princess" == Val (String "razorheart") [
Assign "third_mound" = Val (String "razorheart")
]]
,
[Elif Var "current_princess" == Val (String "razor") [
Assign "third_mound" = Val (String "razor")
]]
,
[Elif Var "current_princess" == Val (String "spectre") [
Assign "third_mound" = Val (String "spectre")
]]
,
[Elif Var "current_princess" == Val (String "stranger") [
Assign "third_mound" = Val (String "stranger")
]]
,
[Elif Var "current_princess" == Val (String "tower") [
Assign "third_mound" = Val (String "tower")
]]
,
[Elif Var "current_princess" == Val (String "apotheosis") [
Assign "third_mound" = Val (String "apotheosis")
]]
,
[Elif Var "current_princess" == Val (String "witch") [
Assign "third_mound" = Val (String "witch")
]]
,
[Elif Var "current_princess" == Val (String "thorn") [
Assign "third_mound" = Val (String "thorn")
]]
,
[Elif Var "current_princess" == Val (String "fury") [
Assign "third_mound" = Val (String "fury")
]]
,
[Elif Var "current_princess" == Val (String "greydamsel") [
Assign "third_mound" = Val (String "greydamsel")
]]
,
[Elif Var "current_princess" == Val (String "greyprisoner") [
Assign "third_mound" = Val (String "greyprisoner")
]]
,
[Elif Var "current_princess" == Val (String "wildnerves") [
Assign "third_mound" = Val (String "wildnerves")
]]
,
[Elif Var "current_princess" == Val (String "wildwound") [
Assign "third_mound" = Val (String "wildwound")
]]
,
[Elif Var "current_princess" == Val (String "wraith") [
Assign "third_mound" = Val (String "wraith")
]]
,
[Elif Var "current_princess" == Val (String "happy") [
Assign "third_mound" = Val (String "happy")
]]
,
[Elif Var "current_princess" == Val (String "happydry") [
Assign "third_mound" = Val (String "happydry")
]]
,
[Elif Var "current_princess" == Val (String "furyheart") [
Assign "third_mound" = Val (String "furyheart")
]]
,
[Elif Var "current_princess" == Val (String "dragon") [
Assign "third_mound" = Val (String "dragon")
]]
,
[Elif Var "current_princess" == Val (String "dragonfused") [
Assign "third_mound" = Val (String "dragonfused")
]]
,
[Elif Var "current_princess" == Val (String "dragonhand") [
Assign "third_mound" = Val (String "dragonhand")
]]
,
[Elif Var "current_princess" == Val (String "cage") [
Assign "third_mound" = Val (String "cage")
]]
]]
,
[Elif Var "loops_finished" == Val (Int 4) [
[If Var "current_princess" == Val (String "adversary") [
Assign "fourth_mound" = Val (String "adversary")
]]
,
[Elif Var "current_princess" == Val (String "needle") [
Assign "fourth_mound" = Val (String "needle")
]]
,
[Elif Var "current_princess" == Val (String "beast") [
Assign "fourth_mound" = Val (String "beast")
]]
,
[Elif Var "current_princess" == Val (String "den") [
Assign "fourth_mound" = Val (String "den")
]]
,
[Elif Var "current_princess" == Val (String "damsel") [
Assign "fourth_mound" = Val (String "damsel")
]]
,
[Elif Var "current_princess" == Val (String "dereal") [
Assign "fourth_mound" = Val (String "dereal")
]]
,
[Elif Var "current_princess" == Val (String "nightmare") [
Assign "fourth_mound" = Val (String "nightmare")
]]
,
[Elif Var "current_princess" == Val (String "clarity") [
Assign "fourth_mound" = Val (String "clarity")
]]
,
[Elif Var "current_princess" == Val (String "prisonerhead") [
Assign "fourth_mound" = Val (String "prisonerhead")
]]
,
[Elif Var "current_princess" == Val (String "prisonerchain") [
Assign "fourth_mound" = Val (String "prisonerchain")
]]
,
[Elif Var "current_princess" == Val (String "razorheart") [
Assign "fourth_mound" = Val (String "razorheart")
]]
,
[Elif Var "current_princess" == Val (String "razor") [
Assign "fourth_mound" = Val (String "razor")
]]
,
[Elif Var "current_princess" == Val (String "spectre") [
Assign "fourth_mound" = Val (String "spectre")
]]
,
[Elif Var "current_princess" == Val (String "stranger") [
Assign "fourth_mound" = Val (String "stranger")
]]
,
[Elif Var "current_princess" == Val (String "tower") [
Assign "fourth_mound" = Val (String "tower")
]]
,
[Elif Var "current_princess" == Val (String "apotheosis") [
Assign "fourth_mound" = Val (String "apotheosis")
]]
,
[Elif Var "current_princess" == Val (String "witch") [
Assign "fourth_mound" = Val (String "witch")
]]
,
[Elif Var "current_princess" == Val (String "thorn") [
Assign "fourth_mound" = Val (String "thorn")
]]
,
[Elif Var "current_princess" == Val (String "fury") [
Assign "fourth_mound" = Val (String "fury")
]]
,
[Elif Var "current_princess" == Val (String "greydamsel") [
Assign "fourth_mound" = Val (String "greydamsel")
]]
,
[Elif Var "current_princess" == Val (String "greyprisoner") [
Assign "fourth_mound" = Val (String "greyprisoner")
]]
,
[Elif Var "current_princess" == Val (String "wildnerves") [
Assign "fourth_mound" = Val (String "wildnerves")
]]
,
[Elif Var "current_princess" == Val (String "wildwound") [
Assign "fourth_mound" = Val (String "wildwound")
]]
,
[Elif Var "current_princess" == Val (String "wraith") [
Assign "fourth_mound" = Val (String "wraith")
]]
,
[Elif Var "current_princess" == Val (String "happy") [
Assign "fourth_mound" = Val (String "happy")
]]
,
[Elif Var "current_princess" == Val (String "happydry") [
Assign "fourth_mound" = Val (String "happydry")
]]
,
[Elif Var "current_princess" == Val (String "furyheart") [
Assign "fourth_mound" = Val (String "furyheart")
]]
,
[Elif Var "current_princess" == Val (String "dragon") [
Assign "fourth_mound" = Val (String "dragon")
]]
,
[Elif Var "current_princess" == Val (String "dragonfused") [
Assign "fourth_mound" = Val (String "dragonfused")
]]
,
[Elif Var "current_princess" == Val (String "dragonhand") [
Assign "fourth_mound" = Val (String "dragonhand")
]]
,
[Elif Var "current_princess" == Val (String "cage") [
Assign "fourth_mound" = Val (String "cage")
]]
]]
,
[Elif Var "loops_finished" == Val (Int 5) [
[If Var "current_princess" == Val (String "adversary") [
Assign "fifth_mound" = Val (String "adversary")
]]
,
[Elif Var "current_princess" == Val (String "needle") [
Assign "fifth_mound" = Val (String "needle")
]]
,
[Elif Var "current_princess" == Val (String "beast") [
Assign "fifth_mound" = Val (String "beast")
]]
,
[Elif Var "current_princess" == Val (String "den") [
Assign "fifth_mound" = Val (String "den")
]]
,
[Elif Var "current_princess" == Val (String "damsel") [
Assign "fifth_mound" = Val (String "damsel")
]]
,
[Elif Var "current_princess" == Val (String "dereal") [
Assign "fifth_mound" = Val (String "dereal")
]]
,
[Elif Var "current_princess" == Val (String "nightmare") [
Assign "fifth_mound" = Val (String "nightmare")
]]
,
[Elif Var "current_princess" == Val (String "clarity") [
Assign "fifth_mound" = Val (String "clarity")
]]
,
[Elif Var "current_princess" == Val (String "prisonerhead") [
Assign "fifth_mound" = Val (String "prisonerhead")
]]
,
[Elif Var "current_princess" == Val (String "prisonerchain") [
Assign "fifth_mound" = Val (String "prisonerchain")
]]
,
[Elif Var "current_princess" == Val (String "razorheart") [
Assign "fifth_mound" = Val (String "razorheart")
]]
,
[Elif Var "current_princess" == Val (String "razor") [
Assign "fifth_mound" = Val (String "razor")
]]
,
[Elif Var "current_princess" == Val (String "spectre") [
Assign "fifth_mound" = Val (String "spectre")
]]
,
[Elif Var "current_princess" == Val (String "stranger") [
Assign "fifth_mound" = Val (String "stranger")
]]
,
[Elif Var "current_princess" == Val (String "tower") [
Assign "fifth_mound" = Val (String "tower")
]]
,
[Elif Var "current_princess" == Val (String "apotheosis") [
Assign "fifth_mound" = Val (String "apotheosis")
]]
,
[Elif Var "current_princess" == Val (String "witch") [
Assign "fifth_mound" = Val (String "witch")
]]
,
[Elif Var "current_princess" == Val (String "thorn") [
Assign "fifth_mound" = Val (String "thorn")
]]
,
[Elif Var "current_princess" == Val (String "fury") [
Assign "fifth_mound" = Val (String "fury")
]]
,
[Elif Var "current_princess" == Val (String "greydamsel") [
Assign "fifth_mound" = Val (String "greydamsel")
]]
,
[Elif Var "current_princess" == Val (String "greyprisoner") [
Assign "fifth_mound" = Val (String "greyprisoner")
]]
,
[Elif Var "current_princess" == Val (String "wildnerves") [
Assign "fifth_mound" = Val (String "wildnerves")
]]
,
[Elif Var "current_princess" == Val (String "wildwound") [
Assign "fifth_mound" = Val (String "wildwound")
]]
,
[Elif Var "current_princess" == Val (String "wraith") [
Assign "fifth_mound" = Val (String "wraith")
]]
,
[Elif Var "current_princess" == Val (String "happy") [
Assign "fifth_mound" = Val (String "happy")
]]
,
[Elif Var "current_princess" == Val (String "happydry") [
Assign "fifth_mound" = Val (String "happydry")
]]
,
[Elif Var "current_princess" == Val (String "furyheart") [
Assign "fifth_mound" = Val (String "furyheart")
]]
,
[Elif Var "current_princess" == Val (String "dragon") [
Assign "fifth_mound" = Val (String "dragon")
]]
,
[Elif Var "current_princess" == Val (String "dragonfused") [
Assign "fifth_mound" = Val (String "dragonfused")
]]
,
[Elif Var "current_princess" == Val (String "dragonhand") [
Assign "fifth_mound" = Val (String "dragonhand")
]]
,
[Elif Var "current_princess" == Val (String "cage") [
Assign "fifth_mound" = Val (String "cage")
]]
]]
]]
,
[Else [
Assign "caught_origin_current" = Val (String "")
,
Assign "oblivion_flag" = Val (Bool False)
,
Assign "loops_destroyed" += Val (Int 1)
]]
,
Assign "trait_stubborn" = Val (Bool False)
,
Assign "trait_hunted" = Val (Bool False)
,
Assign "trait_smitten" = Val (Bool False)
,
Assign "trait_paranoid" = Val (Bool False)
,
Assign "trait_skeptic" = Val (Bool False)
,
Assign "trait_cheated" = Val (Bool False)
,
Assign "trait_cold" = Val (Bool False)
,
Assign "trait_contrarian" = Val (Bool False)
,
Assign "trait_broken" = Val (Bool False)
,
Assign "trait_opportunist" = Val (Bool False)
,,,
Assign "current_run_mirror_comment" = Val (Bool False)
,
Assign "current_run_mirror_touched" = Val (Bool False)
,
Assign "config.menu_include_disabled" = Val (Bool False)
,
Assign "quick_menu" = Val (Bool False)
,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,
Assign "blade_taken_1" = Val (Bool False)
,
Assign "current_mutual_death" = Val (Int 0)
,
Assign "forest_1_questioning_start" = Val (Bool False)
,
Assign "forest_1_questioning_followup" = Val (Bool False)
,
Assign "forest_1_questioning_evidence" = Val (Bool False)
,
Assign "forest_1_conscientious_objector_explore" = Val (Bool False)
,
Assign "forest_1_someone_else_explore" = Val (Bool False)
,
Assign "forest_1_refuse_explore" = Val (Bool False)
,
Assign "forest_1_why_dangerous" = Val (Bool False)
,
Assign "forest_1_what_happens" = Val (Bool False)
,
Assign "forest_1_casuality_explore" = Val (Bool False)
,
Assign "forest_1_let_it_burn" = Val (Bool False)
,
Assign "forest_1_reluctant_visit" = Val (Bool False)
,
Assign "forest_1_prize" = Val (Bool False)
,
Assign "forest_1_prize_follow_up" = Val (Bool False)
,
Assign "basement_1_talked" = Val (Bool False)
,
Assign "basement_1_name_ask" = Val (Bool False)
,
Assign "basement_1_eating_ask" = Val (Bool False)
,
Assign "basement_1_name_ask_follow_up" = Val (Bool False)
,
Assign "basement_1_threatening_tension" = Val (Bool False)
,
Assign "basement_1_why_imprisoned" = Val (Bool False)
,
Assign "basement_1_shared_task" = Val (Bool False)
,
Assign "ch1_razor_pulse" = Val (Bool False)
,
Assign "cycle_1_princess_slain_offer_explore" = Val (Bool False)
,
Assign "cycle_1_princess_slain_offer_rejected" = Val (Bool False)
,
Assign "cycle_1_princess_slain_offer_heard_menu_explore" = Val (Bool False)
,
Assign "basement_1_knife_dropped_task_shared" = Val (Bool False)
,
Assign "basement_1_knife_dropped_relationship_explore" = Val (Bool False)
,
Assign "basement_1_knife_dropped_awkward" = Val (Bool False)
,
Assign "basement_1_knife_vague_count" = Val (Int 0)
,
Assign "basement_1_philosophy_knife_flag" = Val (Bool False)
,
Assign "basement_1_knife_how_escape" = Val (Bool False)
,
Assign "basement_1_knife_how_long" = Val (Bool False)
,
Assign "basement_1_knife_why_here_explore" = Val (Bool False)
,
Assign "nightmare_no_wounds" = Val (Bool False)
,
Assign "basement_1_knife_rescue_door_try_explore" = Val (Bool False)
,
Assign "basement_1_knife_rescue_door_force_explore" = Val (Bool False)
,
Assign "basement_1_knife_rescue_door_shout_explore" = Val (Bool False)
,
Assign "basement_1_knife_kill_joke" = Val (Bool False)
,
Assign "basement_1_knife_confronted_steel" = Val (Bool False)
,
Assign "knife_queue_undecided" = Val (Bool False)
,
Assign "basement_1_nerves_steeled" = Val (Bool False)
,
Assign "basement_1_nerves_steeled_hesitated" = Val (Bool False)
,
Assign "basement_1_nerves_armed" = Val (Bool False)
,
Assign "basement_1_nerves_fear" = Val (Bool False)
,
Assign "basement_1_nerves_steeled_hesitated_explore" = Val (Bool False)
,
Assign "basement_1_not_dropping_stare" = Val (Bool False)
,
Assign "razor_pathetic" = Val (Bool False)
,
Assign "ch1_mound_fresh" = Val (Bool False)
,
Assign "basement_1_empty_kill_joke" = Val (Bool False)
,
Assign "basement_1_empty_save_explore" = Val (Bool False)
,
Assign "basement_1_empty_save_lie_explore" = Val (Bool False)
,
Assign "basement_1_empty_arm_loss_known" = Val (Bool False)
,
Assign "basement_1_empty_wounded" = Val (Bool False)
,
Assign "what_would_you_do_1" = Val (Bool False)
,
Assign "basement_1_empty_not_worth_risk" = Val (Bool False)
,
Assign "basement_1_empty_rescue_dont_regret" = Val (Bool False)
,
Assign "basement_1_empty_rescue_door_try_explore" = Val (Bool False)
,
Assign "basement_1_empty_rescue_door_force_explore" = Val (Bool False)
,
Assign "basement_1_empty_rescue_door_shout_explore" = Val (Bool False)
,
Assign "beast_1_both_arms" = Val (Bool False)
,
Assign "basement_1_empty_retrieve_knife_stairs_explore_hello" = Val (Bool False)
,
Assign "basement_1_empty_knife_hesitate" = Val (Bool False)
,
Assign "loop_1_locked" = Val (Bool False)
,
Assign "forest_1_flee_hero_spoke" = Val (Bool False)
,,
[If "damsel_encountered" && "beast_encountered" && "witch_encountered" [
Assign "ch1_can_empty" = Val (Bool False)
]]
,
Assign "mirror_n_explore" = Val (Bool False)
,
Assign "mirror_n_silence_flag" = Val (Bool False)
,
Assign "loop_1_princess_killed" = Val (Bool False)
,
Assign "quiet_slay_current" = Val (Bool False)
,
Assign "current_princess" = Val (String "")
,
Assign "current_loop" = Val (Int 1)
,
Jump to start
]}
,
{Label: caught_start
[,,,,,,
Assign "oblivion_flag" = Val (Bool True)
,,,,
[If Var "caught_origin_current" == Val (String "stranger") || "caught_origin_ch3" [
Assign "caught_origin_ch3" = Val (Bool False)
,,]]
,
[Else [,]]
,,,,,,
[If "trait_contrarian" [,]]
,
[If "trait_cold" [,]]
,
[If "trait_broken" [,]]
,
[If "trait_hunted" [,]]
,
[If "trait_skeptic" [,]]
,
[If "trait_stubborn" [,]]
,
[If "trait_smitten" [,]]
,
[If "trait_flinching" [,]]
,
[If "trait_paranoid" [,]]
,
[If "trait_opportunist" [,]]
,
[If "trait_cheated" [,]]
,,,,,,,,,,,,,,,,,,
Jump to caught_late_join
]}
,
{Label: caught_late_join
[,
Assign "oblivion_flag" = Val (Bool True)
,
[If Var "loops_finished" != Val (Int 0) []]
,
[Elif Var "loops_destroyed" >= Val (Int 1) []]
,
[Else []]
,,,
[If Var "loops_destroyed" == Val (Int 0) [
Jump to caught_1
]]
,
[Elif Var "loops_destroyed" == Val (Int 1) [
Jump to caught_2
]]
,
[Elif Var "loops_destroyed" == Val (Int 2) [
Jump to caught_3
]]
,
[Elif Var "loops_destroyed" == Val (Int 3) [
Jump to caught_4
]]
,
[Elif Var "loops_destroyed" == Val (Int 4) [
Jump to caught_5
]]
,
[Else [
Jump to caught_6
]]
]}
,
{Label: caught_1
[
[If Var "loops_finished" == Val (Int 0) [
Assign "oblivion_when_met" = Val (Int 0)
]]
,
[If Var "loops_finished" == Val (Int 1) [
Assign "oblivion_when_met" = Val (Int 1)
]]
,
[If Var "loops_finished" == Val (Int 2) [
Assign "oblivion_when_met" = Val (Int 2)
]]
,
[If Var "loops_finished" == Val (Int 3) [
Assign "oblivion_when_met" = Val (Int 3)
]]
,
[If Var "loops_finished" == Val (Int 4) [
Assign "oblivion_when_met" = Val (Int 4)
]]
,
Assign "caught_origin_current" = Val (String "")
,
[If Var "loops_finished" > Val (Int 0) []]
,,,,,
[If Var "loops_finished" > Val (Int 0) [,,,,,,,,,,
Jump to restart_start
]]
,
[Else [,,
{Choice Branch: [Choice - This is a nightmare. Wake up.
[,,,,,
Jump to restart_start
],Choice - Embrace the thoughts constr...
[,,,,,,,,
Jump to restart_start
]]}
]]
]}
,
{Label: caught_2
[,,,,,,,,,,,
Jump to restart_start
]}
,
{Label: caught_3
[,,,,,,,,,
[If Var "loops_finished" > Val (Int 0) []]
,
[Else []]
,,,,,
Jump to restart_start
]}
,
{Label: caught_4
[,,,,,,,,,,
Jump to restart_start
]}
,
{Label: caught_5
[,,,,,,,,,,
Jump to restart_start
]}
,
{Label: caught_6
[,
Assign "loops_destroyed" += Val (Int 1)
,,,,,,,
{Label: caught_loop
[
[If Var "caught_final_loop_count" < Val (Int 3) [
Assign "caught_final_loop_count" += Val (Int 1)
,,,
Jump to caught_loop
]]
,
{Choice Branch: [Choice - [[Exist.]
[
Assign "caught_final_loop_count" -= Val (Int 1)
,
Jump to caught_loop
],Choice - [[Consciousness fades away.]
[,,
Assign "final_ending" = Val (String "oblivion")
,,,,,
Jump to credits
]]}
]}
]}
,
{Label: felina_cabin_gentle_start
[
[If Var "blade_held" == Val (Bool False) [
[If Var "felina_stated_goal" == Val (String "slay") [,,,,,]]
,
[Else [,,,,,]]
]]
,
[Else [
[If Var "felina_stated_goal" == Val (String "slay") [,,,,,,,,,]]
,
[Else [,,,,,,,,,]]
]]
,
{Choice Branch: [Choice - [[Slay the Princess.]If "blade_held" []
[,,,
Jump to felina_slain_start
],Choice - [[Sit with her.]
[,,,,
[If "blade_held" [
Assign "quick_menu" = Val (Bool False)
,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
Jump to felina_cabin_gentle_menu_blade
]]
,
[Else [
Assign "quick_menu" = Val (Bool False)
,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
Jump to felina_cabin_gentle_menu_empty
]]
]]}
]}
,
{Label: felina_cabin_gentle_menu_empty
[
{Choice Branch: [Choice - (Explore) ''It's so good to...If Var "felina_leave_intro" == Val (Bool False) []
[
Assign "felina_leave_intro" = Val (Bool True)
,
Assign "felina_leave_count" += Val (Int 1)
,,,,,,,
Jump to felina_cabin_gentle_menu_empty
],Choice - (Explore) ''I'm sorry for a...If Var "felina_leave_apologize" == Val (Bool False) []
[
Assign "felina_leave_apologize" = Val (Bool True)
,
Assign "felina_leave_count" += Val (Int 1)
,
[If Var "first_mound" == Val (String "damsel") || Var "first_mound" == Val (String "dereal") || Var "first_mound" == Val (String "greydamsel") || Var "first_mound" == Val (String "happy") || Var "first_mound" == Val (String "happydry") [,,,,,,,,,,,]]
,
[If Var "first_mound" == Val (String "nightmare") || Var "first_mound" == Val (String "clarity") || Var "first_mound" == Val (String "wraith") && Var "wraith_source" == Val (String "nightmare") [,,,]]
,
[If Var "first_mound" == Val (String "beast") || Var "first_mound" == Val (String "den") || Var "first_mound" == Val (String "wildwound") || Var "first_mound" == Val (String "wildnerves") && Var "wild_source" == Val (String "beast") [,,,]]
,
[If Var "first_mound" == Val (String "witch") || Var "first_mound" == Val (String "thorn") || Var "first_mound" == Val (String "wildwound") || Var "first_mound" == Val (String "wildnerves") && Var "wild_source" == Val (String "witch") [,,,]]
,,,,,,,,,
Jump to felina_cabin_gentle_menu_empty
],Choice - (Explore) ''I don't think I...If Var "felina_cabin_god_comment" == Val (Bool False) []
[
Assign "felina_cabin_god_comment" = Val (Bool True)
,
Assign "felina_leave_count" += Val (Int 1)
,,,,,,,
Jump to felina_cabin_gentle_menu_empty
],Choice - (Explore) ''Are you... the ...If Var "felina_cabin_same_comment" == Val (Bool False) []
[
Assign "felina_cabin_same_comment" = Val (Bool True)
,
Assign "felina_leave_count" += Val (Int 1)
,,,,,,,,,,,,,,,,,,,
Jump to felina_cabin_gentle_menu_empty
],Choice - (Explore) ''Which... Prince...If Var "felina_leave_which_princess" == Val (Bool False) []
[
Assign "felina_leave_which_princess" = Val (Bool True)
,
Assign "felina_leave_count" += Val (Int 1)
,,,,,,,,,,,
Jump to felina_cabin_gentle_menu_empty
],Choice - (Explore) ''So, now that we...If Var "felina_leave_name" == Val (Bool False) []
[
Assign "felina_leave_name" = Val (Bool True)
,
Assign "felina_leave_count" += Val (Int 1)
,,,,,,,,,,
{Choice Branch: [Choice - ''I'm fine with 'The Long Q...
[,,,],Choice - ''I don't think I have one ...
[,,,],Choice - [[Shrug.]
[,,,]]}
,,,,,
Jump to felina_cabin_gentle_menu_empty
],Choice - (Explore) ''None of this wa...If Var "felina_leave_fair" == Val (Bool False) []
[
Assign "felina_leave_fair" = Val (Bool True)
,
Assign "felina_leave_count" += Val (Int 1)
,,,,,,,
Jump to felina_cabin_gentle_menu_empty
],Choice - (Explore) ''I only wanted t...If Var "felina_stated_goal" == Val (String "slay") && Var "felina_loop_gentle_slay_comment" == Val (Bool False) []
[
Assign "felina_loop_gentle_slay_comment" = Val (Bool True)
,
Assign "felina_leave_count" += Val (Int 1)
,,,,,,,
Jump to felina_cabin_gentle_menu_empty
],Choice - (Explore) ''I don't think I...If Var "felina_stated_goal" == Val (String "slay") && Var "felina_loop_gentle_slay_comment" == Val (Bool False) []
[
Assign "felina_loop_gentle_slay_comment" = Val (Bool True)
,,,,,,,
Jump to felina_cabin_gentle_menu_empty
],Choice - (Explore) ''What do you thi...If Var "felina_leave_mound_thoughts" == Val (Bool False) []
[
Assign "felina_leave_count" += Val (Int 1)
,
Assign "felina_leave_mound_thoughts" = Val (Bool True)
,,,,,,,,,
Jump to felina_cabin_gentle_menu_empty
],Choice - ''What if we just leave?''If Var "felina_leave_count" < Val (Int 9) []
[,,
Jump to felina_gentle_leave_join_menu
],Choice - ''I think the only thing le...If Var "felina_leave_count" >= Val (Int 9) []
[,,
{Label: felina_gentle_leave_join_menu
[,,,,
{Label: felina_gentle_hand_menu
[
{Choice Branch: [Choice - (Explore) [[Take her hand i...If Var "felina_cabin_leave_hand_hold" == Val (Bool False) []
[
Assign "felina_cabin_leave_hand_hold" = Val (Bool True)
,,,,,
Jump to felina_gentle_hand_menu
],Choice - ''I've always wanted to lea...
[
[If "felina_cabin_leave_hand_hold" [,,]]
,
[Else [,]]
,,
[If "felina_cabin_leave_hand_hold" [,]]
,
[Else [,]]
,],Choice - ''Not knowing what it means...
[
[If "felina_cabin_leave_hand_hold" [,,]]
,
[Else [,]]
,,
[If "felina_cabin_leave_hand_hold" [,]]
,
[Else [,]]
,],Choice - ''It doesn't matter what it...
[
[If "felina_cabin_leave_hand_hold" [,,]]
,
[Else [,]]
,,
[If "felina_cabin_leave_hand_hold" [,]]
,
[Else [,]]
,],Choice - ''I don't know where we'd g...
[
[If "felina_cabin_leave_hand_hold" [,,]]
,
[Else [,]]
,,
[If "felina_cabin_leave_hand_hold" [,]]
,
[Else [,]]
,],Choice - [[There's no need for words...If "felina_cabin_leave_hand_hold" []
[,,,,,,
Jump to felina_leave_cabin_ending
]]}
]}
,
[If Var "felina_cabin_leave_hand_hold" == Val (Bool False) [,,,]]
,
[Else [,]]
,
Jump to felina_leave_cabin_ending
]}
]]}
]}
,
{Label: felina_cabin_gentle_menu_blade
[
{Choice Branch: [Choice - (Explore) ''I don't want to...If Var "felina_cabin_god_comment" == Val (Bool False) []
[
Assign "felina_cabin_god_comment" = Val (Bool True)
,,,,,,,
Jump to felina_cabin_gentle_menu_blade
],Choice - (Explore) ''Are you... the ...If Var "felina_cabin_same_comment" == Val (Bool False) []
[
Assign "felina_cabin_same_comment" = Val (Bool True)
,,,,,,,
Jump to felina_cabin_gentle_menu_blade
],Choice - (Explore) ''I only wanted t...If Var "felina_stated_goal" == Val (String "slay") []
[
Assign "felina_loop_gentle_slay_comment" = Val (Bool True)
,
Jump to felina_loop_gentle
],Choice - (Explore) ''I don't want to...
[
Assign "felina_loop_gentle_way_out_comment" = Val (Bool True)
,
Jump to felina_loop_gentle
],Choice - (Explore) ''I don't think I...If Var "felina_stated_goal" == Val (String "slay") []
[
Assign "felina_loop_gentle_slay_comment" = Val (Bool True)
,
Jump to felina_loop_gentle
],Choice - (Explore) ''What are we goi...
[
Jump to felina_loop_gentle
],Choice - (Explore) ''I don't want to...
[
Assign "felina_loop_gentle_slay_comment" = Val (Bool True)
,
Jump to felina_loop_gentle
],Choice - ''I'm sorry.'' [[Slay the P...
[
Assign "felina_slain_apologize" = Val (Bool True)
,,,,,
Jump to felina_slain_start
],Choice - [[Slay the Princess.]
[,,
Jump to felina_slain_start
]]}
]}
,
{Label: felina_loop_gentle
[,,,
[If "felina_loop_gentle_way_out_comment" [,,,]]
,
[Elif "felina_loop_gentle_slay_comment" [,,,]]
,
[Else [,,,]]
,,,,,
[If "mirror_construct" [,,,]]
,
[Else [,,,]]
,,,,,,,,,
{Label: loop_ending_gentle_menu
[
{Choice Branch: [Choice - (Explore) ''Would resetting...If Var "loop_reset_help" == Val (Bool False) []
[
Assign "loop_reset_help" = Val (Bool True)
,,,,,,,
Jump to loop_ending_gentle_menu
],Choice - (Explore) ''I don't want to...If Var "loop_forget" == Val (Bool False) []
[
Assign "loop_forget" = Val (Bool True)
,,,,,,,
Jump to loop_ending_gentle_menu
],Choice - (Explore) ''We're going to ...If Var "loop_return" == Val (Bool False) []
[
Assign "loop_return" = Val (Bool True)
,,,,,,,
Jump to loop_ending_gentle_menu
],Choice - (Explore) ''If we're talkin...If Var "loop_repeat" == Val (Bool False) []
[
Assign "loop_repeat" = Val (Bool True)
,,,,,,,
Jump to loop_ending_gentle_menu
],Choice - (Explore) ''How do you know...If Var "loop_worse" == Val (Bool False) && "loop_repeat" []
[
Assign "loop_worse" = Val (Bool True)
,,,,,,,
Jump to loop_ending_gentle_menu
],Choice - (Explore) ''But how do you ...If "loop_worse" && Var "loop_worse_follow" == Val (Bool False) []
[
Assign "loop_worse_follow" = Val (Bool True)
,,,,,,,,,,,
Jump to loop_ending_gentle_menu
],Choice - (Explore) ''This isn't fair...If Var "loop_fair" == Val (Bool False) []
[
Assign "loop_fair" = Val (Bool True)
,,,,,,,
Jump to loop_ending_gentle_menu
],Choice - (Explore) ''Is there any ot...If Var "loop_other_way" == Val (Bool False) []
[
Assign "loop_other_way" = Val (Bool True)
,,,,,,,
Jump to loop_ending_gentle_menu
],Choice - (Explore) ''I take it all b...If Var "loop_regret" == Val (Bool False) []
[
Assign "loop_regret" = Val (Bool True)
,,,,,,
Jump to loop_ending_gentle_menu
],Choice - ''Okay. Then let's do it. I...
[,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,
{Choice Branch: [Choice - ''I love you.''
[,,,,,],Choice - ''Just do it.''
[,,,,,],Choice - ''I'll see you soon.''
[,,,,,],Choice - [[Remain silent.]
[,,,,,,,]]}
,,,,,,,,,,,,,
Jump to loop_ending
],Choice - ''I'm sorry, but I can't do...
[,
Assign "felina_slain_apologize" = Val (Bool True)
,,,,,
Jump to felina_slain_start
],Choice - [[Slay the Princess.]
[,,,
Jump to felina_slain_start
]]}
]}
]}
,
{Label: felina_cabin_hostile_start
[
[If Var "blade_held" == Val (Bool False) [
[If Var "felina_stated_goal" == Val (String "slay") [,,,]]
,
[Else [,,,]]
,,,,,]]
,
[Else [
[If Var "felina_stated_goal" == Val (String "slay") [,,,]]
,
[Else [,,,]]
,,,,,,]]
,
{Choice Branch: [Choice - [[Slay the Princess.]If "blade_held" []
[,,,
Jump to felina_slain_start
],Choice - [[Sit with her.]
[,,,,
[If "blade_held" [
Assign "quick_menu" = Val (Bool False)
,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
Jump to felina_cabin_hostile_menu_blade
]]
,
[Else [
Assign "quick_menu" = Val (Bool False)
,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
Jump to felina_cabin_hostile_menu_empty
]]
]]}
]}
,
{Label: felina_cabin_hostile_menu_empty
[,
{Choice Branch: [Choice - (Explore) ''It's so good to...If Var "felina_leave_intro" == Val (Bool False) []
[
Assign "felina_leave_intro" = Val (Bool True)
,
Assign "felina_leave_count" += Val (Int 1)
,,,,,,,
Jump to felina_cabin_hostile_menu_empty
],Choice - (Explore) ''I'm sorry for a...If Var "felina_leave_apologize" == Val (Bool False) []
[
Assign "felina_leave_apologize" = Val (Bool True)
,
Assign "felina_leave_count" += Val (Int 1)
,
[If Var "first_mound" == Val (String "prisonerhead") || Var "first_mound" == Val (String "prisonerchain") || Var "first_mound" == Val (String "greyprisoner") || Var "first_mound" == Val (String "cage") [,,,]]
,
[If Var "first_mound" == Val (String "razor") || Var "first_mound" == Val (String "razorheart") [
[If "razor_revival" [,,,,,,,]]
,
[Else [,,,,
[If "razor_loop1_killed" [,,,]]
,
[Else [,,,]]
]]
]]
,
[If Var "first_mound" == Val (String "nightmare") || Var "first_mound" == Val (String "clarity") || Var "first_mound" == Val (String "wraith") && Var "wraith_source" == Val (String "nightmare") [,,,,,,,]]
,
[If Var "first_mound" == Val (String "spectre") || Var "first_mound" == Val (String "wraith") && Var "wraith_source" == Val (String "spectre") || Var "first_mound" == Val (String "dragon") || Var "first_mound" == Val (String "dragonfused") || Var "first_mound" == Val (String "dragonhand") [,,,,,,,]]
,
[If Var "first_mound" == Val (String "tower") || Var "first_mound" == Val (String "apotheosis") || Var "first_mound" == Val (String "fury") || Var "first_mound" == Val (String "furyheart") && Var "fury_source" == Val (String "tower") [,,,,,,,]]
,
[If Var "first_mound" == Val (String "adversary") || Var "first_mound" == Val (String "needle") || Var "first_mound" == Val (String "fury") || Var "first_mound" == Val (String "furyheart") && Var "fury_source" != Val (String "tower") [,,,,,,,]]
,,,,,
Jump to felina_cabin_hostile_menu_empty
],Choice - (Explore) ''I don't think I...If Var "felina_cabin_god_comment" == Val (Bool False) []
[
Assign "felina_cabin_god_comment" = Val (Bool True)
,
Assign "felina_leave_count" += Val (Int 1)
,,,,,,,,,,,
Jump to felina_cabin_hostile_menu_empty
],Choice - (Explore) ''Are you... the ...If Var "felina_cabin_same_comment" == Val (Bool False) []
[
Assign "felina_cabin_same_comment" = Val (Bool True)
,
Assign "felina_leave_count" += Val (Int 1)
,,,,,,,
Jump to felina_cabin_hostile_menu_empty
],Choice - (Explore) ''Which... Prince...If Var "felina_leave_which_princess" == Val (Bool False) []
[
Assign "felina_leave_which_princess" = Val (Bool True)
,
Assign "felina_leave_count" += Val (Int 1)
,,,,,,,,,,,
Jump to felina_cabin_hostile_menu_empty
],Choice - (Explore) ''So, now that we...If Var "felina_leave_name" == Val (Bool False) []
[
Assign "felina_leave_name" = Val (Bool True)
,
Assign "felina_leave_count" += Val (Int 1)
,
[If "felina_menu_names" || "mirror_mound_reveal" [,,,]]
,
[Else [,,,]]
,,,,,,,,,,,,,
Jump to felina_cabin_hostile_menu_empty
],Choice - (Explore) ''None of this wa...If Var "felina_leave_fair" == Val (Bool False) []
[
Assign "felina_leave_fair" = Val (Bool True)
,
Assign "felina_leave_count" += Val (Int 1)
,,,,,,,
Jump to felina_cabin_hostile_menu_empty
],Choice - (Explore) ''I only wanted t...If Var "felina_stated_goal" == Val (String "slay") && Var "hostile_slay_comment" == Val (Bool False) []
[
Assign "hostile_slay_comment" = Val (Bool True)
,
Assign "felina_leave_count" += Val (Int 1)
,,,,,,,
Jump to felina_cabin_hostile_menu_empty
],Choice - (Explore) ''I don't think I...If Var "felina_stated_goal" == Val (String "slay") && Var "hostile_slay_comment" == Val (Bool False) []
[
Assign "hostile_slay_comment" = Val (Bool True)
,
Assign "felina_leave_count" += Val (Int 1)
,,,,,,,
Jump to felina_cabin_hostile_menu_empty
],Choice - (Explore) ''What do you thi...If Var "felina_leave_mound_thoughts" == Val (Bool False) []
[
Assign "felina_leave_count" += Val (Int 1)
,
Assign "felina_leave_mound_thoughts" = Val (Bool True)
,,,,,,,,,,,,,
[If "felina_cabin_same_comment" [,,,]]
,
[Else [,,,]]
,,,,,
Jump to felina_cabin_hostile_menu_empty
],Choice - ''What if we just leave?''If Var "felina_leave_count" < Val (Int 9) []
[,,
Jump to felina_hostile_leave_join_menu
],Choice - ''I think the only thing le...If Var "felina_leave_count" >= Val (Int 9) []
[,,
{Label: felina_hostile_leave_join_menu
[,,,,,,
{Label: felina_harsh_hand_menu
[
{Choice Branch: [Choice - (Explore) [[Take her hand i...If Var "felina_cabin_leave_hand_hold" == Val (Bool False) []
[
Assign "felina_cabin_leave_hand_hold" = Val (Bool True)
,,,,,
Jump to felina_harsh_hand_menu
,
Jump to felina_harsh_hand_menu
],Choice - ''I don't know, but I've al...
[
[If "felina_cabin_leave_hand_hold" [,,]]
,
[Else [,]]
,,
[If "felina_cabin_leave_hand_hold" [,]]
,
[Else [,]]
,],Choice - ''Not knowing what it means...
[
[If "felina_cabin_leave_hand_hold" [,,]]
,
[Else [,]]
,,
[If "felina_cabin_leave_hand_hold" [,]]
,
[Else [,]]
,],Choice - ''It doesn't matter what ha...
[
[If "felina_cabin_leave_hand_hold" [,,]]
,
[Else [,]]
,,
[If "felina_cabin_leave_hand_hold" [,]]
,
[Else [,]]
,],Choice - [[There's no need for words...If "felina_cabin_leave_hand_hold" []
[,,,,,,
Jump to felina_leave_cabin_ending
]]}
]}
,
[If Var "felina_cabin_leave_hand_hold" == Val (Bool False) [,,,]]
,
[Else [,]]
,
Jump to felina_leave_cabin_ending
]}
]]}
]}
,
{Label: felina_cabin_hostile_menu_blade
[
{Choice Branch: [Choice - (Explore) ''I don't think I...If Var "felina_cabin_god_comment" == Val (Bool False) []
[
Assign "felina_cabin_god_comment" = Val (Bool True)
,,,,,,,
Jump to felina_cabin_hostile_menu_blade
],Choice - (Explore) ''Are you... the ...If Var "felina_cabin_same_comment" == Val (Bool False) []
[
Assign "felina_cabin_same_comment" = Val (Bool True)
,,,,,,,
Jump to felina_cabin_hostile_menu_blade
],Choice - (Explore) ''I only wanted t...If Var "felina_stated_goal" == Val (String "slay") []
[
Jump to felina_loop_hostile
],Choice - (Explore) ''I don't want to...
[
Jump to felina_loop_hostile
],Choice - (Explore) ''I don't think I...If Var "felina_stated_goal" == Val (String "slay") []
[
Jump to felina_loop_hostile
],Choice - (Explore) ''What are we goi...
[
Jump to felina_loop_hostile
],Choice - (Explore) ''I don't want to...
[
Jump to felina_loop_hostile
],Choice - ''I'm sorry.'' [[Slay the P...
[
Assign "felina_slain_apologize" = Val (Bool True)
,
Jump to felina_slain_start
],Choice - [[Slay the Princess.]
[,,
Jump to felina_slain_start
]]}
]}
,
{Label: felina_loop_hostile
[,,,,,,,,,
[If "mirror_construct" [,,,]]
,
[Else [,,,]]
,,,,,,,,,
{Label: loop_ending_hostile_menu
[
{Choice Branch: [Choice - (Explore) ''Would resetting...If Var "loop_reset_help" == Val (Bool False) []
[
Assign "loop_reset_help" = Val (Bool True)
,,,,,,,
Jump to loop_ending_hostile_menu
],Choice - (Explore) ''I don't want to...If Var "loop_forget" == Val (Bool False) []
[
Assign "loop_forget" = Val (Bool True)
,,,,,,,
Jump to loop_ending_hostile_menu
],Choice - (Explore) ''We're going to ...If Var "loop_return" == Val (Bool False) []
[
Assign "loop_return" = Val (Bool True)
,,,,,
Jump to loop_ending_hostile_menu
],Choice - (Explore) ''If we're talkin...If Var "loop_repeat" == Val (Bool False) []
[
Assign "loop_repeat" = Val (Bool True)
,,,,,,,
Jump to loop_ending_hostile_menu
],Choice - (Explore) ''How do you know...If Var "loop_worse" == Val (Bool False) && "loop_repeat" []
[
Assign "loop_worse" = Val (Bool True)
,,,,,,,,,,,
Jump to loop_ending_hostile_menu
],Choice - (Explore) ''We'd have to de...If Var "loop_worse_follow" == Val (Bool False) && "loop_worse" []
[
Assign "loop_worse_follow" = Val (Bool True)
,,,,,,,
Jump to loop_ending_hostile_menu
],Choice - (Explore) ''This isn't fair...If Var "loop_fair" == Val (Bool False) []
[
Assign "loop_fair" = Val (Bool True)
,,,,,,,
Jump to loop_ending_hostile_menu
],Choice - (Explore) ''Is there any ot...If Var "loop_other_way" == Val (Bool False) []
[
Assign "loop_other_way" = Val (Bool True)
,,,,,,,
Jump to loop_ending_hostile_menu
],Choice - (Explore) ''I take it all b...If Var "loop_regret" == Val (Bool False) []
[
Assign "loop_regret" = Val (Bool True)
,,,,,,,
Jump to loop_ending_hostile_menu
],Choice - ''Okay. Then let's do it. I...
[,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,
{Choice Branch: [Choice - ''I love you.''
[,,,,,],Choice - ''Just do it.''
[,,,,,],Choice - ''I'll see you soon.''
[,,,,,],Choice - [[Remain silent.]
[,,,,,,,]]}
,,,,,,,,,,,,,
Jump to loop_ending
],Choice - ''I'm sorry, but I can't do...
[
Assign "felina_slain_apologize" = Val (Bool True)
,,
Jump to felina_slain_start
],Choice - [[Slay the Princess.]
[,,,
Jump to felina_slain_start
]]}
]}
]}
,
{Label: felina_cabin_start
[,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If Var "final_offer" == Val (Bool False) []]
,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
[If Var "mirror_n_cruel_count" >= Val (Int 2) && Var "felina_intermission_hero_menu_cruelty_comment" == Val (Bool False) [
Assign "felina_intermission_hero_menu_cruelty_comment" = Val (Bool True)
,,,,]]
,
[Else [,]]
,,,
{Label: felina_cabin_menu_start
[,,,,,,,
{Choice Branch: [Choice - (Explore) ''I'd like that. ...If Var "felina_cabin_menu_count" == Val (Int 0) && Var "felina_cabin_describe" == Val (Bool False) []
[
{Label: felina_cabin_describe_join
[
Assign "felina_cabin_describe" = Val (Bool True)
,
Assign "felina_cabin_menu_count" += Val (Int 1)
,,,,
[If "final_offer" [,,,,,,
[If Var "pacifism_count" == Val (Int 5) [,,
[If "fury_pacifism" [,]]
]]
]]
,
[Else [,,,
[If Var "felina_stated_goal" == Val (String "slay") [,]]
,
[Else [,]]
]]
,
Jump to felina_cabin_menu_start
]}
],Choice - (Explore) ''If the offer st...If Var "felina_cabin_menu_count" != Val (Int 0) && Var "felina_cabin_describe" == Val (Bool False) []
[
Jump to felina_cabin_describe_join
],Choice - (Explore) ''Is it just you ...If Var "felina_cabin_alone" == Val (Bool False) []
[
Assign "felina_cabin_alone" = Val (Bool True)
,
Assign "felina_cabin_menu_count" += Val (Int 1)
,,,
Jump to felina_cabin_menu_start
],Choice - (Explore) ''Is the Narrator...If Var "felina_cabin_narrator_dead" == Val (Bool False) []
[
Assign "felina_cabin_narrator_dead" = Val (Bool True)
,
Assign "felina_cabin_menu_count" += Val (Int 1)
,,,
Jump to felina_cabin_menu_start
],Choice - (Explore) ''Good riddance.''If "felina_cabin_narrator_dead" && Var "felina_cabin_narrator_final_thoughts" == Val (String "") []
[
Assign "felina_cabin_narrator_final_thoughts" = Val (String "byefelicia")
,
Assign "felina_cabin_menu_count" += Val (Int 1)
,
[If Var "felina_stated_goal" == Val (String "slay") [,]]
,
[Else [,]]
,
Jump to felina_cabin_menu_start
],Choice - (Explore) ''I don't actuall...If "felina_cabin_narrator_dead" && Var "felina_cabin_narrator_final_thoughts" == Val (String "") []
[
Assign "felina_cabin_narrator_final_thoughts" = Val (String "unsure")
,
Assign "felina_cabin_menu_count" += Val (Int 1)
,
{Label: felina_cabin_complicated_feelings
[,,
Jump to felina_cabin_menu_start
]}
],Choice - (Explore) ''It's funny. Aft...If "felina_cabin_narrator_dead" && Var "felina_cabin_narrator_final_thoughts" == Val (String "") []
[
Assign "felina_cabin_narrator_final_thoughts" = Val (String "sad")
,
Assign "felina_cabin_menu_count" += Val (Int 1)
,
[If Var "felina_stated_goal" == Val (String "slay") [,]]
,
[Else [
Jump to felina_cabin_complicated_feelings
]]
,
Jump to felina_cabin_menu_start
],Choice - (Explore) [[Take the blade.]If Var "blade_held" == Val (Bool False) && Var "final_offer" == Val (Bool False) []
[
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,
Jump to felina_cabin_menu_start
],Choice - [[Enter the basement.]
[
[If Var "blade_held" == Val (Bool False) && Var "final_offer" == Val (Bool False) [
[If Var "felina_stated_goal" == Val (String "slay") && Var "final_offer" == Val (Bool False) [,]]
,
[Else [,]]
]]
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,
[If Var "first_princess" == Val (String "harsh") [
[If Var "felina_stated_goal" == Val (String "slay") [,]]
,
[Else [,]]
,,]]
,
[Else [
[If Var "felina_stated_goal" == Val (String "slay") [,]]
,
[Else [,]]
,,]]
,
{Choice Branch: [Choice - [[Continue down the stairs.]
[,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
[If Var "first_princess" == Val (String "harsh") [
Jump to felina_cabin_hostile_start
]]
,
[Else [
Jump to felina_cabin_gentle_start
]]
]]}
]]}
]}
]}
,
{Label: felina_cabin_strange_start
[,,,,,,,,,,
[If Var "final_offer" == Val (Bool False) []]
,,,,,,,,,,,,,,
[If Var "mirror_n_cruel_count" >= Val (Int 2) [,,,,,]]
,
{Label: felina_cabin_strange_menu_start
[
{Choice Branch: [Choice - (Explore) ''I'd like that d...If Var "felina_cabin_menu_count" == Val (Int 0) && Var "felina_cabin_describe" == Val (Bool False) []
[
{Label: felina_cabin_strange_describe_join
[
Assign "felina_cabin_describe" = Val (Bool True)
,
Assign "felina_cabin_menu_count" += Val (Int 1)
,,,
[If "final_offer" [,,,,,,,,,,,,,,,]]
,
[Else [,,,,,,
[If "stranger_1_cabin_blade_tossed" [,,,]]
,
[Else [,,,,,]]
,
[If Var "felina_stated_goal" == Val (String "slay") [,]]
,
[Else [,]]
]]
,
Jump to felina_cabin_strange_menu_start
]}
],Choice - (Explore) ''If the offer st...If Var "felina_cabin_menu_count" != Val (Int 0) && Var "felina_cabin_describe" == Val (Bool False) []
[
Jump to felina_cabin_strange_describe_join
],Choice - (Explore) ''Is it just the ...If Var "felina_cabin_alone" == Val (Bool False) []
[
Assign "felina_cabin_alone" = Val (Bool True)
,
Assign "felina_cabin_menu_count" += Val (Int 1)
,,,,,
Jump to felina_cabin_strange_menu_start
],Choice - (Explore) ''Is the Narrator...If Var "felina_cabin_narrator_dead" == Val (Bool False) []
[
Assign "felina_cabin_narrator_dead" = Val (Bool True)
,
Assign "felina_cabin_menu_count" += Val (Int 1)
,,,,,
Jump to felina_cabin_strange_menu_start
],Choice - (Explore) ''Good riddance.''If "felina_cabin_narrator_dead" && Var "felina_cabin_narrator_final_thoughts" == Val (String "") []
[
Assign "felina_cabin_narrator_final_thoughts" = Val (String "byefelicia")
,
Assign "felina_cabin_menu_count" += Val (Int 1)
,,,
[If Var "felina_stated_goal" == Val (String "slay") [,]]
,
[Else [,]]
,
Jump to felina_cabin_strange_menu_start
],Choice - (Explore) ''I don't actuall...If "felina_cabin_narrator_dead" && Var "felina_cabin_narrator_final_thoughts" == Val (String "") []
[
Assign "felina_cabin_narrator_final_thoughts" = Val (String "unsure")
,
Assign "felina_cabin_menu_count" += Val (Int 1)
,
{Label: felina_cabin_strange_complicated_feelings
[,,
[If Var "felina_cabin_narrator_final_thoughts" == Val (String "unsure") [,]]
,
Jump to felina_cabin_strange_menu_start
]}
],Choice - (Explore) ''It's funny. Aft...If "felina_cabin_narrator_dead" && Var "felina_cabin_narrator_final_thoughts" == Val (String "") []
[
Assign "felina_cabin_narrator_final_thoughts" = Val (String "sad")
,
Assign "felina_cabin_menu_count" += Val (Int 1)
,,,
[If Var "felina_stated_goal" == Val (String "slay") [,]]
,
[Else [
Jump to felina_cabin_strange_complicated_feelings
]]
,
Jump to felina_cabin_strange_menu_start
],Choice - (Explore) [[Take the blade.]If Var "blade_held" == Val (Bool False) && Var "stranger_felina_blade_thrown" == Val (Bool False) && Var "final_offer" == Val (Bool False) []
[,
Assign "blade_held" = Val (Bool True)
,
[If "stranger_other_way" [
Assign "default_mouse" = Val (String "thumb")
]]
,
[Else [
Assign "default_mouse" = Val (String "blade")
]]
,,,,,,,,,,,
[If "stranger_1_cabin_blade_tossed" [,]]
,
[Else [,]]
,,,
Jump to felina_cabin_strange_menu_start
],Choice - (Explore) [[Throw the blade...If "blade_held" && Var "stranger_felina_blade_thrown" == Val (Bool False) []
[,
Assign "stranger_felina_blade_thrown" = Val (Bool True)
,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,
Jump to felina_cabin_strange_menu_start
],Choice - [[Enter the basement.]
[
[If Var "blade_held" == Val (Bool False) && Var "stranger_felina_blade_thrown" == Val (Bool False) && Var "final_offer" == Val (Bool False) [
[If Var "felina_stated_goal" == Val (String "slay") && Var "final_offer" == Val (Bool False) [,]]
,
[Else [,]]
,,]]
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,
[If Var "felina_stated_goal" == Val (String "slay") [,]]
,
[Else [,]]
,,,
{Choice Branch: [Choice - [[Continue down the stairs.]
[,
Assign "quick_menu" = Val (Bool False)
,,,,,,,
Jump to felina_cabin_strange_basement
]]}
]]}
]}
]}
,
{Label: felina_cabin_strange_basement
[,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,
[If Var "blade_held" == Val (Bool False) [
[If Var "felina_stated_goal" == Val (String "slay") [,,,,,,,]]
,
[Else [,,,]]
,,,,,]]
,
[Else [
[If Var "felina_stated_goal" == Val (String "slay") [,,,,]]
,
[Else [,,,,]]
]]
,
{Choice Branch: [Choice - [[Slay the Princess.]If "blade_held" []
[,,,
Jump to felina_slain_start
],Choice - [[Sit with them.]
[,,
[If "blade_held" [
Assign "quick_menu" = Val (Bool False)
,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
Jump to felina_cabin_strange_talk_blade_menu
]]
,
[Else [
Assign "quick_menu" = Val (Bool False)
,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
Jump to felina_cabin_strange_empty_talk_menu
]]
]]}
]}
,
{Label: felina_cabin_strange_empty_talk_menu
[,,,,,,,
{Choice Branch: [Choice - (Explore) ''I never got the...If Var "felina_stranger_sorry" == Val (Bool False) []
[
Assign "felina_stranger_sorry" = Val (Bool True)
,
Assign "felina_stranger_count" += Val (Int 1)
,,,,,,,,,,,,
Jump to felina_cabin_strange_empty_talk_menu
],Choice - (Explore) ''It's so good to...If Var "felina_stranger_intro" == Val (Bool False) []
[
Assign "felina_stranger_intro" = Val (Bool True)
,
Assign "felina_stranger_count" += Val (Int 1)
,,,,,,,
Jump to felina_cabin_strange_empty_talk_menu
],Choice - (Explore) ''I don't think I...If Var "felina_cabin_god_comment" == Val (Bool False) []
[
Assign "felina_cabin_god_comment" = Val (Bool True)
,
Assign "felina_stranger_count" += Val (Int 1)
,,,,,,,,,,,,
Jump to felina_cabin_strange_empty_talk_menu
],Choice - (Explore) ''Are you... the ...If Var "felina_cabin_same_comment" == Val (Bool False) []
[
Assign "felina_cabin_same_comment" = Val (Bool True)
,
Assign "felina_stranger_count" += Val (Int 1)
,,,,,,,,,,,,,,,
Jump to felina_cabin_strange_empty_talk_menu
],Choice - (Explore) ''What do you thi...If Var "felina_stranger_mound_thoughts" == Val (Bool False) []
[
Assign "felina_stranger_count" += Val (Int 1)
,
Assign "felina_stranger_mound_thoughts" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,
Jump to felina_cabin_strange_empty_talk_menu
],Choice - (Explore) ''Which... Prince...If Var "felina_stranger_which" == Val (Bool False) []
[
Assign "felina_stranger_which" = Val (Bool True)
,
Assign "felina_stranger_count" += Val (Int 1)
,,,,,,,,,,,,,,,,,
Jump to felina_cabin_strange_empty_talk_menu
],Choice - (Explore) ''So, now that we...If Var "felina_stranger_name" == Val (Bool False) []
[
Assign "felina_stranger_name" = Val (Bool True)
,
Assign "felina_stranger_count" += Val (Int 1)
,,,,,,,,,,,
Jump to felina_cabin_strange_empty_talk_menu
],Choice - (Explore) ''None of this wa...If Var "felina_stranger_fair" == Val (Bool False) []
[
Assign "felina_stranger_fair" = Val (Bool True)
,
Assign "felina_stranger_count" += Val (Int 1)
,,,,,,,,,,,,,,,
Jump to felina_cabin_strange_empty_talk_menu
],Choice - (Explore) ''I only wanted t...If Var "felina_stated_goal" == Val (String "slay") && Var "felina_cabin_same_comment" == Val (Bool False) && Var "felina_strange_slay_comment" == Val (Bool False) []
[,,,,,,,,
{Label: felina_strange_slay_cabin_join
[
Assign "felina_stranger_count" += Val (Int 1)
,
Assign "felina_strange_slay_comment" = Val (Bool True)
,,,,,,,
Jump to felina_cabin_strange_empty_talk_menu
]}
],Choice - (Explore) ''I only wanted t...If Var "felina_stated_goal" == Val (String "slay") && "felina_cabin_same_comment" && Var "felina_strange_slay_comment" == Val (Bool False) []
[,,
Jump to felina_strange_slay_cabin_join
],Choice - (Explore) ''I don't think I...If Var "felina_stated_goal" == Val (String "slay") && Var "felina_strange_slay_comment" == Val (Bool False) []
[,,
Jump to felina_strange_slay_cabin_join
],Choice - ''What if we just leave?''If Var "felina_stranger_count" < Val (Int 9) []
[,,
Jump to felina_strange_leave_join_menu
],Choice - ''I think the only thing le...If Var "felina_stranger_count" >= Val (Int 9) []
[
{Label: felina_strange_leave_join_menu
[,,,,,,,,,,
{Label: stranger_leave_hand_menu
[
{Choice Branch: [Choice - (Explore) [[Take their hand...If Var "felina_cabin_leave_hand_hold" == Val (Bool False) []
[
Assign "felina_cabin_leave_hand_hold" = Val (Bool True)
,,,,,
Jump to stranger_leave_hand_menu
,
Jump to felina_leave_cabin_ending
],Choice - ''I've always wanted to lea...
[
Jump to felina_strange_pre_leave
],Choice - ''Not knowing is exactly wh...
[
Jump to felina_strange_pre_leave
],Choice - ''It doesn't matter what it...
[
Jump to felina_strange_pre_leave
],Choice - [[There's no need for words...If "felina_cabin_leave_hand_hold" []
[
Jump to felina_strange_pre_leave
]]}
]}
,
{Label: felina_strange_pre_leave
[
[If Var "felina_cabin_leave_hand_hold" == Val (Bool False) [,]]
,,
[If "felina_cabin_leave_hand_hold" []]
,
[Else []]
,,,
[If "felina_cabin_leave_hand_hold" []]
,
Jump to felina_leave_cabin_ending
]}
]}
]]}
]}
,
{Label: felina_cabin_strange_talk_blade_menu
[
{Choice Branch: [Choice - (Explore) ''I never got the...If Var "felina_stranger_sorry" == Val (Bool False) []
[
Assign "felina_stranger_sorry" = Val (Bool True)
,,,,,,,,,,,,,
Jump to felina_cabin_strange_talk_blade_menu
],Choice - (Explore) ''I don't think I...If Var "felina_cabin_god_comment" == Val (Bool False) []
[
Assign "felina_cabin_god_comment" = Val (Bool True)
,,,,,,,,,,,
Jump to felina_cabin_strange_talk_blade_menu
],Choice - (Explore) ''Are you... the ...If Var "felina_cabin_same_comment" == Val (Bool False) []
[
Assign "felina_cabin_same_comment" = Val (Bool True)
,,,,,,,,,,,,,,,
Jump to felina_cabin_strange_talk_blade_menu
],Choice - (Explore) ''I only wanted t...If Var "felina_stated_goal" == Val (String "slay") && Var "felina_loop_strange_slay_weird_comment" == Val (Bool False) []
[,
Assign "felina_loop_strange_slay_weird_comment" = Val (Bool True)
,,,,,,,,,,
Jump to felina_cabin_strange_talk_blade_menu
],Choice - (Explore) ''I don't want to...
[
Assign "felina_loop_strange_way_out_comment" = Val (Bool True)
,
Jump to felina_loop_strange
],Choice - (Explore) ''I don't think I...If Var "felina_stated_goal" == Val (String "slay") []
[
Assign "felina_loop_strange_slay_comment" = Val (Bool True)
,
Jump to felina_loop_strange
],Choice - (Explore) ''What are we goi...
[
Jump to felina_loop_strange
],Choice - (Explore) ''I don't want to...
[
Assign "felina_loop_strange_slay_comment" = Val (Bool True)
,
Jump to felina_loop_strange
],Choice - ''I'm sorry.'' [[Slay the P...
[
Assign "felina_slain_apologize" = Val (Bool True)
,
Jump to felina_slain_start
],Choice - [[Slay the Princess.]
[,,
Jump to felina_slain_start
]]}
]}
,
{Label: felina_loop_strange
[,,,
[If "felina_loop_strange_way_out_comment" [,,,]]
,
[Elif "felina_loop_strange_slay_weird_comment" [,,,]]
,
[Elif "felina_loop_strange_slay_comment" [,,,]]
,
[Else [,,,]]
,,,,,
[If "mirror_construct" [,,,]]
,
[Else [,,,]]
,,,,,,,,,,,
{Label: loop_ending_strange_menu
[
{Choice Branch: [Choice - (Explore) ''Would resetting...If Var "loop_reset_help" == Val (Bool False) []
[
Assign "loop_reset_help" = Val (Bool True)
,,,,,,,,,,,
Jump to loop_ending_strange_menu
],Choice - (Explore) ''I don't want to...If Var "loop_forget" == Val (Bool False) []
[
Assign "loop_forget" = Val (Bool True)
,,,,,,,,,,,,,,,
Jump to loop_ending_strange_menu
],Choice - (Explore) ''We're going to ...If Var "loop_return" == Val (Bool False) []
[
Assign "loop_return" = Val (Bool True)
,,,,,,,
Jump to loop_ending_strange_menu
],Choice - (Explore) ''If we're here t...If Var "loop_repeat" == Val (Bool False) []
[
Assign "loop_repeat" = Val (Bool True)
,,,,,,,,,,,
Jump to loop_ending_strange_menu
],Choice - (Explore) ''How do you know...If Var "loop_worse" == Val (Bool False) && "loop_repeat" []
[
Assign "loop_worse" = Val (Bool True)
,,,,,,,,,,,
Jump to loop_ending_strange_menu
],Choice - (Explore) ''But how can we ...If Var "loop_worse_follow" == Val (Bool False) && "loop_worse" []
[
Assign "loop_worse_follow" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,
Jump to loop_ending_strange_menu
],Choice - (Explore) ''This isn't fair...If Var "loop_fair" == Val (Bool False) []
[
Assign "loop_fair" = Val (Bool True)
,,,,,,,,,,,,,,,
Jump to loop_ending_strange_menu
],Choice - (Explore) ''Is there any ot...If Var "loop_other_way" == Val (Bool False) []
[
Assign "loop_other_way" = Val (Bool True)
,,,,,,,,,,,
Jump to loop_ending_strange_menu
],Choice - (Explore) ''I take it all b...If Var "loop_regret" == Val (Bool False) []
[
Assign "loop_regret" = Val (Bool True)
,,,,,,,,,,,,,,,,,
Jump to loop_ending_strange_menu
],Choice - ''Okay. Then let's do it. I...
[,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,
{Choice Branch: [Choice - ''I love you.''
[,,,],Choice - ''Just do it.''
[,,,],Choice - ''I'll see you soon.''
[,,,],Choice - [[Remain silent.]
[,,,,,]]}
,,,,,,,,,,,,,
Jump to loop_ending
],Choice - ''I'm sorry, but I can't do...
[,
Assign "felina_slain_apologize" = Val (Bool True)
,
Jump to felina_slain_start
],Choice - [[Slay the Princess.]
[,,,
Jump to felina_slain_start
]]}
]}
]}
,
{Label: felina_fight_staging
[
Assign "fought_mound" = Val (Bool True)
,,,,,,,
Assign "felina_round" += Val (Int 1)
,
[If Var "felina_violence_counter" > Val (Int 0) && Var "felina_come_from_violence" == Val (Bool False) && Var "felina_violence_broken" == Val (Bool False) [
Assign "felina_violence_broken" = Val (Bool True)
,,,]]
,
Assign "come_from_tower" = Val (Bool False)
,
Assign "felina_come_from_violence" = Val (Bool False)
,
[If Var "felina_round" == Val (Int 1) [,
[If Var "fifth_mound" == Val (String "adversary") [
Jump to felina_adversary_start
]]
,
[Elif Var "fifth_mound" == Val (String "needle") [
Jump to felina_adversary2_start
]]
,
[Elif Var "fifth_mound" == Val (String "beast") [
Jump to felina_beast_start
]]
,
[Elif Var "fifth_mound" == Val (String "den") [
Jump to felina_beast2_start
]]
,
[Elif Var "fifth_mound" == Val (String "damsel") || Var "fifth_mound" == Val (String "dereal") [
Jump to felina_damsel_start
]]
,
[Elif Var "fifth_mound" == Val (String "nightmare") [
Jump to felina_nightmare_start
]]
,
[Elif Var "fifth_mound" == Val (String "clarity") [
Jump to felina_nightmare2_start
]]
,
[Elif Var "fifth_mound" == Val (String "prisonerhead") || Var "fifth_mound" == Val (String "prisonerchain") [
Jump to felina_prisoner_start
]]
,
[Elif Var "fifth_mound" == Val (String "razor") || Var "fifth_mound" == Val (String "razorheart") [
Jump to felina_razor_start
]]
,
[Elif Var "fifth_mound" == Val (String "spectre") [
Jump to felina_spectre_start
]]
,
[Elif Var "fifth_mound" == Val (String "stranger") [
Jump to felina_stranger_start
]]
,
[Elif Var "fifth_mound" == Val (String "tower") || Var "fifth_mound" == Val (String "apotheosis") [
Jump to felina_tower_start
]]
,
[Elif Var "fifth_mound" == Val (String "witch") [
Jump to felina_witch_start
]]
,
[Elif Var "fifth_mound" == Val (String "thorn") [
Jump to felina_thorn_start
]]
,
[Elif Var "fifth_mound" == Val (String "fury") || Var "fifth_mound" == Val (String "furyheart") [
Jump to felina_fury_start
]]
,
[Elif Var "fifth_mound" == Val (String "greydamsel") || Var "fifth_mound" == Val (String "greyprisoner") [
Jump to felina_grey_start
]]
,
[Elif Var "fifth_mound" == Val (String "wildnerves") || Var "fifth_mound" == Val (String "wildwound") [
Jump to felina_wild_start
]]
,
[Elif Var "fifth_mound" == Val (String "wraith") [
Jump to felina_wraith_start
]]
,
[Elif Var "fifth_mound" == Val (String "dragon") || Var "fifth_mound" == Val (String "dragonfused") || Var "fifth_mound" == Val (String "dragonhand") [
Jump to felina_dragon_start
]]
,
[Elif Var "fifth_mound" == Val (String "cage") [
Jump to felina_cage_start
]]
,
[Elif Var "fifth_mound" == Val (String "happy") || Var "fifth_mound" == Val (String "happydry") [
Jump to felina_happy_start
]]
,
[Else [
Jump to felina_fight_staging
]]
]]
,
[Elif Var "felina_round" == Val (Int 2) [,
[If Var "fourth_mound" == Val (String "adversary") [
Jump to felina_adversary_start
]]
,
[Elif Var "fourth_mound" == Val (String "needle") [
Jump to felina_adversary2_start
]]
,
[Elif Var "fourth_mound" == Val (String "beast") [
Jump to felina_beast_start
]]
,
[Elif Var "fourth_mound" == Val (String "den") [
Jump to felina_beast2_start
]]
,
[Elif Var "fourth_mound" == Val (String "damsel") || Var "fourth_mound" == Val (String "dereal") [
Jump to felina_damsel_start
]]
,
[Elif Var "fourth_mound" == Val (String "nightmare") [
Jump to felina_nightmare_start
]]
,
[Elif Var "fourth_mound" == Val (String "clarity") [
Jump to felina_nightmare2_start
]]
,
[Elif Var "fourth_mound" == Val (String "prisonerhead") || Var "fourth_mound" == Val (String "prisonerchain") [
Jump to felina_prisoner_start
]]
,
[Elif Var "fourth_mound" == Val (String "razor") || Var "fourth_mound" == Val (String "razorheart") [
Jump to felina_razor_start
]]
,
[Elif Var "fourth_mound" == Val (String "spectre") [
Jump to felina_spectre_start
]]
,
[Elif Var "fourth_mound" == Val (String "stranger") [
Jump to felina_stranger_start
]]
,
[Elif Var "fourth_mound" == Val (String "tower") || Var "fourth_mound" == Val (String "apotheosis") [
Jump to felina_tower_start
]]
,
[Elif Var "fourth_mound" == Val (String "witch") [
Jump to felina_witch_start
]]
,
[Elif Var "fourth_mound" == Val (String "thorn") [
Jump to felina_thorn_start
]]
,
[Elif Var "fourth_mound" == Val (String "fury") || Var "fourth_mound" == Val (String "furyheart") [
Jump to felina_fury_start
]]
,
[Elif Var "fourth_mound" == Val (String "greydamsel") || Var "fourth_mound" == Val (String "greyprisoner") [
Jump to felina_grey_start
]]
,
[Elif Var "fourth_mound" == Val (String "wildnerves") || Var "fourth_mound" == Val (String "wildwound") [
Jump to felina_wild_start
]]
,
[Elif Var "fourth_mound" == Val (String "wraith") [
Jump to felina_wraith_start
]]
,
[Elif Var "fourth_mound" == Val (String "dragon") || Var "fourth_mound" == Val (String "dragonfused") || Var "fourth_mound" == Val (String "dragonhand") [
Jump to felina_dragon_start
]]
,
[Elif Var "fourth_mound" == Val (String "cage") [
Jump to felina_cage_start
]]
,
[Elif Var "fourth_mound" == Val (String "happy") || Var "fourth_mound" == Val (String "happydry") [
Jump to felina_happy_start
]]
,
[Else [
Jump to felina_fight_staging
]]
]]
,
[Elif Var "felina_round" == Val (Int 3) [,
[If Var "third_mound" == Val (String "adversary") [
Jump to felina_adversary_start
]]
,
[Elif Var "third_mound" == Val (String "needle") [
Jump to felina_adversary2_start
]]
,
[Elif Var "third_mound" == Val (String "beast") [
Jump to felina_beast_start
]]
,
[Elif Var "third_mound" == Val (String "den") [
Jump to felina_beast2_start
]]
,
[Elif Var "third_mound" == Val (String "damsel") || Var "third_mound" == Val (String "dereal") [
Jump to felina_damsel_start
]]
,
[Elif Var "third_mound" == Val (String "nightmare") [
Jump to felina_nightmare_start
]]
,
[Elif Var "third_mound" == Val (String "clarity") [
Jump to felina_nightmare2_start
]]
,
[Elif Var "third_mound" == Val (String "prisonerhead") || Var "third_mound" == Val (String "prisonerchain") [
Jump to felina_prisoner_start
]]
,
[Elif Var "third_mound" == Val (String "razor") || Var "third_mound" == Val (String "razorheart") [
Jump to felina_razor_start
]]
,
[Elif Var "third_mound" == Val (String "spectre") [
Jump to felina_spectre_start
]]
,
[Elif Var "third_mound" == Val (String "stranger") [
Jump to felina_stranger_start
]]
,
[Elif Var "third_mound" == Val (String "tower") || Var "third_mound" == Val (String "apotheosis") [
Jump to felina_tower_start
]]
,
[Elif Var "third_mound" == Val (String "witch") [
Jump to felina_witch_start
]]
,
[Elif Var "third_mound" == Val (String "thorn") [
Jump to felina_thorn_start
]]
,
[Elif Var "third_mound" == Val (String "fury") || Var "third_mound" == Val (String "furyheart") [
Jump to felina_fury_start
]]
,
[Elif Var "third_mound" == Val (String "greydamsel") || Var "third_mound" == Val (String "greyprisoner") [
Jump to felina_grey_start
]]
,
[Elif Var "third_mound" == Val (String "wildnerves") || Var "third_mound" == Val (String "wildwound") [
Jump to felina_wild_start
]]
,
[Elif Var "third_mound" == Val (String "wraith") [
Jump to felina_wraith_start
]]
,
[Elif Var "third_mound" == Val (String "dragon") || Var "third_mound" == Val (String "dragonfused") || Var "third_mound" == Val (String "dragonhand") [
Jump to felina_dragon_start
]]
,
[Elif Var "third_mound" == Val (String "cage") [
Jump to felina_cage_start
]]
,
[Elif Var "third_mound" == Val (String "happy") || Var "third_mound" == Val (String "happydry") [
Jump to felina_happy_start
]]
,
[Else [
Jump to felina_fight_staging
]]
]]
,
[Elif Var "felina_round" == Val (Int 4) [,
[If Var "second_mound" == Val (String "adversary") [
Jump to felina_adversary_start
]]
,
[Elif Var "second_mound" == Val (String "needle") [
Jump to felina_adversary2_start
]]
,
[Elif Var "second_mound" == Val (String "beast") [
Jump to felina_beast_start
]]
,
[Elif Var "second_mound" == Val (String "den") [
Jump to felina_beast2_start
]]
,
[Elif Var "second_mound" == Val (String "damsel") || Var "second_mound" == Val (String "dereal") [
Jump to felina_damsel_start
]]
,
[Elif Var "second_mound" == Val (String "nightmare") [
Jump to felina_nightmare_start
]]
,
[Elif Var "second_mound" == Val (String "clarity") [
Jump to felina_nightmare2_start
]]
,
[Elif Var "second_mound" == Val (String "prisonerhead") || Var "second_mound" == Val (String "prisonerchain") [
Jump to felina_prisoner_start
]]
,
[Elif Var "second_mound" == Val (String "razor") || Var "second_mound" == Val (String "razorheart") [
Jump to felina_razor_start
]]
,
[Elif Var "second_mound" == Val (String "spectre") [
Jump to felina_spectre_start
]]
,
[Elif Var "second_mound" == Val (String "stranger") [
Jump to felina_stranger_start
]]
,
[Elif Var "second_mound" == Val (String "tower") || Var "second_mound" == Val (String "apotheosis") [
Jump to felina_tower_start
]]
,
[Elif Var "second_mound" == Val (String "witch") [
Jump to felina_witch_start
]]
,
[Elif Var "second_mound" == Val (String "thorn") [
Jump to felina_thorn_start
]]
,
[Elif Var "second_mound" == Val (String "fury") || Var "second_mound" == Val (String "furyheart") [
Jump to felina_fury_start
]]
,
[Elif Var "second_mound" == Val (String "greydamsel") || Var "second_mound" == Val (String "greyprisoner") [
Jump to felina_grey_start
]]
,
[Elif Var "second_mound" == Val (String "wildnerves") || Var "second_mound" == Val (String "wildwound") [
Jump to felina_wild_start
]]
,
[Elif Var "second_mound" == Val (String "wraith") [
Jump to felina_wraith_start
]]
,
[Elif Var "second_mound" == Val (String "dragon") || Var "second_mound" == Val (String "dragonfused") || Var "second_mound" == Val (String "dragonhand") [
Jump to felina_dragon_start
]]
,
[Elif Var "second_mound" == Val (String "cage") [
Jump to felina_cage_start
]]
,
[Elif Var "second_mound" == Val (String "happy") || Var "second_mound" == Val (String "happydry") [
Jump to felina_happy_start
]]
,
[Else [
Jump to felina_fight_staging
]]
]]
,
[Elif Var "felina_round" == Val (Int 5) [
[If Var "first_mound" == Val (String "stranger") [
Jump to felina_fight_intermission
]]
,
[Else [,
[If Var "first_mound" == Val (String "adversary") [
Jump to felina_adversary_start
]]
,
[Elif Var "first_mound" == Val (String "needle") [
Jump to felina_adversary2_start
]]
,
[Elif Var "first_mound" == Val (String "beast") [
Jump to felina_beast_start
]]
,
[Elif Var "first_mound" == Val (String "den") [
Jump to felina_beast2_start
]]
,
[Elif Var "first_mound" == Val (String "damsel") || Var "first_mound" == Val (String "dereal") [
Jump to felina_damsel_start
]]
,
[Elif Var "first_mound" == Val (String "nightmare") [
Jump to felina_nightmare_start
]]
,
[Elif Var "first_mound" == Val (String "clarity") [
Jump to felina_nightmare2_start
]]
,
[Elif Var "first_mound" == Val (String "prisonerhead") || Var "first_mound" == Val (String "prisonerchain") [
Jump to felina_prisoner_start
]]
,
[Elif Var "first_mound" == Val (String "razor") || Var "first_mound" == Val (String "razorheart") [
Jump to felina_razor_start
]]
,
[Elif Var "first_mound" == Val (String "spectre") [
Jump to felina_spectre_start
]]
,
[Elif Var "first_mound" == Val (String "stranger") [
Jump to felina_stranger_start
]]
,
[Elif Var "first_mound" == Val (String "tower") || Var "first_mound" == Val (String "apotheosis") [
Jump to felina_tower_start
]]
,
[Elif Var "first_mound" == Val (String "witch") [
Jump to felina_witch_start
]]
,
[Elif Var "first_mound" == Val (String "thorn") [
Jump to felina_thorn_start
]]
,
[Elif Var "first_mound" == Val (String "fury") || Var "first_mound" == Val (String "furyheart") [
Jump to felina_fury_start
]]
,
[Elif Var "first_mound" == Val (String "greydamsel") || Var "first_mound" == Val (String "greyprisoner") [
Jump to felina_grey_start
]]
,
[Elif Var "first_mound" == Val (String "wildnerves") || Var "first_mound" == Val (String "wildwound") [
Jump to felina_wild_start
]]
,
[Elif Var "first_mound" == Val (String "wraith") [
Jump to felina_wraith_start
]]
,
[Elif Var "first_mound" == Val (String "dragon") || Var "first_mound" == Val (String "dragonfused") || Var "first_mound" == Val (String "dragonhand") [
Jump to felina_dragon_start
]]
,
[Elif Var "first_mound" == Val (String "cage") [
Jump to felina_cage_start
]]
,
[Elif Var "first_mound" == Val (String "happy") || Var "first_mound" == Val (String "happydry") [
Jump to felina_happy_start
]]
,
[Else [
Jump to felina_fight_staging
]]
]]
]]
,
[Else [
Jump to felina_fight_intermission
]]
]}
,
{Label: felina_fight_intermission
[,,
[If Var "felina_fight_effective_resistance" > Val (Int 3) [
Jump to felina_fight_intermission_winning
]]
,
[Elif Var "felina_fight_effective_resistance" > Val (Int 1) [
Jump to felina_fight_intermission_draw
]]
,
[Else [
Jump to felina_fight_intermission_losing
]]
]}
,
{Label: felina_fight_intermission_winning
[,,,,,,,
[If Var "felina_stated_goal" == Val (String "slay") [,,,]]
,
Jump to felina_fight_intermission_join
]}
,
{Label: felina_fight_intermission_draw
[,,,
[If Var "felina_stated_goal" == Val (String "slay") [,,,]]
,
Jump to felina_fight_intermission_join
]}
,
{Label: felina_fight_intermission_losing
[,,,,,,,,
Jump to felina_fight_intermission_join
]}
,
{Label: felina_fight_intermission_join
[,,,,,,,,
[If Var "felina_stated_goal" == Val (String "slay") [,,,]]
,,,,,]}
,
{Label: felina_fight_intermission_menu
[,,
{Choice Branch: [Choice - (Explore) ''It's easy to be...If Var "felina_intermission_easy" == Val (Bool False) []
[
Assign "felina_intermission_easy" = Val (Bool True)
,,,,,,
Jump to felina_fight_intermission_menu
],Choice - (Explore) ''What do you thi...If Var "felina_intermission_leave" == Val (Bool False) []
[
Assign "felina_intermission_leave" = Val (Bool True)
,,,,,,
Jump to felina_fight_intermission_menu
],Choice - ''Okay. I'm ready to go. Bu...
[,,
Jump to felina_freedom_join
],Choice - ''I never wanted to fight y...If Var "felina_stated_goal" != Val (String "slay") []
[,,
Jump to felina_freedom_join
],Choice - ''I can't let that happen. ...
[
Assign "felina_stated_goal" = Val (String "slay")
,
Jump to felina_intermission_post_menu
],Choice - ''I was told there was enou...If "mirror_fates_worse_than_death" []
[
Assign "felina_stated_goal" = Val (String "slay")
,
Jump to felina_intermission_post_menu
],Choice - ''I have to fight for a bet...
[
Assign "felina_stated_goal" = Val (String "slay")
,
Jump to felina_intermission_post_menu
],Choice - ''You are cruelty itself, a...
[
Assign "felina_stated_goal" = Val (String "slay")
,
Jump to felina_intermission_post_menu
],Choice - ''I don't know what the ans...
[
Assign "felina_stated_goal" = Val (String "pacifism")
,,,,,
Jump to felina_intermission_post_menu
],Choice - ''You've done everything yo...
[
Assign "felina_stated_goal" = Val (String "pacifism")
,,,,,
Jump to felina_intermission_post_menu
]]}
]}
,
{Label: felina_intermission_post_menu
[
[If Var "felina_stated_goal" == Val (String "slay") [
[If Var "felina_fight_effective_resistance" > Val (Int 3) [,,,,]]
,
[Elif Var "felina_fight_effective_resistance" > Val (Int 1) [,,,,]]
,
[Else [,,,,,]]
,,]]
,
[Else [
{Label: felina_intermission_late_join
[,
[If "final_offer" [,]]
,]}
]]
,
{Label: felina_intermission_hero_menu
[,,
{Choice Branch: [Choice - (Explore) ''Which... 'Hero'...If Var "felina_intermission_hero_which" == Val (Bool False) []
[
Assign "felina_intermission_hero_which" = Val (Bool True)
,,,
Jump to felina_intermission_hero_menu
],Choice - ''You have no idea how good...
[
[If Var "mirror_n_cruel_count" >= Val (Int 2) [
Assign "felina_intermission_hero_menu_cruelty_comment" = Val (Bool True)
,,]]
,
[Else [,]]
,
{Label: felina_intermission_hero_join
[
[If Var "felina_fight_effective_resistance" > Val (Int 3) [
[If Var "felina_stated_goal" == Val (String "slay") [,]]
,
[Else [,]]
]]
,
[Else [
[If Var "felina_stated_goal" == Val (String "slay") [,]]
,
[Else [,]]
]]
,
Jump to felina_intermission_hero_late_join
]}
],Choice - ''I can do this alone.''
[
[If Var "felina_fight_effective_resistance" > Val (Int 3) [
[If Var "felina_stated_goal" == Val (String "slay") [,]]
,
[Else [,]]
]]
,
[Else [
[If Var "felina_stated_goal" == Val (String "slay") [,]]
,
[Else [,]]
]]
,
Jump to felina_intermission_hero_late_join
],Choice - ''Where's everyone else?''
[,,
Jump to felina_intermission_hero_late_join
],Choice - ''How are you supposed to h...
[
[If Var "felina_stated_goal" == Val (String "slay") [,]]
,
[Else [,]]
,
Jump to felina_intermission_hero_late_join
],Choice - ''I thought voices weren't ...
[,,
Jump to felina_intermission_hero_join
],Choice - ''I thought you died whenev...
[,,
Jump to felina_intermission_hero_join
],Choice - [[Say nothing.]
[
Jump to felina_intermission_hero_join
]]}
]}
]}
,
{Label: felina_intermission_hero_late_join
[,,,
[If "final_offer" []]
,
[Else []]
,,,,
[If "final_offer" []]
,
[Else []]
,,,
{Choice Branch: [Choice - ''I'm ready.''
[,],Choice - ''No.''
[,],Choice - ''I can do this out here on...
[,],Choice - [[Say nothing.]
[,]]}
]}
,
{Label: felina_cabin_staging
[,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "default_mouse" = Val (String "default")
,
[If Var "first_princess" == Val (String "harsh") || Var "first_princess" == Val (String "gentle") [
Jump to felina_cabin_start
]]
,
[Else [
Jump to felina_cabin_strange_start
]]
]}
,
{Label: felina_violence_join
[,,,,
Assign "felina_come_from_violence" = Val (Bool True)
,
Assign "felina_violence_counter" += Val (Int 1)
,
Assign "felina_fight_effective_resistance" += Val (Int 1)
,
[If Var "felina_violence_counter" == Val (Int 1) [,
[If "come_from_tower" [
Assign "come_from_tower" = Val (Bool False)
,,,,,,,,,,,,,,,,]]
,
[Else [,,,]]
,,]]
,
[If Var "felina_violence_counter" == Val (Int 2) [,
[If "come_from_tower" [
Assign "come_from_tower" = Val (Bool False)
,,,,,,,,,,,,,,,,]]
,
[Else [,,,]]
,,]]
,
[If Var "felina_violence_counter" == Val (Int 3) [,
[If "come_from_tower" [
Assign "come_from_tower" = Val (Bool False)
,,,,,,,,,,,,,,,,]]
,
[Else [,,,]]
,,]]
,
[If Var "felina_violence_counter" == Val (Int 4) && Var "first_mound" != Val (String "stranger") [,
[If "come_from_tower" [
Assign "come_from_tower" = Val (Bool False)
,,,,,,,,,,,,,,,,]]
,
[Else [,,,]]
,,]]
,
[If Var "felina_violence_counter" == Val (Int 5) || Var "felina_violence_counter" == Val (Int 4) && Var "first_mound" == Val (String "stranger") [
Jump to felina_godkiller_ending
]]
,
Jump to felina_fight_staging
]}
,
{Label: felina_silence
[
Assign "felina_silence_count" += Val (Int 1)
,,
[If "come_from_tower" [
Assign "come_from_tower" = Val (Bool False)
,,,,,,,,,,,,,,,,
[If Var "felina_silence_count" == Val (Int 1) || Var "felina_silence_count" == Val (Int 2) []]
,
[Elif Var "felina_silence_count" == Val (Int 3) []]
,
[Elif Var "felina_silence_count" == Val (Int 4) []]
,
[Else []]
,]]
,
[Else [,,,
[If Var "felina_silence_count" == Val (Int 1) || Var "felina_silence_count" == Val (Int 2) []]
,
[Elif Var "felina_silence_count" == Val (Int 3) []]
,
[Elif Var "felina_silence_count" == Val (Int 4) []]
,
[Else []]
,]]
,
[If Var "felina_silence_count" == Val (Int 1) [,,,]]
,
[Elif Var "felina_silence_count" == Val (Int 2) [,,,]]
,
[Elif Var "felina_silence_count" == Val (Int 3) [,,]]
,
[Elif Var "felina_silence_count" == Val (Int 4) [,,,]]
,
[Elif Var "felina_silence_count" == Val (Int 5) [,,,]]
,
Jump to felina_fight_staging
]}
,
{Label: felina_rejection_join
[
Assign "felina_rejection_count" += Val (Int 1)
,
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,
[If "come_from_tower" [
Assign "come_from_tower" = Val (Bool False)
,,,,,,,,,,,,,,,,
[If Var "felina_rejection_count" == Val (Int 1) || Var "felina_rejection_count" == Val (Int 3) []]
,
[Elif Var "felina_rejection_count" == Val (Int 2) []]
,
[Elif Var "felina_rejection_count" == Val (Int 4) []]
,
[Else []]
,]]
,
[Else [,,,
[If Var "felina_rejection_count" == Val (Int 1) || Var "felina_rejection_count" == Val (Int 3) []]
,
[Elif Var "felina_rejection_count" == Val (Int 2) []]
,
[Elif Var "felina_rejection_count" == Val (Int 4) []]
,
[Else []]
,]]
,
[If Var "felina_rejection_count" == Val (Int 1) [,,,]]
,
[Elif Var "felina_rejection_count" == Val (Int 3) [,,,]]
,
[Elif Var "felina_rejection_count" == Val (Int 2) [,,,,]]
,
[Elif Var "felina_rejection_count" == Val (Int 4) [,,,]]
,
[Elif Var "felina_rejection_count" == Val (Int 5) [,,,]]
,
Jump to felina_fight_staging
]}
,
{Label: felina_appeal_join
[,
Assign "felina_appeal_count" += Val (Int 1)
,
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,
[If "come_from_tower" [
Assign "come_from_tower" = Val (Bool False)
,,,,,,,,,,,,,,,,
[If Var "felina_appeal_count" == Val (Int 1) []]
,
[Elif Var "felina_appeal_count" == Val (Int 2) []]
,
[Elif Var "felina_appeal_count" == Val (Int 3) []]
,
[Elif Var "felina_appeal_count" == Val (Int 4) []]
,
[Else []]
,]]
,
[Else [,,,
[If Var "felina_appeal_count" == Val (Int 1) []]
,
[Elif Var "felina_appeal_count" == Val (Int 2) []]
,
[Elif Var "felina_appeal_count" == Val (Int 3) []]
,
[Elif Var "felina_appeal_count" == Val (Int 4) []]
,
[Else []]
,]]
,
[If Var "felina_appeal_count" == Val (Int 1) [,,,]]
,
[Elif Var "felina_appeal_count" == Val (Int 2) [,,,]]
,
[Elif Var "felina_appeal_count" == Val (Int 3) [,,,,]]
,
[Elif Var "felina_appeal_count" == Val (Int 4) [,,,]]
,
[Elif Var "felina_appeal_count" == Val (Int 5) [,,,,,,]]
,
Jump to felina_fight_staging
]}
,
{Label: felina_lecture_join
[,
Assign "felina_lecture_count" += Val (Int 1)
,,
[If "come_from_tower" [
Assign "come_from_tower" = Val (Bool False)
,,,,,,,,,,,,,,,,
[If Var "felina_lecture_count" == Val (Int 1) || Var "felina_lecture_count" == Val (Int 3) []]
,
[Elif Var "felina_lecture_count" == Val (Int 2) []]
,
[Elif Var "felina_lecture_count" == Val (Int 4) []]
,
[Else []]
,]]
,
[Else [,,,
[If Var "felina_lecture_count" == Val (Int 1) || Var "felina_lecture_count" == Val (Int 3) []]
,
[Elif Var "felina_lecture_count" == Val (Int 2) []]
,
[Elif Var "felina_lecture_count" == Val (Int 4) []]
,
[Else []]
,]]
,
[If Var "felina_lecture_count" == Val (Int 1) [
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,,]]
,
[Elif Var "felina_lecture_count" == Val (Int 2) [
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,]]
,
[Elif Var "felina_lecture_count" == Val (Int 3) [,,,,,,,]]
,
[Elif Var "felina_lecture_count" == Val (Int 4) [,,,]]
,
[Elif Var "felina_lecture_count" == Val (Int 5) [,,,,,,]]
,
Jump to felina_fight_staging
]}
,
{Label: felina_assert_join
[,,
Assign "felina_assert_count" += Val (Int 1)
,,
[If "come_from_tower" [
Assign "come_from_tower" = Val (Bool False)
,,,,,,,,,,,,,,,
[If Var "felina_assert_count" == Val (Int 1) []]
,
[Elif Var "felina_assert_count" == Val (Int 2) []]
,
[Elif Var "felina_assert_count" == Val (Int 3) []]
,
[Elif Var "felina_assert_count" == Val (Int 4) []]
,
[Else []]
,]]
,
[Else [,,,
[If Var "felina_assert_count" == Val (Int 1) []]
,
[Elif Var "felina_assert_count" == Val (Int 2) []]
,
[Elif Var "felina_assert_count" == Val (Int 3) []]
,
[Elif Var "felina_assert_count" == Val (Int 4) []]
,
[Else []]
,]]
,
[If Var "felina_assert_count" == Val (Int 1) [
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,]]
,
[Elif Var "felina_assert_count" == Val (Int 2) [
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,]]
,
[Elif Var "felina_assert_count" == Val (Int 3) [,,,,]]
,
[Elif Var "felina_assert_count" == Val (Int 4) [,,,,,,,]]
,
[Elif Var "felina_assert_count" == Val (Int 5) [
[If "felina_assert_lethal" [,,,]]
,
[Else [,,,]]
]]
,
Jump to felina_fight_staging
]}
,
{Label: felina_adversary_start
[,,,,,,,,
[If Var "previous_transform" != Val (String "dance") [
Assign "previous_transform" = Val (String "dance")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "danceflip")
,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: felina_adversary_menu
[
{Choice Branch: [Choice - (Explore) [[Address this ve...
[
{Choice Branch: [Choice - ''It was beautiful.''
[,,,,,],Choice - ''It was meaningless. Neith...
[,,,,,],Choice - ''It was unnecessary. We co...
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,,
Jump to felina_adversary_negative_join
],Choice - ''We didn't have to hurt ea...
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,,
{Label: felina_adversary_negative_join
[,,,]}
],Choice - (Return)
[
Jump to felina_adversary_menu
]]}
],Choice - [[Appeal to your shared hum...If Var "felina_appeal_count" == Val (Int 0) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 1) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 2) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 3) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 4) []
[,
Jump to felina_appeal_join
],Choice - [[Reject her authority.] ''...If Var "felina_lecture_count" == Val (Int 0) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 1) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 2) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 3) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 4) []
[,
Jump to felina_lecture_join
],Choice - [[Argue your independence.]...If Var "felina_assert_count" == Val (Int 0) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 1) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 2) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 3) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[
Assign "felina_assert_lethal" = Val (Bool True)
,,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[,
Jump to felina_assert_join
],Choice - [[Reject her perspective.] ...If Var "felina_rejection_count" == Val (Int 0) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 1) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 2) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 3) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 4) []
[
Jump to felina_rejection_join
],Choice - ''I get it. There's no need...If Var "felina_round" >= Val (Int 2) []
[,,
Jump to felina_freedom_join
],Choice - [[Remain silent.]
[
Jump to felina_silence
]]}
]}
,
Jump to felina_fight_staging
]}
,
{Label: felina_adversary2_start
[,,,,,,,,
[If Var "previous_transform" != Val (String "fierce") [
Assign "previous_transform" = Val (String "fierce")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "fierceflip")
,,]]
,,,,,,
[If "adversary_2_blade_taken" []]
,
[Else []]
,,,,
[If Var "adversary_2_end" == Val (String "fight_fail") [,,,,,,,,,,,,,
Jump to needle_join_fail_join
]]
,
[If Var "adversary_2_end" == Val (String "fight_succeed") [,,,,,,,,,,,,,,,,,,,,,,,]]
,
[If Var "adversary_2_end" == Val (String "flee_fail") [,,,,,,,,,,,,,
{Label: needle_join_fail_join
[,,,,,,,,,,]}
]]
,
[If Var "adversary_2_end" == Val (String "free") [,,,,,,,,,,,,,,,,,,,,,,,]]
,
{Label: felina_needle_menu
[
{Choice Branch: [Choice - outlinecolor=4f1313} ''I re...If Var "adversary_2_end" == Val (String "fight_succeed") []
[
Jump to felina_violence_join
],Choice - (Explore) [[Address this ve...
[
{Choice Branch: [Choice - ''We've both become better ...
[,,,,,],Choice - ''Not all obstacles are equ...
[,
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,,
Jump to felina_adversary_2_join
],Choice - ''I fought you to protect o...If Var "adversary_2_end" == Val (String "fight_succeed") || Var "adversary_2_end" == Val (String "fight_fail") []
[,,,,,],Choice - ''I refused to fight you be...If Var "adversary_2_end" == Val (String "free") || Var "adversary_2_end" == Val (String "flee_fail") []
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,,
{Label: felina_adversary_2_join
[,,,,]}
],Choice - (Return)
[
Jump to felina_needle_menu
]]}
],Choice - [[Appeal to your shared hum...If Var "felina_appeal_count" == Val (Int 0) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 1) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 2) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 3) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 4) []
[,
Jump to felina_appeal_join
],Choice - [[Reject her authority.] ''...If Var "felina_lecture_count" == Val (Int 0) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 1) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 2) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 3) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 4) []
[,
Jump to felina_lecture_join
],Choice - [[Argue your independence.]...If Var "felina_assert_count" == Val (Int 0) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 1) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 2) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 3) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[
Assign "felina_assert_lethal" = Val (Bool True)
,,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[,
Jump to felina_assert_join
],Choice - [[Reject her perspective.] ...If Var "felina_rejection_count" == Val (Int 0) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 1) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 2) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 3) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 4) []
[
Jump to felina_rejection_join
],Choice - ''I get it. There's no need...If Var "felina_round" >= Val (Int 2) []
[,
Jump to felina_freedom_join
],Choice - [[Remain silent.]
[
Jump to felina_silence
]]}
]}
,
Jump to felina_fight_staging
]}
,
{Label: felina_beast_start
[,,,,,,,,
[If Var "previous_transform" != Val (String "fierce") [
Assign "previous_transform" = Val (String "fierce")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "fierceflip")
,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: felina_beast_menu
[
{Choice Branch: [Choice - (Explore) [[Address this ve...
[
{Choice Branch: [Choice - ''You're right. Without des...
[,,,,,,],Choice - ''Yes, without desire, we h...
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,],Choice - ''You cannot use eating me ...
[,,,,,,],Choice - ''But my intentions do matt...
[
Jump to felina_beast_join
],Choice - ''I didn't want to free you...If "beast_accidental_freedom" []
[
{Label: felina_beast_join
[,,,,,]}
],Choice - (Return)
[
Jump to felina_beast_menu
]]}
],Choice - [[Appeal to your shared hum...If Var "felina_appeal_count" == Val (Int 0) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 1) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 2) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 3) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 4) []
[,
Jump to felina_appeal_join
],Choice - [[Reject her authority.] ''...If Var "felina_lecture_count" == Val (Int 0) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 1) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 2) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 3) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 4) []
[,
Jump to felina_lecture_join
],Choice - [[Argue your independence.]...If Var "felina_assert_count" == Val (Int 0) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 1) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 2) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 3) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[
Assign "felina_assert_lethal" = Val (Bool True)
,,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[,
Jump to felina_assert_join
],Choice - [[Reject her perspective.] ...If Var "felina_rejection_count" == Val (Int 0) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 1) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 2) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 3) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 4) []
[
Jump to felina_rejection_join
],Choice - ''I get it. There's no need...If Var "felina_round" >= Val (Int 2) []
[,
Jump to felina_freedom_join
],Choice - [[Remain silent.]
[
Jump to felina_silence
]]}
]}
,
Jump to felina_fight_staging
]}
,
{Label: felina_beast2_start
[,,,,,,,,
[If Var "previous_transform" != Val (String "fierce") [
Assign "previous_transform" = Val (String "fierce")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "fierceflip")
,,]]
,,,,,
[If Var "beast_2_end" == Val (String "fight_succeed") || Var "beast_2_end" == Val (String "fight_fail") [,,]]
,
[Else [
[If Var "beast_2_end" == Val (String "consume") [,,]]
,
[Elif Var "beast_2_end" == Val (String "starve") [,,]]
,
[Elif Var "beast_2_end" == Val (String "free_succeed") [,,]]
,
[Else [,,]]
]]
,,,
[If Var "beast_2_end" == Val (String "fight_succeed") || Var "beast_2_end" == Val (String "consume") || Var "beast_2_end" == Val (String "slay") [
[If Var "beast_2_end" == Val (String "fight_succeed") || Var "beast_2_end" == Val (String "slay") []]
,
[Elif Var "beast_2_end" == Val (String "consume") []]
,,,,,,,,,,,,
[If Var "beast_2_end" == Val (String "fight_succeed") || Var "beast_2_end" == Val (String "slay") []]
,
[Else []]
]]
,
[If Var "beast_2_end" == Val (String "starve") [,,,,,,,,,,,,,,,,,]]
,
[If Var "beast_2_end" == Val (String "fight_fail") || Var "beast_2_end" == Val (String "free_fail") [,,,,,,,,,,,,]]
,
[If Var "beast_2_end" == Val (String "free_succeed") [,,,,,,,,,,,,,,,,,,]]
,
[If Var "beast_2_end" == Val (String "starve") [,,,,,,,,,,,,,,,,,,,]]
,
[Elif Var "beast_2_end" != Val (String "free_succeed") [,,,,,,,,,,,,,,]]
,
{Label: felina_den_menu
[
{Choice Branch: [Choice - outlinecolor=4f1313} ''The ...If Var "beast_2_end" == Val (String "slay") []
[
Jump to felina_violence_join
],Choice - (Explore) [[Address this ve...
[
{Choice Branch: [Choice - ''But I don't want to dance.''If Var "beast_2_end" != Val (String "free_succeed") []
[,,,,,],Choice - ''Without you there is no n...If Var "beast_2_end" == Val (String "free_succeed") []
[,,,,,],Choice - ''Would you have us fight f...If Var "beast_2_end" != Val (String "free_succeed") []
[,,,,,],Choice - ''The dance was good, wasn'...If Var "beast_2_end" != Val (String "free_succeed") []
[,,,,,,],Choice - ''You speak as though chang...If Var "beast_2_end" == Val (String "free_succeed") []
[,
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,],Choice - ''But without you, I never ...If Var "beast_2_end" == Val (String "starve") []
[
{Label: felina_den_crystalize_join
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,]}
],Choice - ''Thank you for ending our ...If Var "beast_2_end" == Val (String "starve") []
[
{Label: felina_den_leave_promt
[,
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,
{Choice Branch: [Choice - ''I'm ready. I want to leav...If Var "felina_round" >= Val (Int 2) []
[,
Jump to felina_freedom_join
],Choice - ''I won't leave with you. N...If Var "felina_round" >= Val (Int 2) []
[,,]]}
]}
],Choice - ''Thank you for saving us.''If Var "beast_2_end" == Val (String "free_succeed") []
[
Jump to felina_den_leave_promt
],Choice - ''I don't want to think of ...
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,,],Choice - ''Are you so sure of yourse...
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,],Choice - (Return)
[
Jump to felina_den_menu
]]}
],Choice - [[Appeal to your shared hum...If Var "felina_appeal_count" == Val (Int 0) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 1) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 2) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 3) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 4) []
[,
Jump to felina_appeal_join
],Choice - [[Reject her authority.] ''...If Var "felina_lecture_count" == Val (Int 0) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 1) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 2) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 3) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 4) []
[,
Jump to felina_lecture_join
],Choice - [[Argue your independence.]...If Var "felina_assert_count" == Val (Int 0) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 1) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 2) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 3) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[
Assign "felina_assert_lethal" = Val (Bool True)
,,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[,
Jump to felina_assert_join
],Choice - [[Reject her perspective.] ...If Var "felina_rejection_count" == Val (Int 0) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 1) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 2) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 3) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 4) []
[
Jump to felina_rejection_join
],Choice - ''I get it. There's no need...If Var "felina_round" >= Val (Int 2) []
[,
Jump to felina_freedom_join
],Choice - [[Remain silent.]
[
Jump to felina_silence
]]}
]}
,
Jump to felina_fight_staging
]}
,
{Label: felina_damsel_start
[
[If Var "damsel_end" == Val (String "dereal") [,,,,,,,,
[If Var "previous_transform" != Val (String "horror") [
Assign "previous_transform" = Val (String "horror")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "horrorflip")
,,]]
,,]]
,
[Else [,,,,,,,,
[If Var "previous_transform" != Val (String "dance") [
Assign "previous_transform" = Val (String "dance")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "danceflip")
,,]]
,,]]
,,,,,,,,,
[If Var "damsel_end" == Val (String "free") [,,,,,,,,,,,,,,,]]
,
[If Var "damsel_end" == Val (String "dereal") [,,,,,,,,,,,,,,,,,,]]
,
{Label: felina_damsel_menu
[
{Choice Branch: [Choice - outlinecolor=4f1313} ''My t...If Var "damsel_end" == Val (String "dereal") []
[
Jump to felina_violence_join
],Choice - (Explore) [[Address this ve...
[
{Choice Branch: [Choice - ''I was blinded by emotion....If Var "damsel_end" == Val (String "free") []
[,,,,,],Choice - ''I want that feeling back.''If Var "damsel_end" == Val (String "free") []
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,],Choice - ''That feeling never left m...If Var "damsel_end" == Val (String "free") []
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,,,
{Label: felina_damsel_leave_ready
[
{Choice Branch: [Choice - ''I'm ready. I want to leav...If Var "felina_round" >= Val (Int 2) []
[,
Jump to felina_freedom_join
],Choice - ''I won't leave with you. N...If Var "felina_round" >= Val (Int 2) []
[,,,]]}
]}
],Choice - ''I have no desire to hide,...If Var "damsel_end" == Val (String "dereal") []
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,,,,,],Choice - ''I don't want to hide from...If Var "damsel_end" == Val (String "dereal") []
[,,,,,,,,,,,
Jump to felina_damsel_leave_ready
],Choice - (Return)
[
Jump to felina_damsel_menu
]]}
],Choice - [[Appeal to your shared hum...If Var "felina_appeal_count" == Val (Int 0) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 1) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 2) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 3) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 4) []
[,
Jump to felina_appeal_join
],Choice - [[Reject her authority.] ''...If Var "felina_lecture_count" == Val (Int 0) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 1) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 2) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 3) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 4) []
[,
Jump to felina_lecture_join
],Choice - [[Argue your independence.]...If Var "felina_assert_count" == Val (Int 0) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 1) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 2) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 3) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[
Assign "felina_assert_lethal" = Val (Bool True)
,,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[,
Jump to felina_assert_join
],Choice - [[Reject her perspective.] ...If Var "felina_rejection_count" == Val (Int 0) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 1) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 2) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 3) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 4) []
[
Jump to felina_rejection_join
],Choice - ''I get it. There's no need...If Var "felina_round" >= Val (Int 2) []
[,
Jump to felina_freedom_join
],Choice - [[Remain silent.]
[
Jump to felina_silence
]]}
]}
,
Jump to felina_fight_staging
]}
,
{Label: felina_nightmare_start
[,,,,,,,,
[If Var "previous_transform" != Val (String "horror") [
Assign "previous_transform" = Val (String "horror")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "horrorflip")
,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: felina_nightmare_menu
[
{Choice Branch: [Choice - (Explore) [[Address this ve...
[
{Choice Branch: [Choice - ''That wasn't a rejection o...
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,,,,,],Choice - ''You wanted to make the wo...
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,,,,,],Choice - ''I'm not afraid anymore.''
[,,,,,],Choice - ''Even if I'm not afraid no...
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,],Choice - (Return)
[
Jump to felina_nightmare_menu
]]}
],Choice - [[Appeal to your shared hum...If Var "felina_appeal_count" == Val (Int 0) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 1) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 2) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 3) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 4) []
[,
Jump to felina_appeal_join
],Choice - [[Reject her authority.] ''...If Var "felina_lecture_count" == Val (Int 0) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 1) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 2) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 3) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 4) []
[,
Jump to felina_lecture_join
],Choice - [[Argue your independence.]...If Var "felina_assert_count" == Val (Int 0) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 1) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 2) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 3) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[
Assign "felina_assert_lethal" = Val (Bool True)
,,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[,
Jump to felina_assert_join
],Choice - [[Reject her perspective.] ...If Var "felina_rejection_count" == Val (Int 0) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 1) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 2) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 3) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 4) []
[
Jump to felina_rejection_join
],Choice - ''I get it. There's no need...If Var "felina_round" >= Val (Int 2) []
[,
Jump to felina_freedom_join
],Choice - [[Remain silent.]
[
Jump to felina_silence
]]}
]}
,
Jump to felina_fight_staging
]}
,
{Label: felina_nightmare2_start
[,,,,,,,,
[If Var "previous_transform" != Val (String "horror") [
Assign "previous_transform" = Val (String "horror")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "horrorflip")
,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: felina_clarity_menu
[
{Choice Branch: [Choice - (Explore) [[Address this ve...
[
{Choice Branch: [Choice - ''Thank you for sharing you...
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,],Choice - ''I don't need to share my ...
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,
Jump to nightmare_2_felina_join
],Choice - ''I wish I could share my h...
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,
{Label: nightmare_2_felina_join
[,,,,,]}
],Choice - ''You showed me your heart ...
[,,,,,],Choice - ''If that is what it takes ...
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,],Choice - (Return)
[
Jump to felina_clarity_menu
]]}
],Choice - [[Appeal to your shared hum...If Var "felina_appeal_count" == Val (Int 0) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 1) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 2) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 3) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 4) []
[,
Jump to felina_appeal_join
],Choice - [[Reject her authority.] ''...If Var "felina_lecture_count" == Val (Int 0) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 1) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 2) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 3) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 4) []
[,
Jump to felina_lecture_join
],Choice - [[Argue your independence.]...If Var "felina_assert_count" == Val (Int 0) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 1) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 2) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 3) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[
Assign "felina_assert_lethal" = Val (Bool True)
,,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[,
Jump to felina_assert_join
],Choice - [[Reject her perspective.] ...If Var "felina_rejection_count" == Val (Int 0) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 1) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 2) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 3) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 4) []
[
Jump to felina_rejection_join
],Choice - ''I get it. There's no need...If Var "felina_round" >= Val (Int 2) []
[,
Jump to felina_freedom_join
],Choice - [[Remain silent.]
[
Jump to felina_silence
]]}
]}
,
Jump to felina_fight_staging
]}
,
{Label: felina_prisoner_start
[
[If Var "prisoner_end" == Val (String "free") [,,,,,,,,
[If Var "previous_transform" != Val (String "hands") [
Assign "previous_transform" = Val (String "hands")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "handsflip")
,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,]]
,
[If Var "prisoner_end" == Val (String "stuck") [,,,,,,,,
[If Var "previous_transform" != Val (String "hands") [
Assign "previous_transform" = Val (String "hands")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "handsflip")
,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,]]
,
{Label: felina_prisoner_menu
[
{Choice Branch: [Choice - (Explore) [[Address this ve...
[
{Choice Branch: [Choice - ''The path is just a metaph...If Var "prisoner_end" == Val (String "free") []
[,,,,,],Choice - ''I don't want to keep anyo...If Var "prisoner_end" == Val (String "free") []
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,],Choice - ''What does the path matter...If Var "prisoner_end" == Val (String "free") []
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,],Choice - ''They'll get over it. They...If Var "prisoner_end" == Val (String "stuck") []
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,],Choice - ''That would be torture.''If Var "prisoner_end" == Val (String "stuck") []
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,],Choice - (Return)
[
Jump to felina_prisoner_menu
]]}
],Choice - [[Appeal to your shared hum...If Var "felina_appeal_count" == Val (Int 0) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 1) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 2) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 3) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 4) []
[,
Jump to felina_appeal_join
],Choice - [[Reject her authority.] ''...If Var "felina_lecture_count" == Val (Int 0) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 1) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 2) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 3) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 4) []
[,
Jump to felina_lecture_join
],Choice - [[Argue your independence.]...If Var "felina_assert_count" == Val (Int 0) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 1) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 2) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 3) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[
Assign "felina_assert_lethal" = Val (Bool True)
,,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[,
Jump to felina_assert_join
],Choice - [[Reject her perspective.] ...If Var "felina_rejection_count" == Val (Int 0) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 1) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 2) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 3) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 4) []
[
Jump to felina_rejection_join
],Choice - ''I get it. There's no need...If Var "felina_round" >= Val (Int 2) []
[,
Jump to felina_freedom_join
],Choice - [[Remain silent.]
[
Jump to felina_silence
]]}
]}
,
Jump to felina_fight_staging
]}
,
{Label: felina_razor_start
[
[If Var "razor_end" == Val (String "peace") [,,,,,,,,
[If Var "previous_transform" != Val (String "hands") [
Assign "previous_transform" = Val (String "hands")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "handsflip")
,,]]
,,]]
,
[Elif Var "razor_end" == Val (String "fight") [,,,,,,,,
[If Var "previous_transform" != Val (String "fierce") [
Assign "previous_transform" = Val (String "fierce")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "fierceflip")
,,]]
,,]]
,,,,,,,,,,,,,,,,,,,,,
[If Var "razor_end" == Val (String "fight") [,,,,]]
,
[If Var "razor_end" == Val (String "peace") [,,,,]]
,,,,,,,
{Label: felina_razor_menu
[
{Choice Branch: [Choice - outlinecolor=4f1313} ''I di...If Var "razor_end" == Val (String "fight") []
[
Jump to felina_violence_join
],Choice - outlinecolor=4f1313} ''I di...If Var "razor_end" == Val (String "peace") []
[
Jump to felina_violence_join
],Choice - (Explore) [[Address this ve...
[
{Choice Branch: [Choice - ''It didn't last. It wasn't...If Var "razor_end" == Val (String "peace") []
[,,,,,],Choice - ''If you hadn't snatched th...If Var "razor_end" == Val (String "fight") []
[,,,,,
Assign "felina_fight_effective_resistance" += Val (Int 1)
,],Choice - ''It felt so good to finall...If Var "razor_end" == Val (String "fight") []
[
{Label: razor_felina_joy_join
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,]}
],Choice - ''After everything you put ...If Var "razor_end" == Val (String "peace") []
[
Jump to razor_felina_joy_join
],Choice - ''Even if the journey was a...
[,,,,,],Choice - (Return)
[
Jump to felina_razor_menu
]]}
],Choice - [[Appeal to your shared hum...If Var "felina_appeal_count" == Val (Int 0) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 1) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 2) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 3) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 4) []
[,
Jump to felina_appeal_join
],Choice - [[Reject her authority.] ''...If Var "felina_lecture_count" == Val (Int 0) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 1) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 2) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 3) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 4) []
[,
Jump to felina_lecture_join
],Choice - [[Argue your independence.]...If Var "felina_assert_count" == Val (Int 0) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 1) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 2) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 3) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[
Assign "felina_assert_lethal" = Val (Bool True)
,,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[,
Jump to felina_assert_join
],Choice - [[Reject her perspective.] ...If Var "felina_rejection_count" == Val (Int 0) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 1) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 2) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 3) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 4) []
[
Jump to felina_rejection_join
],Choice - ''I get it. There's no need...If Var "felina_round" >= Val (Int 2) []
[,
Jump to felina_freedom_join
],Choice - [[Remain silent.]
[
Jump to felina_silence
]]}
]}
,
Jump to felina_fight_staging
]}
,
{Label: felina_spectre_start
[,,,,,,,,
[If Var "previous_transform" != Val (String "horror") [
Assign "previous_transform" = Val (String "horror")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "horrorflip")
,,]]
,,,
[If Var "spectre_end" == Val (String "free") [,,]]
,
[Else [,,]]
,,,,,,,,,,,,,,,,,,
[If Var "spectre_end" == Val (String "free") [,,,,,,,,,]]
,
[If Var "spectre_end" == Val (String "slay") [,,,,,,,,,]]
,,
{Label: felina_spectre_menu
[
{Choice Branch: [Choice - (Explore) [[Address this ve...
[
{Choice Branch: [Choice - ''But without redemption th...If Var "spectre_end" == Val (String "free") []
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,],Choice - ''If I'd known what you wer...If Var "spectre_end" == Val (String "free") []
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,],Choice - ''And I would sacrifice eve...If Var "spectre_end" == Val (String "free") []
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,],Choice - ''I had to sacrifice myself...If Var "spectre_end" == Val (String "slay") []
[,,,,,],Choice - ''I was glad to end us toge...If Var "spectre_end" == Val (String "slay") []
[,,,,,],Choice - (Return)
[
Jump to felina_spectre_menu
]]}
],Choice - [[Appeal to your shared hum...If Var "felina_appeal_count" == Val (Int 0) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 1) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 2) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 3) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 4) []
[,
Jump to felina_appeal_join
],Choice - [[Reject her authority.] ''...If Var "felina_lecture_count" == Val (Int 0) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 1) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 2) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 3) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 4) []
[,
Jump to felina_lecture_join
],Choice - [[Argue your independence.]...If Var "felina_assert_count" == Val (Int 0) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 1) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 2) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 3) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[
Assign "felina_assert_lethal" = Val (Bool True)
,,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[,
Jump to felina_assert_join
],Choice - [[Reject her perspective.] ...If Var "felina_rejection_count" == Val (Int 0) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 1) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 2) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 3) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 4) []
[
Jump to felina_rejection_join
],Choice - ''I get it. There's no need...If Var "felina_round" >= Val (Int 2) []
[,
Jump to felina_freedom_join
],Choice - [[Remain silent.]
[
Jump to felina_silence
]]}
]}
,
Jump to felina_fight_staging
]}
,
{Label: felina_stranger_start
[,,,,,,,,
[If Var "previous_transform" != Val (String "hands") [
Assign "previous_transform" = Val (String "hands")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "handsflip")
,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: felina_stranger_menu
[
{Choice Branch: [Choice - outlinecolor=4f1313} ''I sa...
[
Jump to felina_violence_join
],Choice - (Explore) [[Address this ve...
[
{Choice Branch: [Choice - ''To be everything at once ...
[,,,,,],Choice - ''To contain everything is ...
[,,,,,],Choice - ''I couldn't understand you...
[,,,,,,
{Label: felina_stranger_join
[,,,]}
],Choice - ''You seemed in pain. I'm s...
[,,,,,,
Jump to felina_stranger_join
],Choice - (Return)
[
Jump to felina_stranger_menu
]]}
],Choice - [[Appeal to your shared hum...If Var "felina_appeal_count" == Val (Int 0) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 1) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 2) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 3) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 4) []
[,
Jump to felina_appeal_join
],Choice - [[Reject her authority.] ''...If Var "felina_lecture_count" == Val (Int 0) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 1) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 2) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 3) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 4) []
[,
Jump to felina_lecture_join
],Choice - [[Argue your independence.]...If Var "felina_assert_count" == Val (Int 0) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 1) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 2) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 3) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[
Assign "felina_assert_lethal" = Val (Bool True)
,,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[,
Jump to felina_assert_join
],Choice - [[Reject her perspective.] ...If Var "felina_rejection_count" == Val (Int 0) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 1) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 2) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 3) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 4) []
[
Jump to felina_rejection_join
],Choice - ''I get it. There's no need...If Var "felina_round" >= Val (Int 2) []
[,
Jump to felina_freedom_join
],Choice - [[Remain silent.]
[
Jump to felina_silence
]]}
]}
,
Jump to felina_fight_staging
]}
,
{Label: felina_tower_start
[,
Assign "come_from_tower" = Val (Bool True)
,
[If Var "tower_end" == Val (String "submit") [,,,,,,,,
[If Var "previous_transform" != Val (String "dance") [
Assign "previous_transform" = Val (String "dance")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "danceflip")
,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,]]
,
[If Var "apotheosis_end" == Val (String "defy") || Var "apotheosis_end" == Val (String "prison") [,,,,,,,,
[If Var "previous_transform" != Val (String "hands") [
Assign "previous_transform" = Val (String "hands")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "handsflip")
,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,]]
,
[If Var "apotheosis_end" == Val (String "unraveled") [,,,,,,,,
[If Var "previous_transform" != Val (String "hands") [
Assign "previous_transform" = Val (String "hands")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "handsflip")
,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,]]
,
[If Var "apotheosis_end" == Val (String "fly") [,,,,,,,,
[If Var "previous_transform" != Val (String "hands") [
Assign "previous_transform" = Val (String "hands")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "handsflip")
,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,]]
,,
{Label: felina_tower_menu
[
{Choice Branch: [Choice - outlinecolor=4f1313} ''Even...If Var "apotheosis_end" == Val (String "defy") []
[
Jump to felina_violence_join
],Choice - outlinecolor=4f1313} ''Even...If Var "apotheosis_end" == Val (String "prison") []
[
Jump to felina_violence_join
],Choice - outlinecolor=4f1313} ''Even...If Var "apotheosis_end" == Val (String "unraveled") []
[
Jump to felina_violence_join
],Choice - (Explore) [[Address this ve...
[
{Choice Branch: [Choice - ''I still defy you now.''If Var "apotheosis_end" == Val (String "defy") []
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,,,,,,,,,,,,,,],Choice - ''We were so close to freed...If Var "apotheosis_end" == Val (String "fly") []
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,,,,,,,,,,,,,,],Choice - ''It was you who stopped us...If Var "apotheosis_end" == Val (String "fly") []
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,,,,,,,,,,,,,,],Choice - ''I'm sorry for what I did ...If Var "apotheosis_end" == Val (String "prison") || Var "apotheosis_end" == Val (String "defy") || Var "apotheosis_end" == Val (String "unraveled") []
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,,,,,,,,,,,,,,],Choice - ''We made each other worse.''If Var "apotheosis_end" == Val (String "prison") || Var "apotheosis_end" == Val (String "defy") || Var "apotheosis_end" == Val (String "unraveled") []
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,,,,,,,,,,,,,,],Choice - ''You ripped me open then. ...If Var "apotheosis_end" == Val (String "prison") || Var "apotheosis_end" == Val (String "unraveled") []
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,,,,,,,,,,,,,,],Choice - ''I miss when that was you.''
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,,,,,,,,,,,,,,],Choice - ''Submitting to you was a m...If Var "apotheosis_end" == Val (String "fly") || Var "tower_end" == Val (String "submit") []
[,,,,,,,,,,,,,,,,,,],Choice - ''You were consumed by your...
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,
[If Var "apotheosis_end" == Val (String "unraveled") || Var "apotheosis_end" == Val (String "defy") || Var "apotheosis_end" == Val (String "prison") [,,,,,,,,,,,,,,,,,,]]
,
[Else [,,,,,,,,,,,,,,,,,,]]
],Choice - (Return)
[
Jump to felina_tower_menu
]]}
],Choice - [[Appeal to your shared hum...If Var "felina_appeal_count" == Val (Int 0) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 1) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 2) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 3) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 4) []
[,
Jump to felina_appeal_join
],Choice - [[Reject her authority.] ''...If Var "felina_lecture_count" == Val (Int 0) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 1) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 2) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 3) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 4) []
[,
Jump to felina_lecture_join
],Choice - [[Argue your independence.]...If Var "felina_assert_count" == Val (Int 0) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 1) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 2) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 3) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[
Assign "felina_assert_lethal" = Val (Bool True)
,,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[,
Jump to felina_assert_join
],Choice - [[Reject her perspective.] ...If Var "felina_rejection_count" == Val (Int 0) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 1) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 2) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 3) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 4) []
[
Jump to felina_rejection_join
],Choice - ''I get it. There's no need...If Var "felina_round" >= Val (Int 2) []
[,
Jump to felina_freedom_join
],Choice - [[Remain silent.]
[
Jump to felina_silence
]]}
]}
,
Jump to felina_fight_staging
]}
,
{Label: felina_witch_start
[,,,,,,,,
[If Var "previous_transform" != Val (String "dance") [
Assign "previous_transform" = Val (String "dance")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "danceflip")
,,]]
,,,
[If Var "witch_end" == Val (String "witch_betray_lock") [,,,]]
,
[Else [,,,]]
,,,,
[If Var "witch_end" == Val (String "witch_betray_lock") [,,,,,,,,,,,,]]
,
[Elif Var "witch_end" == Val (String "witch_betray") [,,,,,,,,,,,,]]
,
[Elif Var "witch_end" == Val (String "player_betray") [,,,,,,,,,,,,]]
,,,,,,
{Label: felina_witch_menu
[
{Choice Branch: [Choice - (Explore) [[Address this ve...
[
{Choice Branch: [Choice - ''If there are no endings, ...
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,,,,],Choice - ''I have already come so fa...
[,,,,,],Choice - ''With time, we could have ...
[,,,,,],Choice - ''But I stabbed you in the ...If Var "witch_end" == Val (String "player_betray") []
[
{Label: felina_witch_join
[,,,,,]}
],Choice - ''But you betrayed me. What...If Var "witch_end" == Val (String "player_betray") []
[
Jump to felina_witch_join
],Choice - (Return)
[
Jump to felina_witch_menu
]]}
],Choice - [[Appeal to your shared hum...If Var "felina_appeal_count" == Val (Int 0) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 1) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 2) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 3) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 4) []
[,
Jump to felina_appeal_join
],Choice - [[Reject her authority.] ''...If Var "felina_lecture_count" == Val (Int 0) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 1) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 2) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 3) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 4) []
[,
Jump to felina_lecture_join
],Choice - [[Argue your independence.]...If Var "felina_assert_count" == Val (Int 0) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 1) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 2) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 3) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[
Assign "felina_assert_lethal" = Val (Bool True)
,,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[,
Jump to felina_assert_join
],Choice - [[Reject her perspective.] ...If Var "felina_rejection_count" == Val (Int 0) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 1) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 2) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 3) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 4) []
[
Jump to felina_rejection_join
],Choice - ''I get it. There's no need...If Var "felina_round" >= Val (Int 2) []
[,
Jump to felina_freedom_join
],Choice - [[Remain silent.]
[
Jump to felina_silence
]]}
]}
,
Jump to felina_fight_staging
]}
,
{Label: felina_thorn_start
[,,,,,,,,
[If Var "previous_transform" != Val (String "dance") [
Assign "previous_transform" = Val (String "dance")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "danceflip")
,,]]
,,,,,,,,,,
[If Var "thorn_end" == Val (String "free") || Var "thorn_end" == Val (String "free_kiss") [,,,,,,,,,,,,,,,,,,,,]]
,
[If Var "thorn_end" == Val (String "stuck") || Var "thorn_end" == Val (String "stuck_together") || Var "thorn_end" == Val (String "slay_attempt") || Var "thorn_end" == Val (String "free_attempt") || Var "thorn_end" == Val (String "abandoned") [
[If Var "thorn_end" == Val (String "stuck") || Var "thorn_end" == Val (String "stuck_together") [,,,,,,,,,,,,]]
,
[Elif Var "thorn_end" == Val (String "abandoned") [,,,,,,,,,,,,]]
,
[Else [,,,,,,,,,,,,,,,,,]]
,,,,,,]]
,
{Label: felina_thorn_menu
[
{Choice Branch: [Choice - (Explore) [[Address this ve...
[
{Choice Branch: [Choice - ''With time we could have b...If Var "thorn_end" == Val (String "stuck") || Var "thorn_end" == Val (String "stuck_together") || Var "thorn_end" == Val (String "slay_attempt") []
[,,,,,],Choice - ''I would have liked to see...If Var "thorn_end" == Val (String "stuck") || Var "thorn_end" == Val (String "stuck_together") || Var "thorn_end" == Val (String "slay_attempt") || Var "thorn_end" == Val (String "abandoned") []
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,],Choice - ''But you were stuck. That ...If Var "thorn_end" == Val (String "abandoned") []
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,],Choice - ''But we were stuck. That w...If Var "thorn_end" == Val (String "stuck") || Var "thorn_end" == Val (String "stuck_together") || Var "thorn_end" == Val (String "slay_attempt") []
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,],Choice - ''If I had known what you r...If Var "thorn_end" == Val (String "free") || Var "thorn_end" == Val (String "free_kiss") []
[,,,,,],Choice - ''Of course I helped you. I...If Var "thorn_end" == Val (String "free") || Var "thorn_end" == Val (String "free_kiss") []
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,],Choice - (Return)
[
Jump to felina_thorn_menu
]]}
],Choice - [[Appeal to your shared hum...If Var "felina_appeal_count" == Val (Int 0) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 1) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 2) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 3) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 4) []
[,
Jump to felina_appeal_join
],Choice - [[Reject her authority.] ''...If Var "felina_lecture_count" == Val (Int 0) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 1) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 2) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 3) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 4) []
[,
Jump to felina_lecture_join
],Choice - [[Argue your independence.]...If Var "felina_assert_count" == Val (Int 0) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 1) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 2) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 3) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[
Assign "felina_assert_lethal" = Val (Bool True)
,,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[,
Jump to felina_assert_join
],Choice - [[Reject her perspective.] ...If Var "felina_rejection_count" == Val (Int 0) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 1) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 2) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 3) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 4) []
[
Jump to felina_rejection_join
],Choice - ''I get it. There's no need...If Var "felina_round" >= Val (Int 2) []
[,
Jump to felina_freedom_join
],Choice - [[Remain silent.]
[
Jump to felina_silence
]]}
]}
,
Jump to felina_fight_staging
]}
,
{Label: felina_fury_start
[
[If Var "fury_end" == Val (String "fusion") []]
,
[Else []]
,,,,,,,,
[If Var "fury_end" == Val (String "heart") [
[If Var "previous_transform" != Val (String "hands") [
Assign "previous_transform" = Val (String "hands")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "handsflip")
,,]]
]]
,
[Else [
[If Var "previous_transform" != Val (String "fierce") [
Assign "previous_transform" = Val (String "fierce")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "fierceflip")
,,]]
]]
,,
[If Var "fury_end" == Val (String "heart") []]
,
[Else []]
,,,,,,,,,,,,,,,,,,
[If Var "fury_end" == Val (String "heart") []]
,
[Else []]
,,,
[If Var "fury_end" == Val (String "heart") []]
,
[Else []]
,,,
{Label: felina_fury_menu
[
{Choice Branch: [Choice - outlinecolor=4f1313} ''Even...If Var "fury_end" == Val (String "slay") || Var "fury_end" == Val (String "slay_unarmed") || Var "fury_end" == Val (String "slay_tower") []
[
Jump to felina_violence_join
],Choice - outlinecolor=4f1313} ''Even...If Var "fury_end" == Val (String "leave") []
[
Jump to felina_violence_join
],Choice - (Explore) [[Address this ve...
[
{Choice Branch: [Choice - ''I am not my body, but I f...
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,],Choice - ''I am not my body, but per...
[,,,,,],Choice - ''I don't fear death. Not a...
[,,,,,,,
{Choice Branch: [Choice - ''I'm ready. I want to leav...If Var "felina_round" >= Val (Int 2) []
[,
Jump to felina_freedom_join
],Choice - ''I won't leave with you. N...If Var "felina_round" >= Val (Int 2) []
[,,]]}
],Choice - ''But what am I, if I'm not...
[,,,,,],Choice - (Return)
[
Jump to felina_fury_menu
]]}
],Choice - [[Appeal to your shared hum...If Var "felina_appeal_count" == Val (Int 0) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 1) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 2) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 3) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 4) []
[,
Jump to felina_appeal_join
],Choice - [[Reject her authority.] ''...If Var "felina_lecture_count" == Val (Int 0) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 1) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 2) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 3) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 4) []
[,
Jump to felina_lecture_join
],Choice - [[Argue your independence.]...If Var "felina_assert_count" == Val (Int 0) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 1) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 2) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 3) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[
Assign "felina_assert_lethal" = Val (Bool True)
,,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[,
Jump to felina_assert_join
],Choice - [[Reject her perspective.] ...If Var "felina_rejection_count" == Val (Int 0) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 1) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 2) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 3) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 4) []
[
Jump to felina_rejection_join
],Choice - ''I get it. There's no need...If Var "felina_round" >= Val (Int 2) []
[,
Jump to felina_freedom_join
],Choice - [[Remain silent.]
[
Jump to felina_silence
]]}
]}
,
Jump to felina_fight_staging
]}
,
{Label: felina_grey_start
[,,,,,,,,
[If Var "previous_transform" != Val (String "horror") [
Assign "previous_transform" = Val (String "horror")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "horrorflip")
,,]]
,,,
[If Var "grey_end" == Val (String "burn") [,,,,]]
,
[Else [,,,,]]
,,,
[If Var "grey_end" == Val (String "burn") [,,,,,,,,,,,,,]]
,
[If Var "grey_end" == Val (String "drown") [,,,,,,,,,,,,]]
,,,,,,,,,,,,,,,,,
{Label: felina_grey_menu
[
{Choice Branch: [Choice - outlinecolor=4f1313} ''I ki...If Var "grey_end" == Val (String "drown") []
[
Jump to felina_violence_join
],Choice - outlinecolor=4f1313} ''I ki...If Var "grey_end" == Val (String "burn") []
[
Jump to felina_violence_join
],Choice - (Explore) [[Address this ve...
[
{Choice Branch: [Choice - ''I'm okay lingering.''
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,],Choice - ''I don't want to linger.''
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,],Choice - ''I deserved what you did t...
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,],Choice - (Return)
[
Jump to felina_grey_menu
]]}
],Choice - [[Appeal to your shared hum...If Var "felina_appeal_count" == Val (Int 0) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 1) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 2) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 3) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 4) []
[,
Jump to felina_appeal_join
],Choice - [[Reject her authority.] ''...If Var "felina_lecture_count" == Val (Int 0) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 1) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 2) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 3) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 4) []
[,
Jump to felina_lecture_join
],Choice - [[Argue your independence.]...If Var "felina_assert_count" == Val (Int 0) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 1) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 2) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 3) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[
Assign "felina_assert_lethal" = Val (Bool True)
,,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[,
Jump to felina_assert_join
],Choice - [[Reject her perspective.] ...If Var "felina_rejection_count" == Val (Int 0) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 1) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 2) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 3) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 4) []
[
Jump to felina_rejection_join
],Choice - ''I get it. There's no need...If Var "felina_round" >= Val (Int 2) []
[,
Jump to felina_freedom_join
],Choice - [[Remain silent.]
[
Jump to felina_silence
]]}
]}
,
Jump to felina_fight_staging
]}
,
{Label: felina_wild_start
[,,,,,,,,
[If Var "previous_transform" != Val (String "hands") [
Assign "previous_transform" = Val (String "hands")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "handsflip")
,,]]
,,,
[If Var "wild_end" == Val (String "joined") [,,,,]]
,
[Else [,,,,]]
,,,
[If Var "wild_end" == Val (String "joined") [,,,,,,,,,,,,,]]
,
[Else [,,,,,,,,,,,,,]]
,
[If Var "wild_end" == Val (String "separate") [,,,,,]]
,
[If Var "wild_end" == Val (String "slay") [,,,,,]]
,
{Label: felina_wild_menu
[
{Choice Branch: [Choice - outlinecolor=4f1313} ''Of c...If Var "wild_end" == Val (String "slay") []
[
Jump to felina_violence_join
],Choice - (Explore) [[Address this ve...
[
{Choice Branch: [Choice - ''Curiosity comes second to...If Var "wild_end" == Val (String "joined") []
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,
Jump to felina_wild_separate_join
],Choice - ''I still want to know what...If Var "wild_end" == Val (String "joined") []
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,,
{Choice Branch: [Choice - ''I'm ready. I want to leav...If Var "felina_round" >= Val (Int 2) []
[,
Jump to felina_freedom_join
],Choice - ''I won't leave with you. N...If Var "felina_round" >= Val (Int 2) []
[,,]]}
],Choice - ''You were a part of me. I ...If Var "wild_end" == Val (String "separate") []
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,
{Label: felina_wild_separate_join
[,,,,,]}
],Choice - ''I couldn't bring myself t...If Var "wild_end" == Val (String "separate") []
[
Jump to felina_wild_separate_join
],Choice - ''I don't care about being ...If Var "wild_end" == Val (String "slay") []
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,
{Label: felina_wild_slay_join
[,,,,,]}
],Choice - ''I miss what it was like t...
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,,,,,],Choice - ''I don't want to destroy y...If Var "wild_end" == Val (String "slay") []
[
Jump to felina_wild_slay_join
],Choice - (Return)
[
Jump to felina_wild_menu
]]}
],Choice - [[Appeal to your shared hum...If Var "felina_appeal_count" == Val (Int 0) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 1) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 2) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 3) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 4) []
[,
Jump to felina_appeal_join
],Choice - [[Reject her authority.] ''...If Var "felina_lecture_count" == Val (Int 0) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 1) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 2) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 3) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 4) []
[,
Jump to felina_lecture_join
],Choice - [[Argue your independence.]...If Var "felina_assert_count" == Val (Int 0) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 1) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 2) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 3) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[
Assign "felina_assert_lethal" = Val (Bool True)
,,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[,
Jump to felina_assert_join
],Choice - [[Reject her perspective.] ...If Var "felina_rejection_count" == Val (Int 0) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 1) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 2) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 3) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 4) []
[
Jump to felina_rejection_join
],Choice - ''I get it. There's no need...If Var "felina_round" >= Val (Int 2) []
[,
Jump to felina_freedom_join
],Choice - [[Remain silent.]
[
Jump to felina_silence
]]}
]}
,
Jump to felina_fight_staging
]}
,
{Label: felina_wraith_start
[,,,,,,,,
[If Var "previous_transform" != Val (String "horror") [
Assign "previous_transform" = Val (String "horror")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "horrorflip")
,,]]
,,,,,,,,,,
[If Var "wraith_end" == Val (String "slay") [,,,,,,,,,,,,,,]]
,
[If Var "wraith_end" == Val (String "free") [,,,,,,,,,,,,,,,,,,]]
,
{Label: felina_wraith_menu
[
{Choice Branch: [Choice - outlinecolor=4f1313} ''The ...If Var "wraith_end" == Val (String "slay") && Var "wraith_source" == Val (String "spectre") []
[
Jump to felina_violence_join
],Choice - outlinecolor=4f1313} ''Even...If Var "wraith_end" == Val (String "slay") && Var "wraith_source" == Val (String "nightmare") []
[
Jump to felina_violence_join
],Choice - (Explore) [[Address this ve...
[
{Choice Branch: [Choice - ''I helped you out of fear,...If Var "wraith_end" == Val (String "free") []
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,],Choice - ''I fear you now more than ...If Var "wraith_end" == Val (String "free") []
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,],Choice - ''I was glad to set you fre...If Var "wraith_end" == Val (String "free") []
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,,,
{Choice Branch: [Choice - ''I'm ready. I want to leav...If Var "felina_round" >= Val (Int 2) []
[,
Jump to felina_freedom_join
],Choice - ''I won't leave with you. N...If Var "felina_round" >= Val (Int 2) []
[,,]]}
],Choice - ''Can you say with certaint...If Var "wraith_end" == Val (String "slay") []
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,],Choice - ''I don't want that world t...If Var "wraith_end" == Val (String "slay") []
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,],Choice - ''You didn't give me much c...If Var "wraith_end" == Val (String "slay") []
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,],Choice - (Return)
[
Jump to felina_wraith_menu
]]}
],Choice - [[Appeal to your shared hum...If Var "felina_appeal_count" == Val (Int 0) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 1) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 2) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 3) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 4) []
[,
Jump to felina_appeal_join
],Choice - [[Reject her authority.] ''...If Var "felina_lecture_count" == Val (Int 0) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 1) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 2) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 3) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 4) []
[,
Jump to felina_lecture_join
],Choice - [[Argue your independence.]...If Var "felina_assert_count" == Val (Int 0) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 1) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 2) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 3) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[
Assign "felina_assert_lethal" = Val (Bool True)
,,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[,
Jump to felina_assert_join
],Choice - [[Reject her perspective.] ...If Var "felina_rejection_count" == Val (Int 0) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 1) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 2) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 3) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 4) []
[
Jump to felina_rejection_join
],Choice - ''I get it. There's no need...If Var "felina_round" >= Val (Int 2) []
[,
Jump to felina_freedom_join
],Choice - [[Remain silent.]
[
Jump to felina_silence
]]}
]}
,
Jump to felina_fight_staging
]}
,
{Label: felina_dragon_start
[
[If Var "dragon_end" == Val (String "fusion") []]
,
[Else []]
,,,,,,,,
[If Var "dragon_end" == Val (String "fusion") [
[If Var "previous_transform" != Val (String "horror") [
Assign "previous_transform" = Val (String "horror")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "horrorflip")
,,]]
]]
,
[Else [
[If Var "previous_transform" != Val (String "dance") [
Assign "previous_transform" = Val (String "dance")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "danceflip")
,,]]
]]
,,
[If Var "dragon_end" == Val (String "fusion") []]
,
[Else []]
,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If Var "dragon_end" == Val (String "free") [,,,,]]
,
[If Var "dragon_end" == Val (String "fusion") [,,,,]]
,
[If Var "dragon_end" == Val (String "abandon") [,,,,]]
,,,,,,,,
{Label: felina_dragon_menu
[
{Choice Branch: [Choice - outlinecolor=4f1313} ''When...If Var "dragon_end" == Val (String "abandon") []
[
Jump to felina_violence_join
],Choice - (Explore) [[Address this ve...
[
{Choice Branch: [Choice - ''I wish I could leave with...If Var "dragon_end" == Val (String "free") []
[
Jump to dragon_leave_with_me_mound
],Choice - ''I miss being so close to ...
[
{Label: dragon_leave_with_me_mound
[
Assign "felina_fight_effective_resistance" -= Val (Int 2)
,,,,,,,,
{Choice Branch: [Choice - ''I'm ready. I want to leav...If Var "felina_round" >= Val (Int 2) []
[,
Jump to felina_freedom_join
],Choice - ''I won't leave with you. N...If Var "felina_round" >= Val (Int 2) []
[,,]]}
]}
],Choice - ''Just because we're bound ...
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,],Choice - ''That was terrible. I neve...
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,],Choice - ''I never wanted to get pul...
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,],Choice - ''I never wanted to get pul...
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,],Choice - ''I'm sorry that had to end...If Var "dragon_end" == Val (String "fusion") []
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,],Choice - (Return)
[
Jump to felina_dragon_menu
]]}
],Choice - [[Appeal to your shared hum...If Var "felina_appeal_count" == Val (Int 0) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 1) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 2) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 3) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 4) []
[,
Jump to felina_appeal_join
],Choice - [[Reject her authority.] ''...If Var "felina_lecture_count" == Val (Int 0) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 1) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 2) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 3) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 4) []
[,
Jump to felina_lecture_join
],Choice - [[Argue your independence.]...If Var "felina_assert_count" == Val (Int 0) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 1) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 2) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 3) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[
Assign "felina_assert_lethal" = Val (Bool True)
,,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[,
Jump to felina_assert_join
],Choice - [[Reject her perspective.] ...If Var "felina_rejection_count" == Val (Int 0) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 1) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 2) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 3) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 4) []
[
Jump to felina_rejection_join
],Choice - ''I get it. There's no need...If Var "felina_round" >= Val (Int 2) []
[,
Jump to felina_freedom_join
],Choice - [[Remain silent.]
[
Jump to felina_silence
]]}
]}
,
Jump to felina_fight_staging
]}
,
{Label: felina_happy_start
[
[If Var "happy_end" == Val (String "tend") []]
,
[Else []]
,,,,,,,,
[If Var "happy_end" == Val (String "tend") [
[If Var "previous_transform" != Val (String "hands") [
Assign "previous_transform" = Val (String "hands")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "handsflip")
,,]]
]]
,
[Else [
[If Var "previous_transform" != Val (String "dance") [
Assign "previous_transform" = Val (String "dance")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "danceflip")
,,]]
]]
,,
[If Var "happy_end" == Val (String "tend") []]
,
[Else []]
,,
[If Var "happy_end" == Val (String "dance") [,,]]
,
[Else [,,]]
,,,,
[If Var "happy_end" == Val (String "slay") [,,,,,,,,,,,,]]
,
[Elif Var "happy_end" == Val (String "tend") [,,,,,,,,,,,,,,,,,,,,,,]]
,
[Elif Var "happy_end" == Val (String "dance") [,,,,,,,,,,,,,,,,,]]
,
[Elif Var "happy_end" == Val (String "free") [,,,,,,,,,,,,]]
,
[If Var "happy_end" == Val (String "free") || Var "happy_end" == Val (String "slay") [,,,,]]
,,
[If Var "happy_end" == Val (String "tend") []]
,
[Else []]
,,
{Label: felina_happy_menu
[
{Choice Branch: [Choice - outlinecolor=4f1313} ''I su...If Var "happy_end" == Val (String "slay") []
[
Jump to felina_violence_join
],Choice - (Explore) [[Address this ve...
[
{Choice Branch: [Choice - ''I was so glad to dance wi...If Var "happy_end" == Val (String "dance") []
[
Assign "felina_fight_effective_resistance" -= Val (Int 2)
,,,,,,],Choice - ''That was a mockery of a l...
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,],Choice - ''I'm sorry I killed you. I...If Var "happy_end" == Val (String "slay") []
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,],Choice - ''What we shared there was ...
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,],Choice - ''I'd never want to hold th...
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,],Choice - ''I'd never want to hold th...
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,],Choice - ''The only reason we weren'...
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,],Choice - (Return)
[
Jump to felina_happy_menu
]]}
],Choice - [[Appeal to your shared hum...If Var "felina_appeal_count" == Val (Int 0) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 1) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 2) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 3) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 4) []
[,
Jump to felina_appeal_join
],Choice - [[Reject her authority.] ''...If Var "felina_lecture_count" == Val (Int 0) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 1) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 2) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 3) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 4) []
[,
Jump to felina_lecture_join
],Choice - [[Argue your independence.]...If Var "felina_assert_count" == Val (Int 0) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 1) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 2) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 3) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[
Assign "felina_assert_lethal" = Val (Bool True)
,,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[,
Jump to felina_assert_join
],Choice - [[Reject her perspective.] ...If Var "felina_rejection_count" == Val (Int 0) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 1) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 2) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 3) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 4) []
[
Jump to felina_rejection_join
],Choice - ''I get it. There's no need...If Var "felina_round" >= Val (Int 2) []
[,
Jump to felina_freedom_join
],Choice - [[Remain silent.]
[
Jump to felina_silence
]]}
]}
,
Jump to felina_fight_staging
]}
,
{Label: felina_cage_start
[,,,,,,,,
[If Var "previous_transform" != Val (String "hands") [
Assign "previous_transform" = Val (String "hands")
,,]]
,
[Else [
Assign "previous_transform" = Val (String "handsflip")
,,]]
,,,,,,
[If "cage_blade_thrown" []]
,
[Else []]
,,,,,,,,,,,,,,,,,
[If Var "cage_end" == Val (String "free") || Var "cage_end" == Val (String "drop") [,,,,,,,,,,
[If Var "cage_end" == Val (String "drop") [,,,,]]
]]
,
[Elif Var "cage_end" == Val (String "stuck") [,,,,]]
,
[Elif Var "cage_end" == Val (String "slay") [,,,,]]
,,,,,,,
{Label: felina_cage_menu
[
{Choice Branch: [Choice - outlinecolor=4f1313} ''It w...If Var "cage_end" == Val (String "drop") []
[
Jump to felina_violence_join
],Choice - outlinecolor=4f1313} ''Fear...If Var "cage_end" == Val (String "slay") []
[
Jump to felina_violence_join
],Choice - (Explore) [[Address this ve...
[
{Choice Branch: [Choice - ''I was happy to leave with...If Var "cage_end" == Val (String "free") []
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,,,
{Choice Branch: [Choice - ''I'm ready. I want to leav...If Var "felina_round" >= Val (Int 2) []
[,
Jump to felina_freedom_join
],Choice - ''I won't leave with you. N...If Var "felina_round" >= Val (Int 2) []
[,,]]}
],Choice - ''Neither of us could have ...If Var "cage_end" == Val (String "free") []
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,],Choice - ''I was happy to watch the ...If Var "cage_end" == Val (String "stuck") []
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,],Choice - ''You were okay with me dro...If Var "cage_end" == Val (String "drop") []
[,,,,,],Choice - ''I'm so sorry for killing ...If Var "cage_end" == Val (String "slay") []
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,],Choice - ''No matter what we did, we...
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,],Choice - ''Death is more than fear. ...
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,],Choice - ''I'm sorry for dropping yo...If Var "cage_end" == Val (String "drop") []
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,],Choice - ''You speak as if I chose t...If Var "cage_end" == Val (String "stuck") []
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,],Choice - ''You denounce fear and yet...If Var "cage_end" == Val (String "stuck") []
[
Assign "felina_fight_effective_resistance" += Val (Int 1)
,,,,,,],Choice - ''You're right. There's not...
[
Assign "felina_fight_effective_resistance" -= Val (Int 1)
,,,,,,,,,
{Choice Branch: [Choice - ''I'm ready. I want to leav...If Var "felina_round" >= Val (Int 2) []
[,
Jump to felina_freedom_join
],Choice - ''I won't leave with you. N...If Var "felina_round" >= Val (Int 2) []
[,,]]}
],Choice - (Return)
[
Jump to felina_cage_menu
]]}
],Choice - [[Appeal to your shared hum...If Var "felina_appeal_count" == Val (Int 0) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 1) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 2) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 3) []
[,
Jump to felina_appeal_join
],Choice - [[Continue to appeal to you...If Var "felina_appeal_count" == Val (Int 4) []
[,
Jump to felina_appeal_join
],Choice - [[Reject her authority.] ''...If Var "felina_lecture_count" == Val (Int 0) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 1) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 2) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 3) []
[,
Jump to felina_lecture_join
],Choice - [[Continue to reject her au...If Var "felina_lecture_count" == Val (Int 4) []
[,
Jump to felina_lecture_join
],Choice - [[Argue your independence.]...If Var "felina_assert_count" == Val (Int 0) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 1) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 2) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 3) []
[,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[
Assign "felina_assert_lethal" = Val (Bool True)
,,
Jump to felina_assert_join
],Choice - [[Continue to argue your in...If Var "felina_assert_count" == Val (Int 4) []
[,
Jump to felina_assert_join
],Choice - [[Reject her perspective.] ...If Var "felina_rejection_count" == Val (Int 0) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 1) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 2) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 3) []
[
Jump to felina_rejection_join
],Choice - [[Continue to reject her pe...If Var "felina_rejection_count" == Val (Int 4) []
[
Jump to felina_rejection_join
],Choice - ''I get it. There's no need...If Var "felina_round" >= Val (Int 2) []
[,
Jump to felina_freedom_join
],Choice - [[Remain silent.]
[
Jump to felina_silence
]]}
]}
,
Jump to felina_fight_staging
]}
,
{Label: felina_leave_cabin_ending
[,,
[If Var "first_princess" == Val (String "stranger") [,]]
,
{Label: felina_leave_cabin_hero_goodbye
[,
{Choice Branch: [Choice - (Explore) Are you going to ...If Var "first_princess" != Val (String "stranger") && Var "felina_leave_cabin_hero_goodbye" == Val (Bool False) []
[
Assign "felina_leave_cabin_hero_goodbye" = Val (Bool True)
,,,
Jump to felina_leave_cabin_hero_goodbye
],Choice - (Explore) Are you two going...If Var "first_princess" == Val (String "stranger") && Var "felina_leave_cabin_hero_goodbye" == Val (Bool False) []
[
Assign "felina_leave_cabin_hero_goodbye" = Val (Bool True)
,,,,,
Jump to felina_leave_cabin_hero_goodbye
],Choice - (Explore) Thanks for everyt...If Var "felina_leave_cabin_hero_goodbye" == Val (Bool False) []
[
Assign "felina_leave_cabin_hero_goodbye" = Val (Bool True)
,,,
Jump to felina_leave_cabin_hero_goodbye
],Choice - (Explore) Are you sure you ...If Var "felina_leave_cabin_hero_goodbye" == Val (Bool False) []
[
Assign "felina_leave_cabin_hero_goodbye" = Val (Bool True)
,,,
[If Var "first_princess" == Val (String "stranger") [,,,]]
,
[Else [,]]
,
Jump to felina_leave_cabin_hero_goodbye
],Choice - [[Leave with the Princess.]
[
Jump to felina_leave_cabin_leave_join
]]}
]}
]}
,
{Label: felina_leave_cabin_leave_join
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,
[If "felina_cabin_leave_hand_hold" []]
,
[Else []]
,,,
[If Var "first_princess" == Val (String "stranger") []]
,
[Else []]
,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,
[If "felina_cabin_leave_hand_hold" [
[If Var "first_princess" == Val (String "stranger") []]
,
[Else []]
]]
,
[Else [
[If Var "first_princess" == Val (String "stranger") []]
,
[Else []]
]]
,
[If Var "first_princess" == Val (String "stranger") []]
,
[Else []]
,
[If "felina_cabin_leave_hand_hold" [
[If Var "first_princess" == Val (String "stranger") [,,,]]
,
[Else [,
[If Var "first_princess" == Val (String "harsh") []]
,
[Else []]
,,]]
,]]
,
[Else [
Assign "quick_menu" = Val (Bool False)
,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
[If Var "first_princess" == Val (String "stranger") []]
,
[Else []]
]]
,,,,,,
[If Var "first_princess" == Val (String "stranger") []]
,
[Else []]
,,
[If Var "first_princess" == Val (String "gentle") [,,,,,,,,,]]
,
[Elif Var "first_princess" == Val (String "harsh") [,,,,,,,,,,,,,]]
,
[Else [,,,,,,,,,,,,,,,]]
,
{Label: felina_leave_cabin_final_menu
[
{Choice Branch: [Choice - ''I love you.''
[
[If Var "first_princess" == Val (String "gentle") [,,,]]
,
[Elif Var "first_princess" == Val (String "harsh") [,,,,,,,]]
,
[Else [,,,]]
,
Jump to felina_leave_cabin_final_join
],Choice - ''Who's going to open it?''
[
[If Var "first_princess" == Val (String "gentle") [,,,]]
,
[Elif Var "first_princess" == Val (String "harsh") [,,,]]
,
[Else [,,,]]
,
Jump to felina_leave_cabin_final_join
],Choice - ''Are you ready?''
[
[If Var "first_princess" == Val (String "gentle") [,,,]]
,
[Elif Var "first_princess" == Val (String "harsh") [,,,]]
,
[Else [,,,]]
,
Jump to felina_leave_cabin_final_join
],Choice - ''Neither of us knows what ...
[
[If Var "first_princess" == Val (String "gentle") [,,,]]
,
[Elif Var "first_princess" == Val (String "harsh") [,,,]]
,
[Else [,,,]]
,
Jump to felina_leave_cabin_final_join
],Choice - [[Open the door.]
[
{Label: felina_leave_cabin_final_join
[
[If Var "first_princess" != Val (String "stranger") [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,,,,,
Assign "final_ending" = Val (String "leave")
,,,
Jump to credits
]}
]]}
]}
]}
,
{Label: felina_slain_start
[,,,,,,,,,,,,
[If Var "first_princess" == Val (String "harsh") [,,
Assign "default_mouse" = Val (String "blood")
,
[If "felina_slain_apologize" [,,,,,,]]
,
[Else [,,,,,,]]
,,,,,,,,]]
,
[Elif Var "first_princess" == Val (String "gentle") [,,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,,,]]
,
[Else [,,
[If "stranger_other_way" [
Assign "default_mouse" = Val (String "bloodthumb")
]]
,
[Else [
Assign "default_mouse" = Val (String "blood")
]]
,
[If "felina_slain_apologize" [,,,,,,]]
,
[Else [,,,,,,]]
,,,,,,,,]]
,,
Assign "default_mouse" = Val (String "default")
,
Assign "quick_menu" = Val (Bool False)
,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
Assign "quick_menu" = Val (Bool False)
,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
[If "mirror_fates_worse_than_death" []]
,
[Else []]
,,,
{Label: slay_ending_linger
[,
{Choice Branch: [Choice - (Explore) ''No. She's not. ...If Var "slay_ending_linger_explore" == Val (Bool False) []
[
Assign "slay_ending_linger_explore" = Val (Bool True)
,,,
Jump to slay_ending_linger
],Choice - (Explore) ''No. She's not.''If Var "slay_ending_linger_explore" == Val (Bool False) []
[
Assign "slay_ending_linger_explore" = Val (Bool True)
,,,
Jump to slay_ending_linger
],Choice - [[Leave the cabin.]
[
Jump to felina_slain_leave_join
]]}
]}
]}
,
{Label: felina_slain_leave_join
[
[If Var "first_princess" == Val (String "stranger") [,]]
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,
[If Var "first_princess" == Val (String "stranger") [,]]
,,
{Choice Branch: [Choice - [[Set yourself free.]
[,,,,,,
[If "mirror_construct" []]
,
[Else []]
,,,
[If Var "first_princess" == Val (String "stranger") [,]]
,,,
{Choice Branch: [Choice - [[Open your heart and bear ...
[]]}
,,,,,,,,,,,,,,,,
[If Var "mirror_n_cruel_count" >= Val (Int 2) [
[If "broken_met" [,]]
,
[If "stubborn_met" [,]]
,
[If "hunted_met" [,]]
,
[If "cheated_met" [,]]
,
[If "skeptic_met" [,]]
,
[If "paranoid_met" [,]]
,
[If "cold_met" [,]]
,
[If "smitten_met" [,]]
,
[If "contrarian_met" [,,,]]
,
[Else [,]]
,
[If "opportunist_met" [,]]
,,
Assign "final_ending" = Val (String "slay_whoops")
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,
Jump to credits
]]
,
[Else [
[If "broken_met" [,]]
,
[If "stubborn_met" [,,
[If "cheated_met" [,]]
]]
,
[If "cheated_met" && Var "stubborn_met" == Val (Bool False) [,]]
,
[If "cheated_met" [,]]
,
[If "hunted_met" [,]]
,
[If "skeptic_met" [,]]
,
[If "paranoid_met" [,]]
,
[If "cold_met" [,,,]]
,
[If "opportunist_met" [,]]
,
[If "smitten_met" [,,
[If "skeptic_met" [,]]
,
[If "cheated_met" [,]]
,
[If "stubborn_met" [,]]
]]
,
[If Var "first_princess" != Val (String "stranger") && "contrarian_met" [,]]
,
[If Var "first_princess" == Val (String "stranger") [,]]
,
[If "contrarian_met" [,]]
,
[Else [,]]
,,
Assign "final_ending" = Val (String "slay")
]]
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,
Jump to credits
]]}
]}
,
{Label: felina_start
[
Assign "loops_finished" = Val (Int 5)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: felina_menu
[,,,,
{Choice Branch: [Choice - (Explore) ''I've missed you...If Var "felina_menu_miss" == Val (Bool False) && Var "felina_menu_count" == Val (Int 0) []
[
Assign "felina_menu_miss" = Val (Bool True)
,
Assign "felina_menu_count" += Val (Int 1)
,,,,
Jump to felina_menu
],Choice - (Explore) ''Do you know abo...If Var "mirror_smashed" == Val (Bool False) && Var "felina_menu_echo" == Val (Bool False) []
[
Assign "felina_menu_count" += Val (Int 1)
,
Assign "felina_menu_echo" = Val (Bool True)
,
[If "mirror_construct_follow_up" [,,,]]
,
[Elif "mirror_death_reveal" [,,,]]
,
[Else [,,,]]
,,,
Jump to felina_menu
],Choice - (Explore) ''I'm the Long Qu...If Var "felina_menu_names" == Val (Bool False) []
[
Assign "felina_menu_count" += Val (Int 1)
,
Assign "felina_menu_names" = Val (Bool True)
,,,,,
Jump to felina_menu
],Choice - ''What happens now?''
[,,,,,,,,,,,,
Jump to felina_debate
]]}
]}
]}
,
{Label: felina_debate
[,,,,
{Choice Branch: [Choice - (Explore) ''There's so many...If Var "felina_unfinished" == Val (Bool False) []
[
Assign "felina_unfinished" = Val (Bool True)
,,,,,,
Jump to felina_debate
],Choice - (Explore) ''Don't you have ...If Var "felina_say" == Val (Bool False) []
[
Assign "felina_say" = Val (Bool True)
,,,,,,,,,,
Jump to felina_debate
],Choice - (Explore) ''Let's talk this...
[
Assign "mound_fight_triggered" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,
Jump to felina_fight_staging
],Choice - (Explore) ''If I let you ou...
[
Jump to mound_no_understand
],Choice - (Explore) ''If you were alw...
[
Jump to mound_no_understand
],Choice - (Explore) ''There has to be...
[
{Label: mound_no_understand
[
Assign "mound_fight_triggered" = Val (Bool True)
,,,,,,,,,,,,,,,,,,]}
,
Jump to felina_fight_staging
],Choice - ''I told you what was going...If Var "quiet_threaten_count" != Val (Int 0) []
[
Assign "felina_stated_goal" = Val (String "slay")
,,,,,,,,,,,,,,,,,,,
Jump to felina_fight_staging
],Choice - [[Slay the Princess.]
[
Assign "felina_stated_goal" = Val (String "slay")
,,,,,,,,,,,,,,,
Jump to felina_fight_staging
],Choice - ''I think it's time for us ...
[
{Label: felina_freedom_join
[,
[If "fought_mound" [,,,,,,]]
,,,,,,
{Label: felina_freedom_late_join
[
{Choice Branch: [Choice - [[Free yourself.]
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "mirror_construct" []]
,
[Else []]
,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Take her hand.]
[,,,]]}
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: felina_freedom_final_menu
[,
{Choice Branch: [Choice - (Explore) ''What happens no...If Var "felina_freedom_explore" == Val (Bool False) []
[
Assign "felina_freedom_explore" = Val (Bool True)
,,,,,
Jump to felina_freedom_final_menu
],Choice - [[Step into the Infinite.]
[
Assign "quick_menu" = Val (Bool False)
,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,
Assign "final_ending" = Val (String "liberation")
,,
Assign "quick_menu" = Val (Bool False)
,,,,,
Jump to credits
]]}
]}
]]}
]}
]}
]]}
]}
,
{Label: loop_ending
[
Assign "quick_menu" = Val (Bool False)
,,
Assign "quick_menu" = Val (Bool False)
,
Assign "current_princess" = Val (String "base")
,
Assign "trait_hero" = Val (Bool True)
,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,
{Choice Branch: [Choice - (Explore) The end of the wo...If Var "forest_1_questioning_start" == Val (Bool False) []
[
Jump to loop_precredits
],Choice - (Explore) Have you consider...
[
Jump to loop_precredits
],Choice - (Explore) Killing a princes...
[
Jump to loop_precredits
],Choice - (Explore) Can't someone els...If Var "forest_1_someone_else_explore" == Val (Bool False) []
[
Jump to loop_precredits
],Choice - (Explore) Forget it, I'm no...
[
Jump to loop_precredits
],Choice - (Explore) Have you consider...
[
Jump to loop_precredits
],Choice - (Explore) Do I get some sor...
[
Jump to loop_precredits
],Choice - Oh, okay. Thanks for tellin...
[
Jump to loop_precredits
],Choice - Sweet! I've always wanted t...If Var "forest_1_conscientious_objector_explore" == Val (Bool False) []
[
Jump to loop_precredits
],Choice - [[Silently continue to the ...
[
Jump to loop_precredits
],Choice - [[Turn around and leave.]
[
Jump to loop_precredits
]]}
]}
,
{Label: loop_precredits
[,,,,,
Assign "final_ending" = Val (String "loop")
,
Jump to credits
]}
,
{Label: mirror_1_join
[,,,,,,,
Jump to begin_quiet
]}
,
{Label: mirror_2_join
[,,,,,,
Jump to begin_quiet
]}
,
{Label: mirror_3_join
[,,,,,,
Jump to begin_quiet
]}
,
{Label: mirror_4_join
[,,,,,,
Jump to begin_quiet
]}
,
{Label: mirror_finale
[,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "eye")
,,,,,,,,,
{Choice Branch: [Choice - (Explore) ''Are you me?''
[,,,,,,,,,,,,,,,]]}
]}
,
{Label: mirror_final_menu
[
[If Var "mirror_countdown" != Val (Int 12) []]
,
[If Var "mirror_countdown" == Val (Int 11) [,]]
,
[If Var "mirror_countdown" == Val (Int 10) [,]]
,
[If Var "mirror_countdown" == Val (Int 9) [,]]
,
[If Var "mirror_countdown" == Val (Int 8) [,]]
,
[If Var "mirror_countdown" == Val (Int 7) [,]]
,
[If Var "mirror_countdown" == Val (Int 6) [,]]
,
[If Var "mirror_countdown" == Val (Int 5) [,]]
,
[If Var "mirror_countdown" == Val (Int 4) [,]]
,
[If Var "mirror_countdown" == Val (Int 3) [,]]
,
[If Var "mirror_countdown" == Val (Int 2) [,]]
,
Assign "mirror_countdown" -= Val (Int 1)
,,,
[If Var "mirror_countdown" != Val (Int 11) []]
,
[If Var "mirror_countdown" == Val (Int 3) [
[If Var "mirror_quest" == Val (Bool False) [
Assign "mirror_quest" = Val (Bool True)
,
Assign "mirror_creation" = Val (Bool True)
,,,,
Jump to mirror_final_menu
]]
]]
,
[If Var "mirror_countdown" == Val (Int 1) [
Jump to mirror_shard
]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - (Explore) ''In one of my li...If "mirror_long_quiet_reveal" || "mirror_princess_share" || "mirror_quest" || "mirror_creation" && Var "mirror_happy_challenge" == Val (Bool False) && Var "happy_end" == Val (String "dance") || Var "happy_end" == Val (String "free") || Var "happy_end" == Val (String "slay") []
[
Assign "mirror_happy_challenge" = Val (Bool True)
,
Assign "mirror_construct" = Val (Bool True)
,
Assign "mirror_angy_meter" += Val (Int 2)
,
[If Var "mirror_angy" == Val (Bool False) && Var "mirror_angy_meter" >= Val (Int 3) [
Assign "mirror_angy" = Val (Bool True)
]]
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''If you made us,...If "mirror_long_quiet_reveal" && "mirror_mound_reveal" && Var "mirror_torture" == Val (Bool False) []
[
Assign "mirror_torture" = Val (Bool True)
,
Assign "mirror_angy_meter" += Val (Int 1)
,
[If Var "mirror_angy" == Val (Bool False) && Var "mirror_angy_meter" >= Val (Int 3) [
Assign "mirror_angy" = Val (Bool True)
]]
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''If I destroy He...If "mirror_mound_reveal" && "mirror_quest" && Var "mirror_alone" == Val (Bool False) []
[
Assign "mirror_alone" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''Why would you w...If "mirror_mound_reveal" && Var "mirror_long_quiet_reveal" == Val (Bool False) && Var "mirror_death_reveal" == Val (Bool False) []
[
Assign "mirror_why_kill_flag" = Val (Bool True)
,
Jump to mirror_contains_death_join
],Choice - (Explore) ''If I destroy He...If "mirror_death_reveal" && "mirror_mound_reveal" && Var "mirror_fates_worse_than_death" == Val (Bool False) && "mirror_why_kill_flag" []
[
{Label: mirror_cycle_destroy_join
[
Assign "mirror_fates_worse_than_death" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
[If Var "mirror_slay_worse" == Val (Bool False) [
Assign "mirror_slay_worse" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,]]
,
Jump to mirror_final_menu
]}
],Choice - (Explore) ''If you want me ...If "mirror_death_reveal" && "mirror_mound_reveal" && Var "mirror_fates_worse_than_death" == Val (Bool False) && Var "mirror_why_kill_flag" == Val (Bool False) []
[
Jump to mirror_cycle_destroy_join
],Choice - (Explore) ''You're delusion...If "mirror_fates_worse_than_death" && Var "mirror_deluded" == Val (Bool False) []
[
Assign "mirror_deluded" = Val (Bool True)
,
Assign "mirror_angy_meter" += Val (Int 1)
,
[If Var "mirror_angy" == Val (Bool False) && Var "mirror_angy_meter" >= Val (Int 3) [
Assign "mirror_angy" = Val (Bool True)
]]
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''Do you have any...If "mirror_construct_follow_up" || "mirror_mound_reveal" || "mirror_torture" || "mirror_deluded" && Var "mirror_repent" == Val (Bool False) []
[
Assign "mirror_repent" = Val (Bool True)
,
Assign "mirror_angy_meter" += Val (Int 1)
,
[If Var "mirror_angy" == Val (Bool False) && Var "mirror_angy_meter" >= Val (Int 3) [
Assign "mirror_angy" = Val (Bool True)
]]
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''After everythin...If "mirror_construct_follow_up" || "mirror_mound_reveal" || "mirror_torture" || "mirror_deluded" && Var "mirror_deserve" == Val (Bool False) []
[
Assign "mirror_deserve" = Val (Bool True)
,
Assign "mirror_angy_meter" += Val (Int 1)
,
[If Var "mirror_angy" == Val (Bool False) && Var "mirror_angy_meter" >= Val (Int 3) [
Assign "mirror_angy" = Val (Bool True)
]]
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''Do you know tha...If "mirror_mound_reveal" && Var "mirror_slay_worse" == Val (Bool False) []
[
Assign "mirror_slay_worse" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''What would it b...If "mirror_mound_reveal" && Var "mirror_post_princess" == Val (Bool False) []
[
Assign "mirror_post_princess" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''Does anyone els...If "mirror_mound_reveal" && "mirror_long_quiet_reveal" && Var "mirror_beyond_walls" == Val (Bool False) []
[
Assign "mirror_beyond_walls" = Val (Bool True)
,
Assign "mirror_construct" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''I don't want to...If "mirror_long_quiet_reveal" && Var "mirror_refuse_god" == Val (Bool False) && Var "mirror_god_comment" == Val (Bool False) []
[,
Assign "mirror_god_comment" = Val (Bool True)
,
Assign "mirror_refuse_god" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''A god. I always...If "mirror_long_quiet_reveal" && Var "mirror_accept_god" == Val (Bool False) && Var "mirror_god_comment" == Val (Bool False) []
[
Assign "mirror_god_comment" = Val (Bool True)
,
Assign "mirror_accept_god" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''I was made to d...If Var "mirror_echo_mention" == Val (Bool False) && "mirror_quest" && Var "mirror_long_quiet_reveal" == Val (Bool False) []
[
Jump to long_quiet_reveal_join
],Choice - (Explore) ''So you're the N...If Var "mirror_narrator" == Val (Bool False) []
[
Assign "mirror_narrator" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''What are you? A...If Var "mirror_echo_mention" == Val (Bool False) && Var "mirror_narrator_god" == Val (Bool False) []
[
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_echo_join
],Choice - (Explore) ''If you're not m...If Var "mirror_echo_mention" == Val (Bool False) && Var "mirror_narrator_god" == Val (Bool False) []
[
{Label: mirror_echo_join
[
Assign "mirror_echo_mention" = Val (Bool True)
,
Assign "mirror_creation" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
]}
],Choice - (Explore) '''Others like yo...If Var "mirror_multi_narrator" == Val (Bool False) && "mirror_echo_mention" []
[
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_multi_narrator_join
],Choice - (Explore) ''I have so many ...If Var "mirror_many_questions" == Val (Bool False) []
[
Assign "mirror_many_questions" = Val (Bool True)
,
Assign "mirror_angy_meter" += Val (Int 1)
,
[If Var "mirror_angy" == Val (Bool False) && Var "mirror_angy_meter" >= Val (Int 3) [
Assign "mirror_angy" = Val (Bool True)
]]
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''Does it hurt wh...If Var "mirror_hurt_ask" == Val (Bool False) && Var "mirror_countdown" <= Val (Int 12) []
[
Assign "mirror_hurt_ask" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''I'm sorry. I do...If Var "mirror_narrator_apologize" == Val (Bool False) && Var "mirror_countdown" <= Val (Int 12) && Var "mirror_countdown" > Val (Int 2) []
[
Assign "mirror_narrator_apologize" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''Every time I as...If Var "mirror_break_observation" == Val (Bool False) []
[
Assign "mirror_break_observation" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''Whenever I've t...If Var "mirror_reveal_count" >= Val (Int 2) && Var "mirror_narrator_answers" == Val (Bool False) && "mirror_narrator" []
[
Assign "mirror_narrator_answers" = Val (Bool True)
,
[If "mirror_perception_reveal" [
Assign "mirror_versions" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,]]
,
[Else [
Assign "mirror_perception_reveal" = Val (Bool True)
,
Assign "mirror_instrusive_thought" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,]]
,
Jump to mirror_final_menu
],Choice - (Explore) ''Are you a part ...If Var "mirror_part_of_me" == Val (Bool False) []
[
Assign "mirror_part_of_me" = Val (Bool True)
,
Assign "mirror_versions" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) '''Versions of yo...If Var "mirror_multi_narrator" == Val (Bool False) && "mirror_versions" []
[
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_multi_narrator_join
],Choice - (Explore) ''You're the one ...If Var "mirror_narrator" == Val (Bool False) && Var "mirror_death_reveal" == Val (Bool False) []
[
{Label: mirror_contains_death_join
[
Assign "mirror_death_reveal" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
[If Var "mirror_quest" == Val (Bool False) [
Assign "mirror_quest" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,]]
,
Jump to mirror_final_menu
]}
],Choice - (Explore) ''You said She co...If "mirror_death_reveal" && Var "mirror_death_followup" == Val (Bool False) && Var "mirror_mound_reveal" == Val (Bool False) []
[
Assign "mirror_reveal_count" += Val (Int 1)
,
Assign "mirror_death_followup" = Val (Bool True)
,
Assign "mirror_mound_reveal" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
[If Var "mirror_quest" == Val (Bool False) [
Assign "mirror_quest" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,]]
,
Jump to mirror_final_menu
],Choice - (Explore) ''Why couldn't yo...If "mirror_mound_reveal" && Var "mirror_why_hide" == Val (Bool False) []
[
Assign "mirror_reveal_count" += Val (Int 1)
,
Assign "mirror_why_hide" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) '''I don't work t...If "mirror_instrusive_thought" && Var "mirror_long_quiet_reveal" == Val (Bool False) []
[
Assign "mirror_reveal_count" += Val (Int 1)
,
Assign "mirror_long_quiet_reveal" = Val (Bool True)
,
Assign "mirror_creation" = Val (Bool True)
,
Assign "mirror_construct" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''What do you mea...If Var "mirror_instrusive_thought" == Val (Bool False) && "mirror_why_hide" []
[
Assign "mirror_reveal_count" += Val (Int 1)
,
Assign "mirror_instrusive_thought" = Val (Bool True)
,,,,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''Doesn't telling...If "mirror_why_hide" && Var "mirror_instrusive_thought" == Val (Bool False) []
[
Assign "mirror_instrusive_thought" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''If She's capabl...If "mirror_mound_reveal" && Var "mirror_instrusive_thought" == Val (Bool False) []
[
Assign "mirror_reveal_count" += Val (Int 1)
,
Assign "mirror_instrusive_thought" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''I've met you ma...If Var "mirror_multi_narrator" == Val (Bool False) []
[
Assign "mirror_reveal_count" += Val (Int 1)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
{Label: mirror_multi_narrator_join
[
Assign "mirror_multi_narrator" = Val (Bool True)
,
Assign "mirror_construct" = Val (Bool True)
,
Assign "mirror_construct_follow_up" = Val (Bool True)
,,,,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
]}
],Choice - (Explore) ''So you do know ...If "mirror_construct_follow_up" && Var "mirror_narrator_gaslight" == Val (Bool False) []
[
Assign "mirror_narrator_gaslight" = Val (Bool True)
,
Assign "mirror_reveal_count" += Val (Int 1)
,
[If Var "mirror_versions" == Val (Bool False) [
Assign "mirror_versions" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,]]
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
[If Var "mirror_angy" == Val (Bool False) [,,]]
,
[Else [,,]]
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''If you made me,...If Var "mirror_long_quiet_reveal" == Val (Bool False) && "mirror_echo_mention" []
[
{Label: long_quiet_reveal_join
[
Assign "mirror_long_quiet_reveal" = Val (Bool True)
,
Assign "mirror_creation" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,]}
,
Jump to mirror_final_menu
],Choice - (Explore) ''Are you a god? ...If "mirror_long_quiet_reveal" && Var "mirror_narrator_god" == Val (Bool False) []
[
Assign "mirror_narrator_god" = Val (Bool True)
,
Assign "mirror_reveal_count" += Val (Int 1)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''I wasn't suppos...If Var "mirror_see_this" == Val (Bool False) []
[
Assign "mirror_see_this" = Val (Bool True)
,
Assign "mirror_quest_lead" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''If you want me ...If "mirror_quest_lead" && Var "mirror_mound_reveal" == Val (Bool False) []
[
Jump to mirror_princess_identity_join
],Choice - (Explore) ''How did you die?''If Var "mirror_how_narrator_die" == Val (Bool False) && "mirror_mound_reveal" []
[
Assign "mirror_how_narrator_die" = Val (Bool True)
,,,,
Jump to mirror_final_menu
],Choice - (Explore) ''What is the Pri...If Var "mirror_mound_reveal" == Val (Bool False) && "mirror_creation" []
[
{Label: mirror_princess_identity_join
[
Assign "mirror_reveal_count" += Val (Int 1)
,
Assign "mirror_mound_reveal" = Val (Bool True)
,
Assign "mirror_construct" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
[If Var "mirror_quest" == Val (Bool False) [
Assign "mirror_quest" = Val (Bool True)
,
[If "mirror_quest_lead" [
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,]]
,
[Else [
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,]]
]]
,
[Else [
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,]]
,
Jump to mirror_final_menu
]}
],Choice - (Explore) ''Why did you mak...If Var "mirror_why_princess" == Val (Bool False) && "mirror_mound_reveal" []
[
Assign "mirror_why_princess" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''I chose to make...If "mirror_why_princess" && Var "mirror_why_princess_2" == Val (Bool False) && "mirror_mound_reveal" []
[
Assign "mirror_why_princess_2" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_psychoanalyze_join
],Choice - (Explore) ''Of all things, ...If Var "mirror_why_princess" == Val (Bool False) && "mirror_mound_reveal" []
[
Assign "mirror_why_princess" = Val (Bool True)
,
Assign "mirror_why_princess_2" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
{Label: mirror_psychoanalyze_join
[
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,]}
,
Jump to mirror_final_menu
],Choice - (Explore) ''How am I suppos...If "mirror_mound_reveal" && Var "mirror_how_destroy_concept" == Val (Bool False) []
[
Assign "mirror_how_destroy_concept" = Val (Bool True)
,
Assign "mirror_construct" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''What if neither...If "mirror_mound_reveal" && Var "mirror_stall_ask" == Val (Bool False) []
[
Assign "mirror_stall_ask" = Val (Bool True)
,
Assign "mirror_angy_meter" += Val (Int 1)
,
[If Var "mirror_angy" == Val (Bool False) && Var "mirror_angy_meter" >= Val (Int 3) [
Assign "mirror_angy" = Val (Bool True)
]]
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''Is there a diff...If "mirror_stall_ask" && Var "mirror_stall_ask_difference" == Val (Bool False) []
[
Assign "mirror_stall_ask_difference" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''The people out ...If "mirror_construct" && Var "mirror_beyond_walls" == Val (Bool False) []
[
Assign "mirror_reveal_count" += Val (Int 1)
,
Assign "mirror_beyond_walls" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''What is this pl...If Var "mirror_construct" == Val (Bool False) && Var "mirror_construct_follow_up" == Val (Bool False) []
[
Assign "mirror_construct" = Val (Bool True)
,,,
Jump to mirror_construct_join
],Choice - (Explore) ''And what is my ...If "mirror_construct_follow_up" && Var "mirror_long_quiet_reveal" == Val (Bool False) []
[
Jump to long_quiet_reveal_join
],Choice - (Explore) ''You've called t...If "mirror_construct" && Var "mirror_construct_follow_up" == Val (Bool False) []
[
{Label: mirror_construct_join
[
Assign "mirror_reveal_count" += Val (Int 1)
,
Assign "mirror_construct" = Val (Bool True)
,
Assign "mirror_construct_follow_up" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,
Jump to mirror_final_menu
]}
],Choice - (Explore) ''Why would you w...If "mirror_death_reveal" || "mirror_long_quiet_reveal" && Var "mirror_why_no_death" == Val (Bool False) []
[
Assign "mirror_why_no_death" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''I'm pretty sure...If Var "mirror_why_no_death" == Val (Bool False) && Var "mirror_death_good" == Val (Bool False) && "mirror_death_reveal" || "mirror_long_quiet_reveal" []
[
Assign "mirror_why_no_death" = Val (Bool True)
,
Assign "mirror_death_good" = Val (Bool True)
,
Assign "mirror_angy_meter" += Val (Int 1)
,
[If Var "mirror_angy" == Val (Bool False) && Var "mirror_angy_meter" >= Val (Int 3) [
Assign "mirror_angy" = Val (Bool True)
]]
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''But I've died p...If Var "mirror_died_lots" == Val (Bool False) && "mirror_death_good" []
[
Jump to mirror_fake_die_join
],Choice - (Explore) ''Who cares about...If Var "mirror_died_lots" == Val (Bool False) && "mirror_death_reveal" || "mirror_long_quiet_reveal" []
[
{Label: mirror_fake_die_join
[
Assign "mirror_died_lots" = Val (Bool True)
,
Assign "mirror_angy_meter" += Val (Int 1)
,
[If Var "mirror_angy" == Val (Bool False) && Var "mirror_angy_meter" >= Val (Int 3) [
Assign "mirror_angy" = Val (Bool True)
]]
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
]}
],Choice - (Explore) ''And how do you ...If "mirror_died_lots" && Var "mirror_died_question" == Val (Bool False) []
[
Assign "mirror_died_question" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''I think you're ...If Var "mirror_died_final" == Val (Bool False) && "mirror_died_question" []
[
Assign "mirror_died_final" = Val (Bool True)
,
Assign "mirror_angy_meter" += Val (Int 1)
,
[If Var "mirror_angy" == Val (Bool False) && Var "mirror_angy_meter" >= Val (Int 3) [
Assign "mirror_angy" = Val (Bool True)
]]
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''How am I suppos...If Var "mirror_quest" == Val (Bool False) && "mirror_long_quiet_reveal" []
[
Assign "mirror_quest" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
],Choice - (Explore) ''You made us? Ou...If "mirror_narrator_god" && Var "mirror_shaped" == Val (Bool False) []
[
Jump to mirror_shaped_join
],Choice - (Explore) ''What were we sh...If "mirror_how_destroy_concept" && Var "mirror_shaped" == Val (Bool False) []
[
{Label: mirror_shaped_join
[
Assign "mirror_shaped" = Val (Bool True)
,
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
Jump to mirror_final_menu
]}
],Choice - [[Destroy the Mirror.]
[
Assign "mirror_smashed" = Val (Bool True)
,,,,,
[If Var "mirror_countdown" >= Val (Int 11) [,]]
,
[Else []]
,
[If "mirror_long_quiet_reveal" []]
,
[Else []]
,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
{Choice Branch: [Choice - [[Proceed to the cabin, one...
[
Jump to felina_start_join
]]}
]]}
]}
,
{Label: mirror_shard
[,
{Choice Branch: [Choice - ''I think you're out of tim...
[
[If "mirror_echo_mention" [
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,]]
,
[Else [
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,]]
],Choice - ''I'm not going to slay Her...
[
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
[If "mirror_echo_mention" [
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,]]
,
[Else [
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,]]
],Choice - ''Rest easy. I'm going to d...
[
{Label: mirror_destroy_join
[
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,,
{Label: mirror_echo_final_join
[
[If "mirror_echo_mention" [
[If Var "mirror_angy" == Val (Bool False) []]
,
[Else []]
,,]]
,
[Else [,,]]
]}
]}
],Choice - (Lie) ''Rest easy. I'm goin...
[
Jump to mirror_destroy_join
],Choice - 'I haven't decided what I'm...
[
Jump to mirror_default_end
],Choice - [[Say nothing, and watch hi...
[
{Label: mirror_default_end
[,,,
Jump to mirror_echo_final_join
]}
]]}
,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,
[If "mirror_long_quiet_reveal" []]
,
[Else [
Assign "mirror_long_quiet_reveal" = Val (Bool True)
,]]
,
{Choice Branch: [Choice - [[Proceed to the cabin, one...
[
{Label: felina_start_join
[
[If Var "current_princess" == Val (String "adversary") [
Assign "fifth_mound" = Val (String "adversary")
]]
,
[Elif Var "current_princess" == Val (String "needle") [
Assign "fifth_mound" = Val (String "needle")
]]
,
[Elif Var "current_princess" == Val (String "beast") [
Assign "fifth_mound" = Val (String "beast")
]]
,
[Elif Var "current_princess" == Val (String "den") [
Assign "fifth_mound" = Val (String "den")
]]
,
[Elif Var "current_princess" == Val (String "damsel") [
Assign "fifth_mound" = Val (String "damsel")
]]
,
[Elif Var "current_princess" == Val (String "dereal") [
Assign "fifth_mound" = Val (String "dereal")
]]
,
[Elif Var "current_princess" == Val (String "nightmare") [
Assign "fifth_mound" = Val (String "nightmare")
]]
,
[Elif Var "current_princess" == Val (String "clarity") [
Assign "fifth_mound" = Val (String "clarity")
]]
,
[Elif Var "current_princess" == Val (String "prisonerhead") [
Assign "fifth_mound" = Val (String "prisonerhead")
]]
,
[Elif Var "current_princess" == Val (String "prisonerchain") [
Assign "fifth_mound" = Val (String "prisonerchain")
]]
,
[Elif Var "current_princess" == Val (String "razorheart") [
Assign "fifth_mound" = Val (String "razorheart")
]]
,
[Elif Var "current_princess" == Val (String "razor") [
Assign "fifth_mound" = Val (String "razor")
]]
,
[Elif Var "current_princess" == Val (String "spectre") [
Assign "fifth_mound" = Val (String "spectre")
]]
,
[Elif Var "current_princess" == Val (String "stranger") [
Assign "fifth_mound" = Val (String "stranger")
]]
,
[Elif Var "current_princess" == Val (String "tower") [
Assign "fifth_mound" = Val (String "tower")
]]
,
[Elif Var "current_princess" == Val (String "apotheosis") [
Assign "fifth_mound" = Val (String "apotheosis")
]]
,
[Elif Var "current_princess" == Val (String "witch") [
Assign "fifth_mound" = Val (String "witch")
]]
,
[Elif Var "current_princess" == Val (String "thorn") [
Assign "fifth_mound" = Val (String "thorn")
]]
,
[Elif Var "current_princess" == Val (String "fury") [
Assign "fifth_mound" = Val (String "fury")
]]
,
[Elif Var "current_princess" == Val (String "greydamsel") [
Assign "fifth_mound" = Val (String "greydamsel")
]]
,
[Elif Var "current_princess" == Val (String "greyprisoner") [
Assign "fifth_mound" = Val (String "greyprisoner")
]]
,
[Elif Var "current_princess" == Val (String "wildnerves") [
Assign "fifth_mound" = Val (String "wildnerves")
]]
,
[Elif Var "current_princess" == Val (String "wildwound") [
Assign "fifth_mound" = Val (String "wildwound")
]]
,
[Elif Var "current_princess" == Val (String "wraith") [
Assign "fifth_mound" = Val (String "wraith")
]]
,
[Elif Var "current_princess" == Val (String "happy") [
Assign "fifth_mound" = Val (String "happy")
]]
,
[Elif Var "current_princess" == Val (String "happydry") [
Assign "fifth_mound" = Val (String "happydry")
]]
,
[Elif Var "current_princess" == Val (String "furyheart") [
Assign "fifth_mound" = Val (String "furyheart")
]]
,
[Elif Var "current_princess" == Val (String "dragon") [
Assign "fifth_mound" = Val (String "dragon")
]]
,
[Elif Var "current_princess" == Val (String "dragonfused") [
Assign "fifth_mound" = Val (String "dragonfused")
]]
,
[Elif Var "current_princess" == Val (String "dragonhand") [
Assign "fifth_mound" = Val (String "dragonhand")
]]
,
[Elif Var "current_princess" == Val (String "cage") [
Assign "fifth_mound" = Val (String "cage")
]]
,
[If Var "current_princess" == Val (String "adversary") [,,,]]
,
[Elif Var "current_princess" == Val (String "needle") [,,,]]
,
[Elif Var "current_princess" == Val (String "beast") [,,,]]
,
[Elif Var "current_princess" == Val (String "den") [,,,]]
,
[Elif Var "current_princess" == Val (String "damsel") [,,,]]
,
[Elif Var "current_princess" == Val (String "dereal") [,,,]]
,
[Elif Var "current_princess" == Val (String "nightmare") [,,,]]
,
[Elif Var "current_princess" == Val (String "clarity") [,,,]]
,
[Elif Var "current_princess" == Val (String "prisonerhead") [,,,]]
,
[Elif Var "current_princess" == Val (String "prisonerchain") [,,,]]
,
[Elif Var "current_princess" == Val (String "razorheart") [,,,]]
,
[Elif Var "current_princess" == Val (String "razor") [,,,]]
,
[Elif Var "current_princess" == Val (String "spectre") [,,,]]
,
[Elif Var "current_princess" == Val (String "stranger") [,,,]]
,
[Elif Var "current_princess" == Val (String "tower") [,,,]]
,
[Elif Var "current_princess" == Val (String "apotheosis") [,,,]]
,
[Elif Var "current_princess" == Val (String "witch") [,,,]]
,
[Elif Var "current_princess" == Val (String "thorn") [,,,]]
,
[Elif Var "current_princess" == Val (String "fury") [,,]]
,
[Elif Var "current_princess" == Val (String "greydamsel") [,,,]]
,
[Elif Var "current_princess" == Val (String "greyprisoner") [,,,]]
,
[Elif Var "current_princess" == Val (String "wildnerves") [,,,]]
,
[Elif Var "current_princess" == Val (String "wildwound") [,,,]]
,
[Elif Var "current_princess" == Val (String "wraith") [,,,]]
,
[Elif Var "current_princess" == Val (String "happy") [,,,]]
,
[Elif Var "current_princess" == Val (String "happydry") [,,,]]
,
[Elif Var "current_princess" == Val (String "dragon") || Var "current_princess" == Val (String "dragonhand") [,,,]]
,
[Elif Var "current_princess" == Val (String "dragonfused") [,,,]]
,
[Elif Var "current_princess" == Val (String "cage") [,,,]]
,
[Elif Var "current_princess" == Val (String "furyheart") [,,]]
,
[If "trait_stubborn" [
Assign "stubborn_met" = Val (Bool True)
,
Assign "trait_stubborn" = Val (Bool False)
]]
,
[If "trait_hunted" [
Assign "hunted_met" = Val (Bool True)
,
Assign "trait_hunted" = Val (Bool False)
]]
,
[If "trait_smitten" [
Assign "smitten_met" = Val (Bool True)
,
Assign "trait_smitten" = Val (Bool False)
]]
,
[If "trait_paranoid" [
Assign "paranoid_met" = Val (Bool True)
,
Assign "trait_paranoid" = Val (Bool False)
]]
,
[If "trait_skeptic" [
Assign "skeptic_met" = Val (Bool True)
,
Assign "trait_skeptic" = Val (Bool False)
]]
,
[If "trait_cheated" [
Assign "cheated_met" = Val (Bool True)
,
Assign "trait_cheated" = Val (Bool False)
]]
,
[If "trait_cold" [
Assign "cold_met" = Val (Bool True)
,
Assign "trait_cold" = Val (Bool False)
]]
,
[If "trait_contrarian" [
Assign "contrarian_met" = Val (Bool True)
,
Assign "trait_contrarian" = Val (Bool False)
]]
,
[If "trait_broken" [
Assign "broken_met" = Val (Bool True)
,
Assign "trait_broken" = Val (Bool False)
]]
,
[If "trait_opportunist" [
Assign "opportunist_met" = Val (Bool True)
,
Assign "trait_opportunist" = Val (Bool False)
]]
,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
Jump to felina_start
]}
]]}
]}
,
{Label: mirror_nightmare_2
[
Assign "nightmare_2_finished" = Val (Bool True)
,
{Choice Branch: [Choice - [[Approach the mirror.]
[,,,,
Jump to mirror_nightmare_2_wipe
]]}
,
{Label: mirror_nightmare_2_wipe
[
[If Var "loops_finished" == Val (Int 0) []]
,
[Elif Var "loops_finished" < Val (Int 5) []]
,
[Else []]
,,,,,,,,,,,,,,,,,,,,,,,
Assign "mirror_comfort_count" += Val (Int 1)
,
{Choice Branch: [Choice - [[Gaze into your reflection.]
[
Jump to mirror_n_gaze_join
]]}
]}
]}
,
{Label: mirror_start
[,,,,,,,
Jump to mirror_start_2
]}
,
{Label: mirror_start_2
[
[If "current_run_mirror_comment" || "current_run_mirror_touched" [,]]
,
[Else [,]]
,,
[If Var "loops_finished" == Val (Int 0) [,,,
Assign "mirror_hero_scared_flag" = Val (Bool True)
,
{Label: mirror_1_menu
[
{Choice Branch: [Choice - (Explore) I don't know wher...If Var "mirror_1_where_princess" == Val (Bool False) []
[
Assign "mirror_1_where_princess" = Val (Bool True)
,
[If "trait_skeptic" [,]]
,
[If "trait_opportunist" [,]]
,,,
[If "trait_stubborn" [,]]
,
[If "trait_hunted" [,]]
,
[If "trait_smitten" [,]]
,
[If "trait_paranoid" [,]]
,
[If "trait_cheated" [,]]
,
[If "trait_cold" [,]]
,
[If "trait_broken" [,]]
,
[If "trait_contrarian" [
[If Var "mirror_1_narrator_gone" == Val (Bool False) [,]]
,
[Else [,]]
]]
,
Jump to mirror_1_menu
],Choice - (Explore) The Narrator is g...If Var "mirror_1_narrator_gone" == Val (Bool False) && Var "current_princess" != Val (String "happy") []
[
Assign "mirror_1_narrator_gone" = Val (Bool True)
,,,
[If "trait_skeptic" [,]]
,
[If "trait_hunted" [,]]
,
[If "trait_cold" [,]]
,
[If "trait_contrarian" [
[If Var "mirror_1_where_princess" == Val (Bool False) [,]]
,
[Else [,]]
]]
,
[If "trait_paranoid" [,]]
,
[If "trait_stubborn" [,]]
,
[If "trait_broken" [,]]
,
[If "trait_opportunist" [,]]
,
[If "trait_smitten" [,]]
,
[If "trait_cheated" [,]]
,
Jump to mirror_1_menu
],Choice - (Explore) I think I'm suppo...If Var "mirror_1_mirror_suggest" == Val (Bool False) []
[
Assign "mirror_1_mirror_suggest" = Val (Bool True)
,
Assign "mirror_n_explore" = Val (Bool True)
,,,
[If "trait_contrarian" [,]]
,
[If "trait_hunted" [,]]
,
[If "trait_paranoid" [,]]
,
[If "trait_skeptic" [,]]
,
[If "trait_stubborn" [,]]
,
[If "trait_broken" [,]]
,
[If "trait_smitten" [,]]
,
[If "trait_cheated" [,]]
,
[If "trait_opportunist" [
[If Var "current_princess" == Val (String "witch") || Var "current_princess" == Val (String "happy") || Var "current_princess" == Val (String "happydry") [,]]
,
[Else [,]]
]]
,
[If "trait_cold" [
[If Var "current_princess" == Val (String "spectre") [,]]
,
[Else [,]]
]]
,
Jump to mirror_1_menu
],Choice - [[Approach the mirror.]
[,,
{Choice Branch: [Choice - (Explore) The mirror never ...If "current_run_mirror_comment" || "current_run_mirror_touched" []
[
Assign "mirror_n_explore" = Val (Bool True)
,,,
[If Var "mirror_1_mirror_suggest" == Val (Bool False) [
Assign "mirror_1_mirror_suggest" = Val (Bool True)
,
[If "trait_contrarian" [,]]
,
[If "trait_hunted" [,]]
,
[If "trait_paranoid" [,]]
,
[If "trait_skeptic" [,]]
,
[If "trait_stubborn" [,]]
,
[If "trait_broken" [,]]
,
[If "trait_smitten" [,]]
,
[If "trait_cheated" [,]]
,
[If "trait_opportunist" [
[If Var "current_princess" == Val (String "witch") || Var "current_princess" == Val (String "happy") || Var "current_princess" == Val (String "happydry") [,]]
,
[Else [,]]
]]
,
[If "trait_cold" [
[If Var "current_princess" == Val (String "spectre") [,]]
,
[Else [,]]
]]
,
Jump to mirror_approach_join
]]
],Choice - [[Ignore him.]
[
Jump to mirror_approach_join
]]}
]]}
]}
]]
,
[Else [
{Label: mirror_n_menu
[,,,,,
{Choice Branch: [Choice - (Explore) Of course you're ...If Var "mirror_n_explore" == Val (Bool False) []
[
Assign "mirror_n_explore" = Val (Bool True)
,
Jump to mirror_n_cruel
],Choice - (Explore) It's going to be ...If Var "mirror_n_explore" == Val (Bool False) && Var "mirror_hero_scared_flag" == Val (Bool False) []
[
Assign "mirror_hero_scared_flag" = Val (Bool True)
,
Jump to mirror_n_explore_join
],Choice - (Explore) It's going to be ...If Var "mirror_n_explore" == Val (Bool False) && "mirror_hero_scared_flag" []
[
{Label: mirror_n_explore_join
[
Assign "mirror_n_explore" = Val (Bool True)
,,,
[If "trait_contrarian" [,]]
,
[If "trait_hunted" [,]]
,
[If "trait_paranoid" [,]]
,
[If "trait_skeptic" [,]]
,
[If "trait_stubborn" [,]]
,
[If "trait_broken" [,]]
,
[If "trait_smitten" [,]]
,
[If "trait_cheated" [,]]
,
[If "trait_opportunist" [
[If Var "current_princess" == Val (String "witch") || Var "current_princess" == Val (String "happy") || Var "current_princess" == Val (String "happydry") [,]]
,
[Else [,]]
]]
,
[If "trait_cold" [
[If Var "current_princess" == Val (String "spectre") [,]]
,
[Else [,]]
]]
,
{Label: mirror_n_menu_comfort
[
{Choice Branch: [Choice - It's not the end. Whatever'...
[
{Label: mirror_n_comfort_join
[
Assign "mirror_comfort_count" += Val (Int 1)
,,,
[If "trait_paranoid" [,]]
,
[If "trait_hunted" [,]]
,
[If "trait_stubborn" [,]]
,
[If "trait_broken" [,]]
,
[If "trait_contrarian" [,]]
,
[If "trait_cheated" [,]]
,
[If "trait_skeptic" [,]]
,
[If "trait_smitten" [,]]
,
[If "trait_opportunist" [,]]
,
[If "trait_cold" [,]]
,
Jump to mirror_n_menu
]}
],Choice - It's the end for you, but n...
[
{Label: mirror_n_cruel
[
Assign "mirror_comfort_count" -= Val (Int 1)
,
Assign "mirror_n_cruel_count" += Val (Int 1)
,
[If "trait_cold" [,]]
,,,
[If "trait_hunted" [,]]
,
[If "trait_broken" [,]]
,
[If "trait_stubborn" [,]]
,
[If "trait_opportunist" [,]]
,
[If "trait_contrarian" [,]]
,
[If "trait_cheated" [,]]
,
[If "trait_skeptic" [,]]
,
[If "trait_paranoid" [,]]
,
[If "trait_smitten" [,]]
,
Jump to mirror_n_menu
]}
],Choice - I'll see you on the other s...
[
Jump to mirror_n_comfort_join
],Choice - [[Approach the mirror.]
[
Assign "mirror_n_silence_flag" = Val (Bool True)
,
Jump to mirror_approach_join
]]}
,
Jump to mirror_n_menu
]}
]}
],Choice - [[Approach the mirror.]
[
[If Var "mirror_hero_scared_flag" == Val (Bool False) [
Assign "mirror_hero_scared_flag" = Val (Bool True)
]]
,
Jump to mirror_approach_join
]]}
]}
]]
]}
,
{Label: mirror_approach_join
[
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,
[If "mirror_n_silence_flag" [,,]]
,
[If Var "mirror_n_explore" == Val (Bool False) [,,
[If "trait_contrarian" [,]]
,
[If "trait_hunted" [,]]
,
[If "trait_paranoid" [,]]
,
[If "trait_skeptic" [,]]
,
[If "trait_stubborn" [,]]
,
[If "trait_broken" [,]]
,
[If "trait_smitten" [,]]
,
[If "trait_cheated" [,]]
,
[If "trait_opportunist" [
[If Var "current_princess" == Val (String "witch") || Var "current_princess" == Val (String "happy") || Var "current_princess" == Val (String "happydry") [,]]
,
[Else [,]]
]]
,
[If "trait_cold" [
[If Var "current_princess" == Val (String "spectre") [,]]
,
[Else [,]]
]]
,]]
,
{Label: mirror_n_wipe
[
{Choice Branch: [Choice - [[Gaze into your reflection.]
[
{Label: mirror_n_gaze_join
[,,
[If "razor_just_finished" [
Assign "razor_just_finished" = Val (Bool False)
,]]
,
[Elif Var "loops_finished" == Val (Int 0) || Var "loops_finished" == Val (Int 1) && "razor_finished" []]
,
[Else []]
]}
]]}
]}
]}
,
{Label: mirror_sort
[,,
[If Var "loops_finished" == Val (Int 0) [
Jump to mirror_1_join
]]
,
[Elif Var "loops_finished" == Val (Int 1) [
Jump to mirror_2_join
]]
,
[Elif Var "loops_finished" == Val (Int 2) [
Jump to mirror_3_join
]]
,
[Elif Var "loops_finished" == Val (Int 3) [
Jump to mirror_4_join
]]
,
[Else [
Jump to mirror_finale
]]
]}
,
{Label: begin_quiet
[,,
[If Var "loops_finished" == Val (Int 1) [,,]]
,
[Elif Var "loops_finished" == Val (Int 2) [,,]]
,
[Elif Var "loops_finished" == Val (Int 3) [,,]]
,
Assign "quick_menu" = Val (Bool False)
,
Assign "blade_held" = Val (Bool False)
,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
[If Var "loops_finished" == Val (Int 0) []]
,
[Else []]
,
{Choice Branch: [Choice - [[Proceed to the cabin.]
[,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 5) [,]]
,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
[If Var "loops_finished" == Val (Int 0) [,]]
,
[If Var "loops_finished" == Val (Int 5) [
Jump to felina_start
]]
,,
{Choice Branch: [Choice - [[Approach her.]
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
[If Var "loops_finished" == Val (Int 0) [
Jump to quiet_1_start
]]
,
[Elif Var "loops_finished" == Val (Int 1) [
Jump to quiet_2_start
]]
,
[Elif Var "loops_finished" == Val (Int 2) [
Jump to quiet_3_start
]]
,
[Elif Var "loops_finished" == Val (Int 3) [
Jump to quiet_4_start
]]
]]}
]]}
]}
,
{Label: quiet_1_start
[
[If Var "current_princess" == Val (String "stranger") [
Assign "princess_satisfy" += Val (Int 1)
]]
,
[If Var "loops_destroyed" > Val (Int 0) [,,,,,]]
,
[Else [
Assign "quiet1_direct" = Val (Bool True)
,,,,,]]
,,
{Label: quiet_1_menu
[
{Choice Branch: [Choice - plore) ''You're that thing ...If Var "loops_destroyed" > Val (Int 0) && Var "quiet_1_destroyed_explore" == Val (Bool False) []
[,
Assign "quiet_1_destroyed_explore" = Val (Bool True)
,,,,,,
Jump to quiet_1_menu
],Choice - plore) ''What are yoIf Var "quiet1_what" == Val (Bool False) []
[
Assign "quiet1_what" = Val (Bool True)
,,,,,,
{Label: quiet1_what_menu_join
[
{Choice Branch: [Choice - plore) ''Solitary lights? W...If Var "quiet1_lights" == Val (Bool False) []
[
Assign "quiet1_lights" = Val (Bool True)
,,,,,,
Jump to quiet1_what_menu_join
],Choice - hat do you think I a
[,,,],Choice -  don't know what I a
[,,,],Choice - 'm a perso
[,,,]]}
,,,,,,
Jump to quiet_1_menu
]}
],Choice - plore) ''The gift of a frag...If Var "quiet1_fragile" == Val (Bool False) []
[
Assign "quiet1_fragile" = Val (Bool True)
,,,,,
{Label: quiet_vessels
[
[If Var "current_princess" == Val (String "adversary") [,,,,,,,]]
,
[Elif Var "current_princess" == Val (String "needle") [,,,,,,,]]
,
[Elif Var "current_princess" == Val (String "dragon") || Var "current_princess" == Val (String "dragonfused") || Var "current_princess" == Val (String "dragonhand") [,,,,,,,]]
,
[Elif Var "current_princess" == Val (String "cage") [
[If Var "cage_end" == Val (String "free") [,,,,,,,]]
,
[Else [,,,,,,,]]
]]
,
[Elif Var "current_princess" == Val (String "happy") || Var "current_princess" == Val (String "happydry") [,,,,,,,]]
,
[Elif Var "current_princess" == Val (String "beast") [,,,,,,,,,,,]]
,
[Elif Var "current_princess" == Val (String "den") [,,,,
[If Var "beast_2_end" != Val (String "free") [,,,]]
,,,,]]
,
[Elif Var "current_princess" == Val (String "damsel") [,,,,,,,]]
,
[Elif Var "current_princess" == Val (String "dereal") [,,,,,,,]]
,
[Elif Var "current_princess" == Val (String "nightmare") [,,,,,,,]]
,
[Elif Var "current_princess" == Val (String "clarity") [,,,,,,,]]
,
[Elif Var "current_princess" == Val (String "prisonerhead") || Var "current_princess" == Val (String "prisoner") [,,,,,,,]]
,
[Elif Var "current_princess" == Val (String "prisonerchain") [,,,,,,,]]
,
[Elif Var "current_princess" == Val (String "razor") || Var "current_princess" == Val (String "razorheart") [,,,,,,,]]
,
[Elif Var "current_princess" == Val (String "spectre") [,,,,,,,]]
,
[Elif Var "current_princess" == Val (String "stranger") [,,,,
[If Var "loops_finished" == Val (Int 0) [,,,]]
,
[Else [,,,]]
,,,,]]
,
[Elif Var "current_princess" == Val (String "tower") [,,,,,,,]]
,
[Elif Var "current_princess" == Val (String "apotheosis") [,,,,,,,]]
,
[Elif Var "current_princess" == Val (String "witch") [,,,,,,,]]
,
[Elif Var "current_princess" == Val (String "fury") || Var "current_princess" == Val (String "furyheart") [,,,,,,,]]
,
[Elif Var "current_princess" == Val (String "wildnerves") [,,,,,,,]]
,
[Elif Var "current_princess" == Val (String "wildwound") [,,,,,,,]]
,
[Elif Var "current_princess" == Val (String "wraith") [,,,,,,,]]
,
[Elif Var "current_princess" == Val (String "greydamsel") || Var "current_princess" == Val (String "greyprisoner") [
[If Var "current_princess" == Val (String "greydamsel") [,,,,,,,]]
,
[Else [,,,,,,,]]
]]
,
[Elif Var "current_princess" == Val (String "thorn") [,,,,,,]]
]}
,,,
[If Var "loops_finished" == Val (Int 0) [
Jump to quiet_1_menu
]]
,
[Elif Var "loops_finished" == Val (Int 1) [
Jump to quiet_2_menu
]]
,
[Elif Var "loops_finished" == Val (Int 2) [
Jump to quiet_3_menu
]]
,
[Elif Var "loops_finished" == Val (Int 3) [
Jump to quiet_4_menu
]]
],Choice - plore) ''Is this the end of...If Var "quiet_1_world_end" == Val (Bool False) []
[,
Assign "quiet_1_world_end" = Val (Bool True)
,,,,,,
Jump to quiet_1_menu
],Choice - plore) ''Let her out of therIf Var "quiet_1_let_out" == Val (Bool False) []
[,
Assign "quiet_1_let_out" = Val (Bool True)
,,,,,,,,,,
Jump to quiet_1_menu
],Choice - plore) ''Do you know the Na...If Var "quiet1_narrator" == Val (Bool False) []
[
Assign "quiet1_narrator" = Val (Bool True)
,
[If "wild_fed" || "wraith_fed" || "spectre_fed" || "apotheosis_fed" || "tower_fed" [,,,]]
,
[Else [,,,]]
,,,,,,
Jump to quiet_1_menu
],Choice - plore) ''Are you what sent ...If Var "quiet1_trapped" == Val (Bool False) []
[
Assign "quiet1_trapped" = Val (Bool True)
,,,,,,
Jump to quiet_1_menu
],Choice - plore) ''Do you know about ...If Var "quiet1_worlds_beyond" == Val (Bool False) []
[
Assign "quiet1_worlds_beyond" = Val (Bool True)
,,,,,,
Jump to quiet_1_menu
],Choice - plore) ''Are you the PrincesIf Var "quiet1_are_you_princess" == Val (Bool False) []
[
Assign "quiet1_are_you_princess" = Val (Bool True)
,,,,,,
{Choice Branch: [Choice - ut were you always the Prin...
[,,,,],Choice - ay nothi
[
Jump to quiet_1_menu
]]}
,
Jump to quiet_1_menu
],Choice - plore) ''Do we know each otheIf Var "quiet1_know_each_other" == Val (Bool False) && Var "loops_destroyed" == Val (Bool False) []
[
Assign "quiet1_know_each_other" = Val (Bool True)
,,,,,,
Jump to quiet_1_menu
],Choice - hat happens no
[,,,,,,,,,,,,,
{Label: quiet1_decision
[,
{Choice Branch: [Choice - plore) ''Aren't you scared ...If Var "quiet1_kill_explore" == Val (Bool False) []
[
Assign "quiet1_kill_explore" = Val (Bool True)
,
Assign "quiet1_decision_count" += Val (Int 1)
,,,,,,
Jump to quiet1_decision
],Choice - plore) ''How much will I forgeIf Var "quiet1_forget_explore" == Val (Bool False) []
[
Assign "quiet1_forget_explore" = Val (Bool True)
,
Assign "quiet1_decision_count" += Val (Int 1)
,,,,,,
Jump to quiet1_decision
],Choice - plore) ''How many more piec...If Var "quiet1_pieces_explore" == Val (Bool False) []
[
Assign "quiet1_pieces_explore" = Val (Bool True)
,
Assign "quiet1_decision_count" += Val (Int 1)
,,,,,,
Jump to quiet1_decision
],Choice - plore) ''And what if I don'...If Var "quiet1_refuse_explore" == Val (Bool False) []
[
Assign "quiet1_refuse_explore" = Val (Bool True)
,
Assign "quiet1_decision_count" += Val (Int 1)
,,,,,,
Jump to quiet1_decision
],Choice - plore) ''I was sent to slay...If Var "quiet1_destroy_explore" == Val (Bool False) []
[
Assign "quiet1_destroy_explore" = Val (Bool True)
,
Assign "quiet1_decision_count" += Val (Int 1)
,,,,,,
{Choice Branch: [Choice - ou're being semantic. What ...
[,,,,,
Jump to quiet1_decision
],Choice - et it 
[
Jump to quiet1_decision
]]}
],Choice - 'm not going back.'' [[WaIf Var "quiet1_stay_forever_attempt" == Val (Bool False) && "quiet1_refuse_explore" []
[
Assign "quiet1_stay_forever_attempt" = Val (Bool True)
,,,,,,
{Choice Branch: [Choice - ait forev
[
Assign "quiet1_stay_forever_attempt" = Val (Bool True)
,,,,,,,,,
{Label: wait_forever_join
[,,,,,,,,,,,]}
],Choice - kay. I'm ready. Make me forge
[
Jump to quiet_1_forget_join
]]}
],Choice - kay. Make me forge
[
{Label: quiet_1_forget_join
[,,,,,,,,,,,,,,,,,,,,,
Jump to restart_start
]}
]]}
]}
],Choice - Attack the entiIf Var "quiet_attack" == Val (Bool False) []
[
Assign "quiet1_mound_attacked" = Val (Bool True)
,
Assign "quiet_attack" = Val (Bool True)
,,,,,,,,
Jump to quiet_1_menu
],Choice - Destroy your boIf Var "quiet_suicide_attempt" == Val (Bool False) []
[
Assign "quiet1_suicide" = Val (Bool True)
,
Assign "quiet_suicide_attempt" = Val (Bool True)
,,,,,,,,,
Jump to quiet_1_menu
]]}
]}
]}
,
{Label: quiet_2_start
[
[If "quiet1_direct" && Var "loops_destroyed" == Val (Int 1) [,,,]]
,
[Elif "quiet1_direct" && Var "loops_destroyed" == Val (Int 2) [,,,]]
,
[Elif "quiet1_direct" && Var "loops_destroyed" == Val (Int 3) [,,,]]
,
[Elif "quiet1_direct" && Var "loops_destroyed" == Val (Int 4) [,,,]]
,
[Elif "quiet1_direct" && Var "loops_destroyed" == Val (Int 5) [,,,]]
,
[If Var "loops_destroyed" >= Val (Int 1) && "quiet1_direct" [,,,]]
,,,,,,,,,]}
,
{Label: quiet_2_menu
[,,,,,,,,,,,,
{Choice Branch: [Choice - (Explore) ''Everything you ...If Var "mound_pretention_explore" == Val (Bool False) && Var "quiet_2_count" > Val (Int 0) []
[
Jump to mound_2_straight_answer
],Choice - plore) ''Are you the same b...If Var "quiet_2_same" == Val (Bool False) []
[
Assign "quiet_2_same" = Val (Bool True)
,
Assign "quiet_2_count" += Val (Int 1)
,,,,,,
Jump to quiet_2_menu
],Choice - plore) ''What does it feel ...If Var "quiet_2_how_feel" == Val (Bool False) []
[
Assign "quiet_2_how_feel" = Val (Bool True)
,
Assign "quiet_2_count" += Val (Int 1)
,,,,,,,,,,,,,,
Jump to quiet_2_menu
],Choice - plore) ''When this is all d...If Var "quiet_2_want" == Val (Bool False) []
[
Assign "quiet_2_want" = Val (Bool True)
,
Assign "quiet_2_count" += Val (Int 1)
,,,,,,,,,
[If Var "princess_satisfy" >= Var "princess_deny" [,,,]]
,
[Else [,,,]]
,,
Jump to quiet_2_menu
],Choice - plore) ''You know that at t...If Var "quiet_2_threaten" == Val (Bool False) []
[
Assign "quiet_threaten_count" += Val (Int 1)
,
Assign "quiet_2_threaten" = Val (Bool True)
,
Assign "quiet_2_count" += Val (Int 1)
,,,,,,,
Jump to quiet_2_menu
],Choice - plore) ''When I go back, it...If Var "quiet_2_restrictions" == Val (Bool False) []
[
Assign "quiet_2_restrictions" = Val (Bool True)
,
Assign "quiet_2_count" += Val (Int 1)
,,,,,,
Jump to quiet_2_menu
],Choice - plore) ''You have been kind...If Var "quiet_2_nice" == Val (Bool False) []
[
Jump to mound_2_nice_join
],Choice - plore) ''You have been kind...If Var "quiet_2_nice" == Val (Bool False) []
[
{Label: mound_2_nice_join
[
Assign "quiet_2_count" += Val (Int 1)
,
Assign "quiet_2_nice" = Val (Bool True)
,,,,,,
Jump to quiet_2_menu
]}
],Choice - plore) ''What do you want m...If Var "quiet_2_requests" == Val (Bool False) []
[
Assign "quiet_2_requests" = Val (Bool True)
,
Assign "quiet_2_count" += Val (Int 1)
,,,,,
[If Var "princess_satisfy" > Var "princess_deny" [,,,,]]
,
[Else [,,,,]]
,
Jump to quiet_2_menu
],Choice - plore) ''Do you have any th...If Var "quiet_2_vessel_thoughts" == Val (Bool False) []
[
Assign "quiet_2_vessel_thoughts" = Val (Bool True)
,
Jump to quiet_vessels
],Choice - plore) ''So you don't have ...If "quiet_2_requests" && Var "quiet_2_requests_follow" == Val (Bool False) []
[
Assign "quiet_2_requests_follow" = Val (Bool True)
,
Assign "quiet_2_count" += Val (Int 1)
,,,,,,
Jump to quiet_2_menu
],Choice - plore) ''I don't want to hu...If Var "quiet_2_her_feelings" == Val (Bool False) []
[
Assign "quiet_2_her_feelings" = Val (Bool True)
,
Jump to quiet_2_feelings_join
],Choice - plore) ''What do you feel a...If Var "quiet_2_her_feelings" == Val (Bool False) []
[
Assign "quiet_2_her_feelings" = Val (Bool True)
,
{Label: quiet_2_feelings_join
[
Assign "quiet_2_count" += Val (Int 1)
,
[If Var "princess_satisfy" > Var "princess_deny" [
[If Var "princess_kept" > Var "princess_free" [,,,]]
,
[Else [,,,]]
]]
,
[Elif Var "princess_deny" > Var "princess_satisfy" [,,,]]
,
[Else [,,,]]
,,,,,
[If Var "princess_satisfy" >= Var "princess_deny" [,,,]]
,
[Else [,,,]]
,,
Jump to quiet_2_menu
]}
],Choice - plore) ''How many more vess...If Var "quiet_2_how_many" == Val (Bool False) []
[
Assign "quiet_2_how_many" = Val (Bool True)
,
Assign "quiet_2_count" += Val (Int 1)
,
[If Var "princess_satisfy" > Var "princess_deny" [,,,,,,,,]]
,
[Else [,,,,
[If Var "princess_kept" > Var "princess_free" [,,,,]]
,
[Else [,,,,]]
]]
,
Jump to quiet_2_menu
],Choice - plore) ''And what if I don'...If Var "quiet1_refuse_explore" == Val (Bool False) []
[
Assign "quiet1_refuse_explore" = Val (Bool True)
,
Assign "quiet_2_count" += Val (Int 1)
,,,,,,
{Choice Branch: [Choice - aIf Var "quiet2_stay_forever_attempt" == Val (Bool False) []
[,
Assign "quiet2_stay_forever_attempt" = Val (Bool True)
,,,,,,
{Choice Branch: [Choice - ait forev
[
Assign "quiet2_stay_forever_attempt" = Val (Bool True)
,,,,,,,,,
Jump to wait_forever_join
],Choice - ou have no need to wa
[
Jump to quiet_2_menu
]]}
],Choice - ou have no need to wa
[
Jump to quiet_2_menu
]]}
],Choice - (Explore) ''Enough with all...If Var "mound_pretention_explore" == Val (Bool False) && Var "quiet_2_count" > Val (Int 0) []
[
{Label: mound_2_straight_answer
[
Assign "mound_pretention_explore" = Val (Bool True)
,,,,,
Jump to quiet_2_menu
]}
],Choice - 'm ready to go bac
[
[If Var "princess_satisfy" > Var "princess_deny" [,,,]]
,
[Else [,,,]]
,,,,,,,,,,,,,,,,,,
Jump to restart_start
],Choice - Attack the entiIf Var "quiet_attack" == Val (Bool False) []
[
Assign "quiet2_mound_attacked" = Val (Bool True)
,
Assign "quiet_attack" = Val (Bool True)
,,,,,,,,
Jump to quiet_2_menu
],Choice - Destroy your boIf Var "quiet_suicide_attempt" == Val (Bool False) []
[
Assign "quiet_suicide_attempt" = Val (Bool True)
,
Assign "quiet2_suicide" = Val (Bool True)
,,,,,,,,,
Jump to quiet_2_menu
]]}
]}
,
{Label: quiet_3_start
[,,,,,,,,]}
,
{Label: quiet_3_menu
[,,,,,,,,,,,
{Choice Branch: [Choice - (Explore) ''Everything you ...If Var "mound_pretention_explore" == Val (Bool False) && Var "quiet_3_count" > Val (Int 0) []
[
{Label: mound_3_straight_answer
[
Assign "mound_pretention_explore" = Val (Bool True)
,,,,,
Jump to quiet_3_menu
]}
],Choice - plore) ''You can't be a con...If Var "quiet_3_no_contradictions" == Val (Bool False) []
[
Assign "quiet_3_no_contradictions" = Val (Bool True)
,
Assign "quiet_3_count" += Val (Int 1)
,,,,,,,,,,
Jump to quiet_3_menu
],Choice - plore) ''How can you stand ...If Var "quiet_3_how_contradiction" == Val (Bool False) []
[
Assign "quiet_3_how_contradiction" = Val (Bool True)
,
Assign "quiet_3_count" += Val (Int 1)
,,,,,,
Jump to quiet_3_menu
],Choice - plore) ''It doesn't matter ...If Var "quiet_3_go_back_worse" == Val (Bool False) []
[
Assign "quiet_3_count" += Val (Int 1)
,
Assign "quiet_3_go_back_worse" = Val (Bool True)
,,,,,,
{Choice Branch: [Choice - f anything, it makes me lik...
[,,,,],Choice - o, not really. It all seems...
[,,,,],Choice -  have no opinion one way or...
[,,,,],Choice -  just want it all to sto
[,,,,],Choice - es. You're torturing me, an...
[
[If Var "princess_satisfy" >= Var "princess_deny" [,,,]]
,
[Else [,,,]]
,,,,,],Choice - emain sile
[
[If Var "princess_satisfy" >= Var "princess_deny" [,,,]]
,
[Else [,,,]]
,,,,,]]}
,
Jump to quiet_3_menu
],Choice - plore) ''What do you think ...If Var "quiet_3_vessel_thoughts" == Val (Bool False) []
[
Assign "quiet_3_count" += Val (Int 1)
,
Assign "quiet_3_vessel_thoughts" = Val (Bool True)
,
Jump to quiet_vessels
],Choice - (Explore) ''Enough with all...If Var "mound_pretention_explore" == Val (Bool False) && Var "quiet_3_count" > Val (Int 0) []
[
Jump to mound_3_straight_answer
],Choice - plore) ''I'm still planning...If Var "quiet_3_threaten" == Val (Bool False) && "quiet_2_threaten" []
[
Assign "quiet_3_count" += Val (Int 1)
,
Jump to quiet_3_threaten_join
],Choice - plore) ''You know that at t...If Var "quiet_3_threaten" == Val (Bool False) && Var "quiet_2_threaten" == Val (Bool False) []
[
{Label: quiet_3_threaten_join
[
Assign "quiet_3_count" += Val (Int 1)
,
Assign "quiet_threaten_count" += Val (Int 1)
,
Assign "quiet_3_threaten" = Val (Bool True)
,
[If Var "princess_satisfy" >= Var "princess_deny" [,,,,]]
,
[Else [,,,,]]
,
Jump to quiet_3_menu
]}
],Choice - plore) ''Do you know what h...If Var "quiet_3_worlds_behind" == Val (Bool False) []
[
Assign "quiet_3_worlds_behind" = Val (Bool True)
,
Assign "quiet_3_count" += Val (Int 1)
,,,,,,,,,,
Jump to quiet_3_menu
],Choice - plore) ''Have you figured o...If Var "quiet_3_desires" == Val (Bool False) && "quiet_2_want" []
[
Assign "quiet_3_desires" = Val (Bool True)
,
Assign "quiet_3_count" += Val (Int 1)
,,,,,
[If Var "princess_satisfy" >= Var "princess_deny" [,,,,]]
,
[Else [,,,,]]
,
Jump to quiet_3_menu
],Choice - plore) ''Do you still not c...If Var "quiet_3_vessel_want" == Val (Bool False) && "quiet_2_requests" []
[
Assign "quiet_3_vessel_want" = Val (Bool True)
,
Assign "quiet_3_count" += Val (Int 1)
,
[If Var "princess_satisfy" >= Var "princess_deny" [,,,,]]
,
[Else [,,,,]]
,
Jump to quiet_3_menu
],Choice - plore) ''What do you want m...If Var "quiet_3_vessel_want" == Val (Bool False) && Var "quiet_2_requests" == Val (Bool False) []
[
Assign "quiet_3_vessel_want" = Val (Bool True)
,
Assign "quiet_3_count" += Val (Int 1)
,,,,,
[If Var "princess_satisfy" > Var "princess_deny" [,,,]]
,
[Else [,,,]]
,,
Jump to quiet_3_menu
],Choice - plore) ''So you don't have ...If "quiet_3_vessel_want" && Var "quiet_3_no_preferences" == Val (Bool False) []
[
Assign "quiet_3_no_preferences" = Val (Bool True)
,
Assign "quiet_3_count" += Val (Int 1)
,,,,,
[If Var "princess_satisfy" >= Var "princess_deny" [,,,]]
,
[Else [,,,]]
,,
Jump to quiet_3_menu
],Choice - plore) ''How many more vess...If Var "quiet_3_how_many" == Val (Bool False) []
[
Assign "quiet_3_how_many" = Val (Bool True)
,
Assign "quiet_3_count" += Val (Int 1)
,,,,,,
Jump to quiet_3_menu
],Choice - plore) ''I don't want to go...If Var "quiet1_refuse_explore" == Val (Bool False) []
[
Assign "quiet1_refuse_explore" = Val (Bool True)
,
Assign "quiet_3_count" += Val (Int 1)
,,,,,,
{Choice Branch: [Choice - ontinue to wait. Forev
[
Assign "quiet2_stay_forever_attempt" = Val (Bool True)
,,,,,
Jump to wait_forever_join
],Choice - here is no waiting forev
[
Jump to quiet_3_menu
]]}
],Choice - 'm ready to go bac
[,,,,,,,,,,,,,,,,,
Jump to restart_start
],Choice - Attack the entiIf Var "quiet_attack" == Val (Bool False) []
[
Assign "quiet_attack" = Val (Bool True)
,,,,,
Jump to quiet_3_menu
],Choice - Destroy your boIf Var "quiet_suicide_attempt" == Val (Bool False) []
[
Assign "quiet_suicide_attempt" = Val (Bool True)
,,,,,,
Jump to quiet_3_menu
]]}
]}
,
{Label: quiet_4_start
[,
[If Var "princess_free" > Var "princess_kept" [
Assign "quiet_4_ask" = Val (Bool True)
,,,,,,,,,]]
,
[Else [,,,,]]
]}
,
{Label: quiet_4_menu
[,,,,,,,,,,,,
{Choice Branch: [Choice - (Explore) ''Everything you ...If Var "mound_pretention_explore" == Val (Bool False) && Var "quiet_4_count" > Val (Int 0) []
[
{Label: mound_4_straight_answer
[
Assign "mound_pretention_explore" = Val (Bool True)
,,,,,
Jump to quiet_4_menu
]}
],Choice - plore) ''Do you think there...If Var "quiet_4_ask" == Val (Bool False) && Var "quiet_4_outside_explain" == Val (Bool False) []
[
Assign "quiet_4_count" += Val (Int 1)
,
Assign "quiet_4_menu_count" += Val (Int 1)
,
Assign "quiet_4_outside_explain" = Val (Bool True)
,
[If Var "princess_satisfy" > Var "princess_deny" [,,,,]]
,
[Else [,,,,]]
,
Jump to quiet_4_menu
],Choice - plore) ''Is that a rhetoric...If "quiet_4_ask" && Var "quiet_4_rhetorical" == Val (Bool False) && Var "quiet_4_menu_count" == Val (Int 0) []
[
Assign "quiet_4_menu_count" += Val (Int 1)
,
Assign "quiet_4_count" += Val (Int 1)
,
Assign "quiet_4_rhetorical" = Val (Bool True)
,,,,,,,,,,
Jump to quiet_4_menu
],Choice - plore) ''There's trees, and...If "quiet_4_ask" && Var "quiet_4_outside_explain" == Val (Bool False) []
[
Assign "quiet_4_menu_count" += Val (Int 1)
,
Assign "quiet_4_count" += Val (Int 1)
,
Assign "quiet_4_outside_explain" = Val (Bool True)
,,,,,,
Jump to quiet_4_menu
],Choice - plore) ''Do you think that ...If Var "quiet_4_solipsism" == Val (Bool False) []
[
Assign "quiet_4_solipsism" = Val (Bool True)
,
Assign "quiet_4_menu_count" += Val (Int 1)
,
Assign "quiet_4_count" += Val (Int 1)
,,,,,,
Jump to quiet_4_menu
],Choice - plore) ''Do you have though...If Var "quiet_4_vessel_thoughts" == Val (Bool False) []
[
Assign "quiet_4_vessel_thoughts" = Val (Bool True)
,
Assign "quiet_4_menu_count" += Val (Int 1)
,
Assign "quiet_4_count" += Val (Int 1)
,
Jump to quiet_vessels
],Choice - plore) ''Do you know what's...If Var "quiet_4_awaken" == Val (Bool False) []
[
Assign "quiet_4_awaken" = Val (Bool True)
,
Assign "quiet_4_menu_count" += Val (Int 1)
,
Assign "quiet_4_count" += Val (Int 1)
,
[If Var "princess_satisfy" > Var "princess_deny" [,,,]]
,
[Else [,,,]]
,,
Jump to quiet_4_menu
],Choice - plore) ''When you send me b...If Var "quiet_4_narrator" == Val (Bool False) []
[
Assign "quiet_4_narrator" = Val (Bool True)
,
Assign "quiet_4_menu_count" += Val (Int 1)
,
Assign "quiet_4_count" += Val (Int 1)
,
[If "wild_fed" || "wraith_fed" || "spectre_fed" [,,,,]]
,
[Elif "quiet_4_ask" [,,,,]]
,
[Else [,,,,]]
,
{Choice Branch: [Choice - e does. I don't know why, b...
[,,,,],Choice - e does. I don't know what I...
[,,,,],Choice - e does. And when I find him...
[,,,,],Choice - e does. And when I find him...
[
[If "quiet_4_ask" [,,,,]]
,
[Else [,,,,]]
],Choice -  does. But you're going to ...
[,,,,]]}
,
Jump to quiet_4_menu
],Choice - plore) ''How many more vess...If Var "quiet_4_last_trip" == Val (Bool False) []
[
Assign "quiet_4_last_trip" = Val (Bool True)
,
Assign "quiet_4_menu_count" += Val (Int 1)
,
Assign "quiet_4_count" += Val (Int 1)
,,,,,,
Jump to quiet_4_menu
],Choice - plore) ''If this is the las...If "quiet_4_last_trip" && Var "quiet_4_requests" == Val (Bool False) []
[
Assign "quiet_4_count" += Val (Int 1)
,
Assign "quiet_4_menu_count" += Val (Int 1)
,
Assign "quiet_4_requests" = Val (Bool True)
,,,,,,
Jump to quiet_4_menu
],Choice - plore) ''You know we're goi...If "quiet_4_last_trip" && Var "quiet_4_threaten" == Val (Bool False) && Var "quiet_threaten_count" >= Val (Int 1) []
[
Assign "quiet_4_count" += Val (Int 1)
,
Assign "quiet_4_threaten" = Val (Bool True)
,
Assign "quiet_4_menu_count" += Val (Int 1)
,
Assign "quiet_threaten_count" = Val (Bool True)
,
[If Var "princess_satisfy" >= Var "princess_deny" [,,,,,,,,]]
,
[Else [,,,,,,,,]]
,
Jump to quiet_4_menu
],Choice - plore) ''If this is the las...If "quiet1_refuse_explore" && Var "quiet_4_refuse" == Val (Bool False) && "quiet_4_last_trip" []
[
Assign "quiet_4_count" += Val (Int 1)
,
Assign "quiet_4_refuse" = Val (Bool True)
,
Assign "quiet_4_menu_count" += Val (Int 1)
,,,,,,
{Choice Branch: [Choice - a
[,,,,,
Jump to wait_forever_join
],Choice - here is no waiting forev
[
Jump to quiet_4_menu
]]}
,
Jump to quiet_4_menu
],Choice - plore) ''If this is the las...If Var "quiet_4_refuse" == Val (Bool False) && Var "quiet1_refuse_explore" == Val (Bool False) []
[
Assign "quiet_4_count" += Val (Int 1)
,
Assign "quiet_4_menu_count" += Val (Int 1)
,
Assign "quiet_4_refuse" = Val (Bool True)
,
{Label: quiet_4_wait_join
[,,,,,
{Choice Branch: [Choice - ait forev
[,,,,,
Jump to wait_forever_join
],Choice - here is no waiting forev
[
Jump to quiet_4_menu
]]}
,
Jump to quiet_4_menu
]}
],Choice - 'm ready to go bac
[,,,,,,,,,,,,,,,,,,,,
Jump to restart_start
],Choice - Attack the entiIf Var "quiet_attack" == Val (Bool False) []
[
Assign "quiet_attack" = Val (Bool True)
,,,,,,,,
Jump to quiet_4_menu
],Choice - Destroy your boIf Var "quiet_suicide_attempt" == Val (Bool False) []
[
Assign "quiet_suicide_attempt" = Val (Bool True)
,,,,,,,,,
Jump to quiet_4_menu
]]}
]}
,
{Label: quiet_staging
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,]}
,
{Label: felina_godkiller_ending
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Offer her your hand.]
[,,,,,
Assign "final_offer" = Val (Bool True)
,,,,,,,,,,,,
Jump to felina_intermission_late_join
],Choice - [[Destroy her.]
[,,,,,,,,,,,,,,,,,,,,,
[If "mirror_construct_follow_up" []]
,
[Else []]
,,,,,,,,,,,,,,,,,,,,,
Assign "final_ending" = Val (String "annihilation")
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,
Jump to credits
]]}
]}
,
{Label: apotheosis_start_contrarian
[,
Assign "trait_contrarian" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to apotheosis_explore_menu
]}
,
{Label: contrarian_pristine_apoth_menu
[,
{Choice Branch: [Choice - (Explore) Hey, funny one, d...If Var "contrarian_pristine_apoth_menu_explore" == Val (Bool False) []
[
Assign "contrarian_pristine_apoth_menu_explore" = Val (Bool True)
,
[If "apotheosis_run" [,]]
,
[Else [,]]
,,,
[If "apotheosis_run" [,]]
,
[Else [,]]
,,,
Jump to contrarian_pristine_apoth_menu
],Choice - [[Take the blade.]
[,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "thumb")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Charge into oblivion.]
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,]]}
,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Carve into her divine hea...
[,,,,,,,,,,,,]]}
,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,
{Choice Branch: [Choice - [[Hurl the blade at her eye.]
[,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,,
Assign "trait_broken" = Val (Bool False)
,
Assign "trait_contrarian" = Val (Bool False)
,
Assign "apotheosis_end" = Val (String "defy")
,
Assign "princess_deny" += Val (Int 1)
,
Assign "princess_kept" += Val (Int 1)
,
{Choice Branch: [Choice - [[Approach the mirror.]
[,,,,,
{Choice Branch: [Choice - [[Gaze into your reflection.]
[
Jump to mirror_n_gaze_join
]]}
]]}
],Choice - [[Embrace your new goddess.]
[,
Assign "apotheosis_contrarian_late_join" = Val (Bool True)
,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,
Jump to apotheosis_contrarian_freedom_join
]]}
],Choice - [[Embrace your new goddess.]
[
{Label: apotheosis_pristine_freedom
[
[If "trait_contrarian" [,,,,,]]
,
[Else [,,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: apotheosis_contrarian_freedom_join
[,,
[If "apotheosis_contrarian_late_join" [,,]]
,
[Else [,,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "trait_contrarian" [,,,,,]]
,
[Else [,,,]]
,,,
[If "trait_paranoid" [,]]
,,,,,
[If "trait_paranoid" [,]]
,
{Label: apotheosis_freedom_second_join
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Scream in unintelligible ...
[
Jump to apotheosis_freedom_suffer_join
],Choice - ''YOU HAVE TO STOP THIS, I ...
[
{Label: apotheosis_freedom_suffer_join
[,,,,
[If "trait_contrarian" [,]]
,
[Else [,,,]]
,
Assign "default_mouse" = Val (String "eye")
,,,,,,,,,,
[If "trait_contrarian" [,,,]]
,
[Else [,]]
,
{Choice Branch: [Choice - [[Make her suffer with you.]
[
[If "trait_paranoid" [,]]
,
{Label: apotheosis_tendrils_shared_join
[,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
[If "trait_contrarian" [,]]
,
[Else [,]]
,,,,,
[If "trait_contrarian" [,]]
,,,,,,,,,,,,,,
[If "trait_contrarian" [,,,]]
,
[Else [,,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,,
Assign "apotheosis_end" = Val (String "prison")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_deny" += Val (Int 1)
,
Jump to mirror_start
]}
],Choice - [[Suffer in the darkness al...
[
{Label: apotheosis_alone_final_join
[,,,,,,,,,,
Assign "default_mouse" = Val (String "default")
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,
[If "trait_contrarian" [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,
[If "trait_contrarian" [,]]
,
[Else [,]]
,,,,,,,,,,,
[If "trait_contrarian" [,,,]]
,
[Else [,,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "trait_contrarian" [,,,]]
,
[Else [,,,]]
,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,,
Assign "apotheosis_end" = Val (String "fly")
,
Assign "princess_free" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 1)
,
Jump to mirror_start_2
]}
]]}
]}
],Choice - ''YOU'RE HURTING ME!''
[
Jump to apotheosis_freedom_suffer_join
],Choice - [[Suffer in silence.]
[
Jump to apotheosis_freedom_suffer_join
]]}
]}
]}
]}
],Choice - [[Flee.]If "contrarian_pristine_apoth_menu_explore" []
[,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Embrace your new goddess.]
[
Assign "apotheosis_contrarian_late_join" = Val (Bool True)
,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,
Jump to apotheosis_contrarian_freedom_join
]]}
]]}
]}
,
{Label: paranoid_pristine_apoth_menu
[
{Choice Branch: [Choice - [[Take the blade.]
[,,,,,,,,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,
{Choice Branch: [Choice - [[Embrace your destiny.]
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Assail the unassailable.]
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "persistent.flickering" [,,,,]]
,
[Else [,,,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "persistent.flickering" [,,,,,,,]]
,
[Else [,,,,,,,]]
,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Still your doubts.]
[
Assign "default_mouse" = Val (String "sword")
,,,,,
[If "persistent.flickering" [,,,,]]
,
[Else [,,,,]]
,,,,,,,,,,,,,,,,
[If "persistent.flickering" [,,,,,,]]
,
[Else [,,,,,,]]
,,,,,,,,,,,
{Choice Branch: [Choice - (Explore) Then what do we d...
[
Assign "default_mouse" = Val (String "blade")
,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,],Choice - No! We just have to push ha...
[
Assign "paranoid_apotheosis_fight_back" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "default_mouse" = Val (String "default")
,
Assign "blade_held" = Val (Bool False)
,,,,,,,,,,,,,,,]]}
,,,,,,,,,,,,,,,,,,,,,,
Assign "default_mouse" = Val (String "eye")
,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Fight back.]
[,,,,,,
[If Var "paranoid_apotheosis_fight_back" == Val (Bool False) [
Jump to apotheosis_tendrils_shared_join
]]
,
[Else [,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,,
Assign "trait_broken" = Val (Bool False)
,
Assign "trait_paranoid" = Val (Bool False)
,
Assign "apotheosis_end" = Val (String "unraveled")
,
Assign "princess_deny" += Val (Int 1)
,
Assign "princess_kept" += Val (Int 1)
,
{Choice Branch: [Choice - [[Approach the mirror.]
[,,,,,
{Choice Branch: [Choice - [[Gaze into your reflection.]
[
Jump to mirror_n_gaze_join
]]}
]]}
]]
],Choice - [[Submit.]
[,,
Jump to apotheosis_alone_final_join
]]}
]]}
]]}
]]}
],Choice - [[Embrace your new goddess.]
[
Jump to apotheosis_pristine_freedom
]]}
]}
,
{Label: den_pristine_fight
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Take the opening and stri...
[
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,,
Assign "beast_2_end" = Val (String "slay")
,
Assign "princess_deny" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 1)
,
Jump to mirror_start
],Choice - [[Embrace instinct.]
[
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,,
Assign "current_princess" = Val (String "den")
,
Assign "beast_2_end" = Val (String "consume")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_deny" += Val (Int 1)
,
Jump to mirror_start
]]}
]}
,
{Label: den_pristine_free
[,,,,,,,,
[If "blade_held" [,,,]]
,
[Else [,,,]]
]}
,
{Label: den_pristine_free_choice
[,
{Choice Branch: [Choice - [[Drop the blade and approa...If "blade_held" []
[
Assign "blade_held" = Val (Bool False)
,
Assign "den_late_blade_dropped" = Val (Bool True)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,
Jump to den_approach_join
],Choice - [[Approach her, blade held ...If "blade_held" []
[
Jump to den_approach_join
],Choice - [[Approach her.]If Var "blade_held" == Val (Bool False) []
[,,,,
{Label: den_approach_join
[,,,,,,,,,,
[If "blade_held" [,]]
,
{Choice Branch: [Choice - [[Strike her heart.]If "blade_held" []
[,,,,,,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,,
Assign "beast_2_end" = Val (String "slay")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 1)
,
Jump to mirror_start
],Choice - [[Offer her your hand.]
[
[If "blade_held" [,,,,,,,,,,,,,,,,,,,
Jump to den_flinch_end_join
]]
,
[Else [,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Pull her free.]
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Dig through the earth tog...
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,]]}
,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Claw your way to freedom.]
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Open the door and step in...
[
Assign "quick_menu" = Val (Bool False)
]]}
]]}
,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,,
Assign "beast_2_end" = Val (String "free_succeed")
,
Assign "princess_free" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 1)
,
Jump to mirror_start
]]}
]]
],Choice - [[Flinch.]
[,
Assign "den_end_flinch" = Val (Bool True)
,,,,,,,,,,,
[If "blade_held" [,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,]]
,
{Label: den_flinch_end_join
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "beast_2_end" = Val (String "free_fail")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 1)
,
Jump to mirror_start
]}
]]}
]}
],Choice - [[Turn back for the blade.]If Var "blade_held" == Val (Bool False) []
[
Jump to den_collapse_join
],Choice - [[Turn around and leave. Yo...If "blade_held" []
[
{Label: den_collapse_join
[,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,
[If "blade_held" []]
,
[Else []]
,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,
[If "blade_held" []]
,
[Else []]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: den_collapse_final_menu
[,,,
{Choice Branch: [Choice - (Explore) I still have the ...If "blade_held" && Var "den_collapse_stuck_explore" == Val (Bool False) []
[
Assign "den_collapse_stuck_explore" = Val (Bool True)
,,,,,,,
{Label: den_collapse_circles
[,,,,
Jump to den_collapse_final_menu
]}
],Choice - (Explore) So we're dying do...If Var "den_collapse_die_explore" == Val (Bool False) && "den_collapse_stuck_explore" && "den_collapse_struggle" []
[
Assign "den_collapse_die_explore" = Val (Bool True)
,,,,,,,,,,,,,,,,,
Jump to den_collapse_final_menu
],Choice - (Explore) Come on, you have...If Var "den_collapse_stuck_explore" == Val (Bool False) []
[
Assign "den_collapse_stuck_explore" = Val (Bool True)
,,,
Jump to den_collapse_circles
],Choice - (Explore) [[Struggle to fre...If Var "den_collapse_struggle" == Val (Bool False) []
[
Assign "den_collapse_struggle" = Val (Bool True)
,,,,,,,
Jump to den_collapse_final_menu
],Choice - ''We can't both be stuck he...
[,,,,,,
Jump to den_collapse_final
],Choice - ''This is both of our fault...
[
{Label: den_collapse_okay
[,,,,
Jump to den_collapse_final
]}
],Choice - ''This is my fault. I shoul...
[
Jump to den_collapse_okay
],Choice - ''Yes. This is your fault.''
[,,,,
Jump to den_collapse_final
],Choice - ''This isn't anybody's faul...
[
Jump to den_collapse_okay
],Choice - ''I know whose fault this i...
[
[If "blade_held" [,]]
,
[Else [,]]
,,,
Jump to den_collapse_final
],Choice - [[Wait in silence for your ...
[,,,,
{Label: den_collapse_final
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,,
Assign "beast_2_end" = Val (String "starve")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_deny" += Val (Int 1)
,
Jump to mirror_start
]}
]]}
]}
]}
]]}
]}
,
{Label: fury_mirror_special
[
[If "trait_cold" [,]]
,
[Else [,]]
,
{Choice Branch: [Choice - [[Approach the mirror.]
[,,,,,
{Choice Branch: [Choice - [[Gaze into your reflection.]
[
Jump to mirror_n_gaze_join
]]}
]]}
]}
,
{Label: fury_pristine
[,,,,,,,,,,,,,
[If Var "fury_source" == Val (String "pacifism") [
Jump to fury_pristine_pacifism_start
]]
,
[Elif Var "fury_source" == Val (String "tower") [
Jump to fury_pristine_tower
]]
,
[Elif Var "fury_source" == Val (String "unarmed") [
Jump to fury_pristine_unarmed
]]
,
[Else [
Jump to fury_pristine_other_start
]]
]}
,
{Label: fury_pristine_pacifism_start
[,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to fury_pristine_unwind_pre_menu
]}
,
{Label: fury_pristine_other_start
[,,,,,,,,,,,,,,,,,,,,,,
Jump to fury_pristine_unwind_pre_menu
]}
,
{Label: fury_pristine_unwind_pre_menu
[
{Choice Branch: [Choice - ''And what am I supposed to...
[
{Label: fury_pristine_other_talk_join
[,
Assign "pristine_fury_talk_attempt" = Val (Bool True)
,,,,,,,,,,,,,,,,
[If Var "fury_source" == Val (String "unarmed") [,,,,,,,,
Jump to fury_pristine_unarmed_menu
]]
]}
],Choice - ''You're a monster.''
[
Jump to fury_pristine_other_talk_join
],Choice - ''Please, just talk to me! ...
[
Jump to fury_pristine_other_talk_join
],Choice - ''You won't win.''
[
Jump to fury_pristine_other_talk_join
],Choice - [[Attempt to die.]
[
[If "trait_broken" [,]]
,,,,,,,,,
[If "trait_broken" [,]]
,,,,,,,,],Choice - [[Say nothing.]
[,,,]]}
,,,,,,,,,,,,,,,,,,,,
Jump to fury_unwind_sequence
]}
,
{Label: fury_unwind_sequence
[,,,,,,,,,,,,,,,,,,,
[If "trait_cold" [,,,]]
,
[Else [,,,]]
,,,,,,,,,
[If "trait_cold" [,]]
,
[Elif "trait_contrarian" [,]]
,
[Elif "trait_broken" && Var "fury_source" == Val (String "tower") [,]]
,
[Elif "trait_broken" [,]]
,,,,,,,,,,,,,
[If "trait_cold" [,]]
,
[Elif "trait_broken" [,]]
,
[Elif "trait_contrarian" [,]]
,,,,,,,,,,,,,
[If "trait_cold" [,,,]]
,
[Elif "trait_contrarian" [,]]
,
[Elif "trait_broken" [,,,]]
,,,,,,,,,,,,,,,,
[If "trait_cold" [,]]
,
[Elif "trait_contrarian" [
Assign "trait_contrarian" = Val (Bool False)
,,]]
,
[Elif "trait_broken" [,]]
,,,,,,,,,,,,,,,,
[If "trait_cold" [,]]
,
[Elif "trait_broken" && Var "fury_source" == Val (String "tower") [,]]
,
[Elif "trait_broken" [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "trait_cold" [,,,,,,,,,,,,,,]]
,
[Elif "trait_broken" [,,,,,,,,,,,,,,]]
,
[Else [,,,,,,,,,,,,]]
,,,
[If "trait_broken" && Var "fury_source" == Val (String "tower") [
Assign "trait_broken" = Val (Bool False)
,,]]
,,,,,,,,,,,,,,,,,,,,,
[If "trait_broken" && Var "fury_source" != Val (String "tower") [,,,,,]]
,
[Else [,,,]]
,
[If "trait_cold" [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "trait_stubborn" = Val (Bool False)
,,
[If "trait_cold" || "trait_broken" && Var "fury_source" != Val (String "tower") [,,,,,
[If "trait_cold" [,]]
,
[Else [,]]
,,,,,,,,,,,,,,
[If "trait_cold" [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to fury_cold_conclusion
]]
,
[Else [,,,,,,,,,,,,
Jump to fury_other_conclusion
]]
]}
,
{Label: fury_cold_conclusion
[,,,,,,,,,,,
[If "trait_cold" [,,,]]
,
[Else [,,,]]
,,,
{Label: fury_cold_conclusion_menu
[,,,,
{Choice Branch: [Choice - (Explore) ''I'm not gone. I...If Var "fury_cold_conclusion_explore" == Val (Bool False) []
[
Assign "fury_cold_conclusion_explore" = Val (Bool True)
,,,,,,
{Choice Branch: [Choice - ''All I did was stop the vi...
[,,,,
Jump to fury_cold_leave_final_option
],Choice - ''At some point you have to...
[,,,,
Jump to fury_cold_conclusion_menu
],Choice - [[Say nothing.]
[
Jump to fury_cold_conclusion_menu
]]}
],Choice - (Explore) ''I never stopped...If Var "fury_cold_conclusion_explore" == Val (Bool False) && Var "fury_cold_conclusion_final_nice_seen" == Val (Bool False) []
[
Assign "fury_cold_conclusion_explore" = Val (Bool True)
,,,,,
Jump to fury_cold_final_nice_menu
],Choice - (Explore) ''There's more to...If Var "fury_cold_conclusion_final_nice_seen" == Val (Bool False) []
[,,,,,
{Label: fury_cold_final_nice_menu
[
Assign "fury_cold_conclusion_final_nice_seen" = Val (Bool True)
,
{Choice Branch: [Choice - ''You could always leave wi...
[,,,,
Jump to fury_cold_leave_final_option
],Choice - ''That's up to you.''
[,,,,
Jump to fury_cold_conclusion_menu
],Choice - [[Say nothing.]
[
Jump to fury_cold_conclusion_menu
]]}
]}
],Choice - (Explore) ''I didn't like f...If Var "fury_cold_conclusion_final_nice_seen" == Val (Bool False) []
[
Assign "fury_cold_conclusion_final_nice_seen" = Val (Bool True)
,,,,,,
Jump to fury_cold_final_nice_menu
],Choice - (Explore) ''What were you h...If Var "fury_cold_conclusion_goal_explore" == Val (Bool False) []
[
Assign "fury_cold_conclusion_goal_explore" = Val (Bool True)
,,,,,,
Jump to fury_cold_conclusion_menu
],Choice - (Explore) ''You seem so... ...If Var "fury_cold_conclusion_different_explore" == Val (Bool False) []
[
Assign "fury_cold_conclusion_different_explore" = Val (Bool True)
,,,,,
Jump to fury_cold_conclusion_menu
],Choice - (Explore) ''That was awful....If Var "fury_cold_conclusion_explore" == Val (Bool False) []
[
Assign "fury_cold_conclusion_explore" = Val (Bool True)
,,,,,,
Jump to fury_cold_conclusion_menu
],Choice - (Explore) ''So that's all y...If Var "fury_cold_conclusion_explore" == Val (Bool False) []
[
Assign "fury_cold_conclusion_explore" = Val (Bool True)
,,,,,,
Jump to fury_cold_conclusion_menu
],Choice - ''I think I'm going to go n...
[,,,,,
{Choice Branch: [Choice - ''Yes.''
[,,,,
Jump to fury_cold_leave_join
],Choice - ''If you'll let me.''
[,,,,
Jump to fury_cold_leave_join
],Choice - ''I was hoping you'd come w...
[,,,,,
Jump to fury_cold_leave_final_option
],Choice - ''That's up to you.''
[,,,,,
{Label: fury_cold_leave_final_option
[
{Choice Branch: [Choice - [[Give her your hand.]
[,,,,,,,,,,,,,,,,,,,,,,,,,
[If "trait_cold" [,,,,,]]
,
[Else [,]]
,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
[If "trait_cold" [,]]
,
[Else [,]]
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
[If "trait_cold" [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,,,,,,
[If "trait_cold" [,,,]]
,
[Else [,,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,,
Assign "fury_end" = Val (String "free")
,
Assign "princess_free" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 1)
,
Assign "trait_stubborn" = Val (Bool False)
,
Jump to fury_mirror_special
],Choice - ''No. I just wanted to hurt...
[,,,,
Jump to fury_cold_leave_join
],Choice - ''No. And I don't know why ...
[,,,,
Jump to fury_cold_leave_join
]]}
]}
],Choice - ''I'm going to leave now. I...
[,,,,,
Jump to fury_cold_leave_final_option
],Choice - [[Turn and leave.]
[
{Label: fury_cold_leave_join
[,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,
[If "trait_cold" [,]]
,
[Else [,]]
,,,
[If "trait_cold" [,]]
,
[Else [,]]
,,,,,,,,,
[If "trait_cold" [,,,]]
,
[Else [,,,]]
,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "fury_end" = Val (String "leave")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_deny" += Val (Int 1)
,
Assign "trait_stubborn" = Val (Bool False)
,
Jump to fury_mirror_special
]}
]]}
],Choice - [[Turn and leave.]
[
Jump to fury_cold_leave_join
],Choice - [[Slay the Princess.]If "fury_blade_taken" []
[,,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,,,,,,,,,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,,,,
[If "trait_cold" [,,,,]]
,
[Else [,,,,]]
,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,,
Assign "fury_end" = Val (String "slay")
,
Assign "princess_deny" += Val (Int 2)
,
Assign "princess_kept" += Val (Int 1)
,
Assign "trait_stubborn" = Val (Bool False)
,
Jump to fury_mirror_special
]]}
]}
]}
,
{Label: fury_other_conclusion
[,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
[If Var "fury_source" == Val (String "tower") [,,,,,,,]]
,
[Else [,,,]]
,
Assign "config.menu_include_disabled" = Val (Bool True)
,
{Choice Branch: [Choice - ''Why did you keep me alive?''If "tower_false_choice" []
[
Assign "config.menu_include_disabled" = Val (Bool False)
],Choice - ''I've been here so long.''If "tower_false_choice" []
[
Assign "config.menu_include_disabled" = Val (Bool False)
],Choice - ''Everyone is gone.''If "tower_false_choice" []
[
Assign "config.menu_include_disabled" = Val (Bool False)
],Choice - ''There's no one else here.''If "tower_false_choice" []
[
Assign "config.menu_include_disabled" = Val (Bool False)
],Choice - ''I can't feel anything any...If "tower_false_choice" []
[
Assign "config.menu_include_disabled" = Val (Bool False)
],Choice - ''But still, I'm here. Watc...If "tower_false_choice" []
[
Assign "config.menu_include_disabled" = Val (Bool False)
],Choice - [[There is nothing for you ...
[
Assign "config.menu_include_disabled" = Val (Bool False)
]]}
,
[If Var "fury_source" == Val (String "tower") [,,,]]
,
[Else [,,,,,,,,,]]
,,,,,
[If Var "fury_source" == Val (String "tower") [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,
[If Var "fury_source" == Val (String "tower") [,,,,,,,,,,,,,,,,,,,]]
,
[Else [,,,,,,,,,,,,,,,,,]]
,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,
Assign "fury_end" = Val (String "heart")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 1)
,
Assign "current_princess" = Val (String "furyheart")
,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
{Choice Branch: [Choice - [[Approach the mirror.]
[,,,,,
{Choice Branch: [Choice - [[Gaze into your reflection.]
[
Jump to mirror_sort
]]}
]]}
]}
,
{Label: fury_pristine_unarmed
[,,,,,,,,,,,,,,,,,,
{Label: fury_pristine_unarmed_menu
[
{Choice Branch: [Choice - (Explore) ''Numb?! You ripp...If Var "pristine_fury_talk_attempt" == Val (Bool False) []
[
Jump to fury_pristine_other_talk_join
],Choice - (Explore) ''If you want a c...If Var "pristine_fury_talk_attempt" == Val (Bool False) []
[
Jump to fury_pristine_other_talk_join
],Choice - (Explore) ''Do you think th...If Var "pristine_fury_talk_attempt" == Val (Bool False) []
[
Jump to fury_pristine_other_talk_join
],Choice - (Explore) ''What happened t...If Var "pristine_fury_talk_attempt" == Val (Bool False) []
[
Jump to fury_pristine_other_talk_join
],Choice - [[Give up.]
[,,,,,,,,,,,,,,,,
Jump to fury_unwind_sequence
],Choice - [[Ignore her and push forwa...
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - (Explore) Guys, I'm not sur...
[
Jump to fury_unarmed_give_up_1
],Choice - [[Give up.]
[
{Label: fury_unarmed_give_up_1
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to fury_unwind_sequence
]}
],Choice - [[Take another step.]
[,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - (Explore) 'Mr. Anatomy' has...
[
Jump to fury_unarmed_give_up_2
],Choice - [[You don't have any muscle...
[
{Label: fury_unarmed_give_up_2
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to fury_unwind_sequence
]}
],Choice - [[Take another step.]
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - (Explore) This is too much....
[
Jump to fury_unarmed_give_up_2
],Choice - [[You've done enough. It's ...
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to fury_unwind_sequence
],Choice - [[Reach for her heart.]
[,,,,,,,,,,,,,,,,,
Assign "default_mouse" = Val (String "eye")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Slay the Princess.]
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,,
Assign "fury_end" = Val (String "slay_unarmed")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 1)
,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Jump to mirror_start
]]}
]]}
]]}
]]}
]]}
]}
]}
,
{Label: fury_pristine_tower
[,,,,
[If Var "fury_blade_taken" == Val (Bool False) [,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to fury_unwind_sequence
]]
,
Jump to fury_pristine_tower_start_menu
]}
,
{Label: fury_pristine_tower_start_menu
[,,
{Choice Branch: [Choice - (Explore) ''You damned chea...
[
Assign "fury_tower_talk_attempt_1_thing" = Val (String "insides")
,
[If Var "fury_fail_talk" == Val (Bool False) [
Jump to fury_tower_talk_attempt
]]
],Choice - (Explore) ''I killed you la...
[
Assign "fury_tower_talk_attempt_1_thing" = Val (String "slay")
,
[If Var "fury_fail_talk" == Val (Bool False) [
{Label: fury_tower_talk_attempt
[
Assign "fury_fail_talk" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to fury_pristine_tower_menu_2
]}
]]
],Choice - (Explore) ''I only killed y...
[
Assign "fury_tower_talk_attempt_1_thing" = Val (String "soft")
,
Assign "fury_baby_count" += Val (Int 1)
,
[If Var "fury_fail_talk" == Val (Bool False) [
Jump to fury_tower_talk_attempt
]]
],Choice - (Explore) ''I'm sorry for w...
[
Assign "fury_tower_talk_attempt_1_thing" = Val (String "soft")
,
Assign "fury_baby_count" += Val (Int 1)
,
[If Var "fury_fail_talk" == Val (Bool False) [
Jump to fury_tower_talk_attempt
]]
],Choice - (Explore) ''Where is all of...
[
Assign "fury_tower_talk_attempt_1_thing" = Val (String "soft")
,
[If Var "fury_fail_talk" == Val (Bool False) [
Jump to fury_tower_talk_attempt
]]
],Choice - [[This is no time for words...
[
Jump to fury_pristine_tower_battle
]]}
]}
,
{Label: fury_pristine_tower_menu_2
[,,,
{Choice Branch: [Choice - (Explore) ''I'm sorry, okay...If Var "fury_pristine_tower_sorry" == Val (Bool False) []
[
Assign "fury_baby_count" += Val (Int 2)
,
Assign "fury_pristine_tower_sorry" = Val (Bool True)
,,,,,,,,
[If "fury_early_sorry" [,,,]]
,,,,,,,,,,,,,,,,,,,
Jump to fury_pristine_tower_menu_2_choice
],Choice - (Explore) ''I said, I'm goi...If Var "fury_tower_talk_attempt_1_thing" == Val (String "slay") []
[
Assign "fury_pristine_tower_talk_first" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to fury_tower_explode_join
],Choice - (Explore) ''I said, give me...If Var "fury_tower_talk_attempt_1_thing" == Val (String "insides") []
[
Assign "fury_baby_count" += Val (Int 1)
,,,
Assign "fury_pristine_tower_talk_first" = Val (Bool True)
,,,,,,,,,,,,,,,,,,
{Label: fury_pristine_tower_menu_2_choice
[,
[If "fury_unarmed_previous" []]
,
[Else []]
,,,
Assign "config.menu_include_disabled" = Val (Bool True)
,
{Choice Branch: [Choice - [[It's hopeless. Submit.]
[
Assign "config.menu_include_disabled" = Val (Bool False)
,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,,,,
Jump to fury_unwind_sequence
],Choice - [[Seize control of your bro...If Var "fury_baby_count" < Val (Int 2) []
[
Assign "config.menu_include_disabled" = Val (Bool False)
,
Jump to fury_pristine_tower_battle
]]}
]}
],Choice - (Explore) ''We have to stop...
[,,
Assign "fury_baby_count" += Val (Int 2)
,,,,,,,,,,,
Jump to fury_pristine_tower_menu_2_choice
],Choice - (Explore) ''What's your end...
[,,,
Assign "fury_unarmed_previous" = Val (Bool True)
,,,,,,,,,,,
Jump to fury_pristine_tower_menu_2_choice
],Choice - [[This is no time for words...
[
Jump to fury_pristine_tower_battle
]]}
]}
,
{Label: fury_pristine_tower_battle
[,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,
{Label: fury_tower_explode_join
[,,,,,,,,,,,,,,,,,,
{Label: fury_tower_lose_body_menu
[,,,
{Choice Branch: [Choice - (Explore) ''How are we supp...If Var "fury_tower_lose_body_encouraged" == Val (Bool False) []
[
Assign "fury_tower_lose_body_encouraged" = Val (Bool True)
,,,
Jump to fury_tower_lose_body_menu
],Choice - (Explore) ''I can't do anyt...If Var "fury_tower_lose_body_encouraged" == Val (Bool False) []
[
Assign "fury_tower_lose_body_encouraged" = Val (Bool True)
,,,
Jump to fury_tower_lose_body_menu
],Choice - (Explore) ''And if we lose ...If "can_unwound" []
[,,,,,,,,,,,,,,,,,,
Jump to fury_unwind_sequence
],Choice - (Explore) ''She's going to ...If Var "fury_tower_lose_body_here" == Val (Bool False) []
[
Assign "fury_tower_lose_body_here" = Val (Bool True)
,,,,,,,
Jump to fury_tower_lose_body_menu
],Choice - [[Shed this vessel for the ...
[,,
Jump to fury_tower_battle_sequence
]]}
]}
]}
]}
,
{Label: fury_tower_battle_sequence
[
Assign "trait_broken" = Val (Bool False)
,,,,,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,
{Choice Branch: [Choice - [[Die again.]
[,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,]]}
,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,
{Choice Branch: [Choice - [[And again.]
[,,,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,]]}
,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,
{Choice Branch: [Choice - [[AGAIN!]
[,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,]]}
,
Assign "trait_cold" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,
Assign "default_mouse" = Val (String "eye")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[End this.]
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,,
Assign "fury_end" = Val (String "slay_tower")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 1)
,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "trait_broken" = Val (Bool False)
,
Assign "trait_cold" = Val (Bool True)
,
Jump to mirror_start
]]}
]}
,
{Label: prisoner_rewrites
[,,,,,,,,,,,,,]}
,
{Label: cage_start
[,,,,,
Assign "current_princess" = Val (String "cage")
,
Assign "default_mouse" = Val (String "default")
,
Assign "blade_held" = Val (Bool False)
,
Assign "current_loop" = Val (Int 3)
,
Assign "quick_menu" = Val (Bool False)
,
Assign "config.menu_include_disabled" = Val (Bool False)
,
Assign "cage_encountered" = Val (Bool True)
,
Assign "trait_skeptic" = Val (Bool True)
,,,,,
Assign "quick_menu" = Val (Bool False)
,
[If "prisoner_give_skeptic_blade" [
Assign "trait_broken" = Val (Bool True)
]]
,
[Elif "prisoner_heart_stop" [
Assign "trait_cheated" = Val (Bool True)
]]
,
[Else [
Assign "trait_paranoid" = Val (Bool True)
]]
,,,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blade")
,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,
[If "trait_cheated" [,,,,,,,,,,,,,,,]]
,
[Elif "trait_broken" [,,,,,,,,
[If "prisoner_decapitation_watch" [,]]
,
[Else [,]]
,,,,,,]]
,
[Elif "trait_paranoid" [,,,,,,,,,,,,,,,]]
,
[If Var "trait_paranoid" == Val (Bool False) [,]]
]}
,
{Label: cage_woods_menu
[,,,,
{Choice Branch: [Choice - (Explore) Should we talk ab...If Var "cage_woods_blade_explore" == Val (Bool False) []
[
Assign "cage_woods_blade_explore" = Val (Bool True)
,,,,,
[If "trait_broken" [,,,,,]]
,
[If "trait_paranoid" [,,,]]
,
[If "trait_cheated" [,,,,,]]
,,,
Jump to cage_woods_menu
],Choice - (Explore) She died last tim...If "prisoner_happy_seen" && Var "cage_woods_last_time_comment" == Val (Bool False) []
[
Assign "cage_woods_last_time_comment" = Val (Bool True)
,
[If "trait_broken" [,,,]]
,
[Else [,]]
,,,,,,,
[If "trait_cheated" [,,,,
Jump to cage_woods_cheated_expl_join
]]
,
[Elif "trait_paranoid" [,,,,,,,]]
,
Jump to cage_woods_sigh_join
],Choice - (Explore) Are you sure we e...If Var "cage_woods_last_time_comment" == Val (Bool False) []
[
Assign "cage_woods_last_time_comment" = Val (Bool True)
,
[If "trait_broken" [,]]
,
[Else [
{Label: cage_woods_head_cut_join
[,]}
]]
,,,
{Label: cage_woods_explain_join
[
[If "trait_cheated" [,,,,
{Label: cage_woods_cheated_expl_join
[,,,,,]}
]]
,
[Elif "trait_broken" [
{Label: cage_woods_broken_join
[,,,,
Jump to cage_woods_sigh_join
]}
]]
,
[Elif "trait_paranoid" [,,,,,,,,
{Label: cage_woods_sigh_join
[,]}
]]
,
Jump to cage_woods_menu
]}
],Choice - (Explore) I was happy with ...If "prisoner_happy_seen" && Var "cage_woods_last_time_comment" == Val (Bool False) []
[
Assign "cage_woods_last_time_comment" = Val (Bool True)
,,,
[If "trait_broken" [,,,,,,,,
Jump to cage_woods_explain_join
]]
,
[Else [,,,,
Jump to cage_woods_head_cut_join
]]
],Choice - (Explore) I'm not taking th...If "blade_held" && Var "cage_woods_blade_toss_attempt" == Val (Bool False) && "cage_woods_blade_explore" []
[,,
[If "trait_broken" [,]]
,
[If "trait_paranoid" [,,,]]
,
[Elif "trait_cheated" [,]]
,
[If "trait_broken" || "trait_cheated" [,]]
,
{Label: cage_woods_blade_toss_menu
[,
{Choice Branch: [Choice - [[Do it. Toss the blade.]If Var "cage_woods_blade_toss_attempt" == Val (Bool False) []
[
Assign "cage_woods_blade_toss_attempt" = Val (Bool True)
,,,
[If "trait_broken" [,]]
,
{Choice Branch: [Choice - I'm in charge, and I say we...
[
[If "trait_paranoid" [,,,,
[If "prisoner_delayed_knife_comment" [,]]
,,,,,,,,,,,,
Assign "config.menu_include_disabled" = Val (Bool True)
,
{Choice Branch: [Choice - Are you seriously not letti...If "tower_false_choice" []
[
Assign "config.menu_include_disabled" = Val (Bool False)
],Choice - Real mature.If "tower_false_choice" []
[
Assign "config.menu_include_disabled" = Val (Bool False)
],Choice - When this goes sideways, it...If "tower_false_choice" []
[
Assign "config.menu_include_disabled" = Val (Bool False)
],Choice - Fine. Then I guess we're ke...
[
Assign "config.menu_include_disabled" = Val (Bool False)
,,,,,,,
Jump to cage_woods_menu
]]}
]]
,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,
Assign "cage_blade_thrown" = Val (Bool True)
,,,,,,,
[If "trait_broken" [,]]
,
[Else [,]]
,
Jump to cage_woods_menu
],Choice - Fine. Have it your way. I'l...
[
Jump to cage_wood_blade_keep_join
]]}
],Choice - Fine. Have it your way. I'l...
[
{Label: cage_wood_blade_keep_join
[
Assign "cage_woods_blade_toss_attempt" = Val (Bool True)
,
[If "trait_broken" [,,,]]
,
[If "trait_paranoid" [,]]
,,]}
,
Jump to cage_woods_menu
]]}
]}
],Choice - No way out but through. Let...
[
Jump to cage_cabin_exterior
],Choice - [[Silently proceed to the c...
[
Jump to cage_cabin_exterior
],Choice - I'm done with this. Bye! [[...If "mound_can_attempt_flee" []
[
[If Var "loops_finished" >= Val (Int 2) [
Assign "mound_can_attempt_flee" = Val (Bool False)
,,,
Jump to cage_woods_menu
]]
,,
Assign "caught_origin_current" = Val (String "cage")
,
Assign "caught_origin_ch3" = Val (Bool True)
,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
Jump to caught_start
]]}
]}
,
{Label: cage_cabin_exterior
[,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,
[If "trait_broken" [,]]
,
[If "trait_cheated" [,]]
,
[If "trait_paranoid" [,]]
,,,,,
{Choice Branch: [Choice - [[Proceed into the cabin.]
[,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,
Jump to cage_cabin
]]}
]}
,
{Label: cage_cabin
[,,,
[If "prisoner_1_cabin_mirror_ask" || "prisoner_1_cabin_mirror_approached" [
Assign "prisoner_mirror_interact" = Val (Bool True)
]]
,,,
[If "blade_held" [,]]
,
[Else [,]]
,
[If Var "prisoner_mirror_interact" == Val (Bool False) [,]]
,
[If "prisoner_mirror_interact" [
[If "trait_cheated" [,,,,,,,]]
,
[Else [,,,,
[If "trait_broken" [,,,]]
,
[If "trait_paranoid" [,,,,,]]
]]
]]
,
[Else [,,
[If "trait_cheated" [,]]
,
[If "trait_broken" [,,,]]
,
[If "trait_paranoid" [,,,,,]]
]]
,
[If Var "trait_paranoid" == Val (Bool False) [,,,]]
,
{Choice Branch: [Choice - [[Approach the mirror.]
[
Jump to cage_stairs_start
]]}
]}
,
{Label: cage_stairs_start
[,,,,,,,,,,,,,,,,
[If "trait_broken" [,,,,,,,,,,,]]
,
[If "trait_cheated" [,,,,,,,,,,,,,]]
,
[If "trait_paranoid" [,,,,,,,]]
]}
,
{Label: cage_basement_start
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,
[If "blade_held" []]
,
[Else []]
,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,
[If "blade_held" []]
,
[Else []]
,,,,,
{Choice Branch: [Choice - ''Hello?''
[
Jump to cage_basement_second_menu
],Choice - ''Are you mad at me?''
[
Jump to cage_basement_second_menu
],Choice - ''So you can come back too.''
[
Jump to cage_basement_second_menu
],Choice - ''Look, I'm sorry about wha...
[
Jump to cage_basement_second_menu
],Choice - ''Why the hell did you cut ...
[
Jump to cage_basement_second_menu
],Choice - [[Attack her.]If "blade_held" []
[,
Assign "cage_action" = Val (Bool True)
,
Jump to cage_encounter_start
],Choice - [[Wait for her to make the ...
[
Jump to cage_second_menu_response
]]}
]}
,
{Label: cage_basement_second_menu
[,,,
[If "trait_broken" [,]]
,
[If "trait_cheated" [,,,,,]]
,
[If "trait_paranoid" [,,,,,
Assign "paranoid_can_free_cage" = Val (Bool True)
,,,,]]
,
{Choice Branch: [Choice - (Explore) ''Hello?''
[
Jump to cage_second_menu_response
],Choice - (Explore) ''I'm talking to ...
[
Jump to cage_second_menu_response
],Choice - (Explore) ''I'm sorry, okay...
[
Jump to cage_second_menu_response
],Choice - (Explore) ''Look, I'm sorry...
[
Jump to cage_second_menu_response
],Choice - (Explore) ''Screw it.'' [[A...If "blade_held" []
[
Assign "cage_action" = Val (Bool True)
,,,,,,
Jump to cage_encounter_start
],Choice - (Explore) [[Try to slip free.]If Var "paranoid_can_free_cage" == Val (Bool False) []
[,,
Assign "cage_action" = Val (Bool True)
,
Jump to cage_encounter_start
],Choice - (Explore) [[Try to cut your...If "paranoid_can_free_cage" []
[,
Assign "cage_cut_route" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to cage_encounter_start
],Choice - (Explore) [[Remain silent.]
[
Jump to cage_second_menu_response
]]}
,
{Label: cage_second_menu_response
[,
Jump to cage_encounter_start
]}
,
{Label: cage_action_join
[
[If Var "cage_cut_route" == Val (Bool False) [,]]
]}
]}
,
{Label: cage_encounter_start
[,
[If "cage_cut_route" [,,,,,,,,]]
,
[Elif "cage_action" [,,,,,,
[If "blade_held" []]
,
[Else []]
,,]]
,
[Else [,,,,,,
[If "blade_held" []]
,
[Else []]
,,]]
,,,,,,,,,
[If "cage_cut_route" []]
,
[Elif "blade_held" []]
,
[Else []]
,,,,,,,,,
[If "trait_broken" [,,
[If "blade_held" [,,,]]
,
[Else [,]]
]]
,
[If "trait_cheated" [,,,,,,,]]
,
[If "trait_paranoid" [
[If "cage_cut_route" [,]]
]]
,,,,
{Choice Branch: [Choice - (Explore) ''What is your pr...
[
Assign "cage_1_help" = Val (Bool True)
,,,,,,,,,],Choice - (Explore) ''Let me down! Ki...
[,,,,,,],Choice - (Explore) ''Look, I didn't ...If Var "blade_held" == Val (Bool False) []
[
Assign "cage_no_blade_mentioned" = Val (Bool True)
,,,,,,,,,],Choice - (Explore) ''What... happene...
[,,,,,,,,],Choice - (Explore) ''You cut your ow...
[,,,,,,],Choice - (Explore) [[Attempt to cut ...If "blade_held" && Var "cage_cut_route" == Val (Bool False) []
[,,,],Choice - (Explore) [[Swing your blade.]If "blade_held" []
[,,],Choice - (Explore) [[Keep cutting.]If "blade_held" && "cage_cut_route" []
[,
Assign "cage_cut_2" = Val (Bool True)
,,,,,,,,,,,,,,,],Choice - (Explore) [[Remain silent.]
[,
Assign "cage_1_silence" = Val (Bool True)
,,,,,
[If "trait_broken" [,]]
,
[If "trait_paranoid" [,,,]]
,
[If "trait_cheated" [,]]
]]}
,
Jump to cage_menu_2_start
]}
,
{Label: cage_menu_2_start
[,,,,,,
[If "cage_cut_2" []]
,
[Elif "cage_cut_route" []]
,
[Elif "blade_held" []]
,
[Else []]
,,,,,,,,,,,
[If "cage_cut_2" []]
,
[Elif "cage_cut_route" []]
,
[Elif "blade_held" []]
,
[Else []]
,,,
[If "trait_paranoid" [
[If "cage_cut_2" [,]]
,
[Else [,,,]]
]]
,
[Elif "trait_broken" [,]]
,
[If "trait_cheated" [,,,,,]]
,
[If Var "cage_cut_2" == Val (Bool False) [,]]
,
{Choice Branch: [Choice - [[Cut yourself free.]If "cage_cut_2" []
[,
Assign "cage_cut_3" = Val (Bool True)
,,,,,,,],Choice - (Explore) ''None of this is...
[,,,,,,],Choice - (Explore) '''She?' Are you ...
[,,,,,,,,],Choice - (Explore) ''Nothing that's ...If "cage_1_help" []
[,,,,,,],Choice - (Explore) ''What do you mea...
[,,,,,,],Choice - (Explore) ''You've made cho...
[,,,,,,,,,,,,,],Choice - (Explore) [[Drop the blade.]If "blade_held" []
[,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,
[If Var "cage_cut_route" == Val (Bool False) []]
,,],Choice - (Explore) [[Say nothing.]
[,,,,,,]]}
]}
,
{Label: cage_decap_menu_3
[,,,,,,
[If "cage_cut_3" [,,,,,,,,]]
,
[Else [,,,,,,
[If "cage_cut_2" []]
,
[Elif "cage_cut_route" []]
,
[Elif "blade_held" []]
,
[Else []]
,,]]
,,,,,,,,,
[If "cage_cut_3" []]
,
[Elif "cage_cut_2" []]
,
[Elif "cage_cut_route" []]
,
[Elif "blade_held" []]
,
[Else []]
,,,
[If "cage_blade_thrown" [,,,
[If "cage_cut_3" []]
,
[Elif "cage_cut_2" []]
,
[Elif "cage_cut_route" []]
,
[Elif "blade_held" []]
,
[Else []]
,,
Jump to cage_free_menu
]]
,
[If "cage_cut_3" [,,,,,,,,,,,,,]]
,
[Else [,,,,,,
[If "cage_cut_2" []]
,
[Elif "cage_cut_route" []]
,
[Elif "blade_held" []]
,
[Else []]
,,]]
,,,,,,,,,
[If "cage_cut_3" []]
,
[Elif "cage_cut_2" []]
,
[Elif "cage_cut_route" []]
,
[Elif "blade_held" []]
,
[Else []]
,,,
[If "cage_cut_3" [
Jump to cage_slay_join
]]
,
[If "blade_held" [
Assign "default_mouse" = Val (String "default")
,
Assign "blade_held" = Val (Bool False)
,,,,
[If Var "cage_cut_route" == Val (Bool False) []]
,,]]
,
[Else [,,,,,,,,,,,,,]]
,,,,,,,
[If "trait_paranoid" [,,,,,]]
,
[Elif "trait_broken" [,,,,,]]
,
[Elif "trait_cheated" [,,,,,]]
,
{Choice Branch: [Choice - (Explore) ''I didn't want t...If "trait_paranoid" && "cage_woods_blade_toss_attempt" []
[,,,,,],Choice - (Explore) ''You're setting ...
[,,,,,],Choice - (Explore) ''Us choosing the...If Var "cage_woods_blade_toss_attempt" == Val (Bool False) []
[,,,,,],Choice - (Explore) ''What was I supp...
[,,,,,],Choice - (Explore) ''Please. Just st...
[,,,,,,,],Choice - (Explore) [[Say nothing.]
[,,,,,,
Jump to cage_decapitated
]]}
]}
,
{Label: cage_decapitated
[,,,,,,,,
[If "cage_cut_2" []]
,
[Elif "cage_cut_route" []]
,
[Else []]
,,,,,,
[If "trait_broken" [,]]
,
[Elif "trait_cheated" [,]]
,
[Elif "trait_paranoid" [,]]
,,,,,,,,,,,,,,
Assign "default_mouse" = Val (String "eye")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - ''I didn't let go. You ripp...
[,,,,,,,],Choice - ''What are we supposed to d...
[,,,],Choice - ''You didn't cut yourself f...
[,,,,,,,],Choice - ''This isn't nicer! I'm a s...
[,,,],Choice - ''I thought that would be t...
[,,,],Choice - [[Say nothing.]
[]]}
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,,
Assign "cage_end" = Val (String "stuck")
,
Assign "current_princess" = Val (String "cage")
,
Assign "princess_kept" += Val (Int 1)
,
{Choice Branch: [Choice - [[Say nothing.]
[
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,
{Choice Branch: [Choice - [[Gaze into your reflection.]
[,]]}
,
Jump to mirror_sort
]]}
]}
,
{Label: cage_free_menu
[
[If Var "cage_no_blade_mentioned" == Val (Bool False) [,]]
,
[Else [,]]
,
{Choice Branch: [Choice - ''Yeah, is that right? I br...
[,,,,,,,],Choice - ''You clearly weren't liste...If "cage_no_blade_mentioned" []
[,,,,,],Choice - ''There's no grand scheme g...
[
Jump to cage_free_penultimate_default_join
],Choice - ''Your pattern's broken. I'...
[
{Label: cage_free_penultimate_default_join
[,,,,,,,]}
],Choice - [[Silently wave your empty ...
[,
Assign "cage_free_silent_wave" = Val (Bool True)
,,,,,,]]}
]}
,
{Label: cage_free_final_menu
[,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - ''You've been the one liste...
[
{Label: cage_final_default_join
[,,,,,]}
],Choice - ''What do you actually want...
[
Jump to cage_final_default_join
],Choice - ''I think you know what it'...
[,,,,,],Choice - ''Well? Are you ready to ta...
[,,,,,],Choice - [[Say nothing.]
[,,,,,]]}
,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,
[If "trait_broken" [,,,,,,,]]
,
[Else [,,,]]
,,,,,
[If "trait_broken" [,]]
,
[Elif "trait_cheated" [,,,]]
,,,,,,,,,,
[If "trait_broken" [,]]
,
[Elif "trait_cheated" [,]]
,,,,,,,
{Choice Branch: [Choice - [[Take your Princess from h...
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "trait_cheated" [,]]
,,,,,
[If "trait_broken" [,,,]]
,,,,,,,
{Choice Branch: [Choice - [[Take hold of the chain.]
[,,,,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,,,,,,,,
[If "trait_cheated" [,,,,,,,,]]
,
[Elif "trait_broken" [,,,,]]
,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,
{Label: chain_free_menu_finale
[,
{Choice Branch: [Choice - (Explore) ''You know, it's ...If Var "chain_free_menu_finale" == Val (Bool False) []
[
Assign "chain_free_menu_finale" = Val (Bool True)
,,,,,,,
[If "trait_broken" [,]]
,,,,,
[If "trait_cheated" [,,,,,,,]]
,,,,,
[If "trait_paranoid" [,,,]]
,,,
Jump to chain_free_menu_finale
],Choice - [[Step into your freedom.]
[,,,,,,,,,,,,,,,,,,,,,,,,
[If "trait_broken" [,]]
,
[If "trait_cheated" [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "princess_satisfy" += Val (Int 1)
,
Assign "princess_free" += Val (Int 1)
,
Assign "cage_end" = Val (String "free")
,,
Jump to mirror_start
],Choice - [[Drop her.]If "chain_free_menu_finale" []
[,
[If "trait_broken" [,]]
,,,,,
[If "trait_cheated" [,]]
,,,
[If "trait_broken" [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "princess_deny" += Val (Int 1)
,
Assign "princess_kept" += Val (Int 1)
,
Assign "cage_end" = Val (String "drop")
,,
Jump to mirror_start
]]}
]}
]]}
]]}
]}
,
{Label: cage_slay_join
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "config.menu_include_disabled" = Val (Bool True)
,
{Choice Branch: [Choice - The pieces fall into place.If "tower_false_choice" []
[
Assign "config.menu_include_disabled" = Val (Bool False)
],Choice - For every permutation there...If "tower_false_choice" []
[
Assign "config.menu_include_disabled" = Val (Bool False)
],Choice - And when the pattern is lea...If "tower_false_choice" []
[
Assign "config.menu_include_disabled" = Val (Bool False)
],Choice - But was the pattern always ...If "tower_false_choice" []
[
Assign "config.menu_include_disabled" = Val (Bool False)
],Choice - The writers must follow the...If "tower_false_choice" []
[
Assign "config.menu_include_disabled" = Val (Bool False)
],Choice - [[Give her your implement.]
[
Assign "config.menu_include_disabled" = Val (Bool False)
,,,,,,,,,,,,,,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,,
Assign "princess_kept" += Val (Int 1)
,
Assign "cage_end" = Val (String "slay")
,
Jump to mirror_start
]]}
]}
,
{Label: spectre_pristine_start
[
Assign "trait_opportunist" = Val (Bool True)
,
Assign "trait_cold" = Val (Bool True)
,,,,,,,
[If "spectre_hostile" [,,,,]]
,
[Else [,,,,]]
,,,,,,
[If "spectre_hostile" [,,,,,,]]
,
[Else [,,,,,,]]
,
[If "spectre_hostile" [,,,,,,,,,,,,]]
,
[Else [,,,,,,,,,,,,]]
,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "princess")
,
[If "spectre_hostile" []]
,
[Else []]
,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "princess")
,,
[If "spectre_hostile" [,]]
,
[Else [,]]
,,,,,,,,
{Choice Branch: [Choice - Is that me?! Is that what I...
[
[If "spectre_hostile" [,,,]]
,
[Else [,,,,,]]
],Choice - This isn't what I wanted to...
[
[If "spectre_hostile" [,,,,,]]
,
[Else [,,,,,]]
],Choice - Did you mean to take me wit...
[
[If "spectre_hostile" [,,,,,]]
,
[Else [,,,,,]]
],Choice - Can anyone hear me?
[
[If "spectre_hostile" [,,,]]
,
[Else [,,,,,]]
],Choice - [[Say nothing.]
[
[If "spectre_hostile" [,,,]]
,
[Else [,,,,,]]
]]}
,
[If "spectre_hostile" [,]]
,,,,
[If "spectre_hostile" [,]]
,
[Else [,]]
,
{Choice Branch: [Choice - But what about the body? Wh...
[
[If "spectre_hostile" [,,]]
,
[Else [,,]]
],Choice - Agreed. Let's go.
[
[If "spectre_hostile" [,]]
,
[Else [,]]
,
{Label: dragon_start_flee_join
[
[If "spectre_upstairs" [,,,,,]]
,
[Else [,,,,,]]
,
[If "spectre_upstairs" [,,]]
,
[Else [,,]]
,
[If "spectre_hostile" [,,]]
,
[Else [,,]]
]}
],Choice - If you leave the cabin, the...
[
[If "spectre_hostile" [,,]]
,
[Else [,,]]
],Choice - Hell no! We're staying righ...
[
[If "spectre_hostile" [,,
Jump to dragon_start_flee_join
]]
,
[Else [,,]]
],Choice - Sorry I stabbed us.
[
Assign "dragon_apologize" = Val (Bool True)
,
[If "spectre_hostile" [,,]]
,
[Else [,,]]
],Choice - [[Say nothing.]
[
[If "spectre_hostile" [,]]
,
[Else [,]]
,
Jump to dragon_start_flee_join
]]}
,,,,
Assign "current_princess" = Val (String "dragon")
,,,,,,,,,,
[If "spectre_hostile" [,]]
,
[Else [,]]
]}
,
{Label: dragon_start_menu
[,,,,,,,,,,,
{Choice Branch: [Choice - (Explore) There has to be s...If Var "dragon_loop_joke_count" != Val (Int 0) || "dragon_wait_attempt" []
[,
Assign "dragon_start_count" += Val (Int 1)
,
Assign "dragon_loop_joke_count" += Val (Int 1)
,
[If Var "dragon_loop_joke_count" == Val (Int 1) [
[If "spectre_hostile" [,]]
,
[Else [,]]
]]
,
[Elif Var "dragon_loop_joke_count" == Val (Int 2) [
[If "spectre_hostile" [,]]
,
[Else [,]]
]]
,
[Elif Var "dragon_loop_joke_count" == Val (Int 3) [
[If "spectre_hostile" [,]]
,
[Else [,]]
]]
,
[Elif Var "dragon_loop_joke_count" == Val (Int 4) [
[If "spectre_hostile" [,]]
,
[Else [,]]
]]
,
[Elif Var "dragon_loop_joke_count" == Val (Int 4) [
[If "spectre_hostile" [,]]
,
[Else [,]]
]]
,
[Else [,
[If "spectre_hostile" [,]]
,
[Else [,]]
]]
,
Jump to dragon_start_menu
],Choice - (Explore) I'm still here.If Var "dragon_start_count" == Val (Int 0) && Var "dragon_intro_explore" == Val (Bool False) []
[
Assign "dragon_intro_explore" = Val (Bool True)
,
Assign "dragon_start_count" += Val (Int 1)
,
[If "spectre_hostile" [,]]
,
[Else [,]]
,
Jump to dragon_start_menu
],Choice - (Explore) What just happened?If Var "dragon_start_count" == Val (Int 0) && Var "dragon_what_happened" == Val (Bool False) []
[
{Label: dragon_what_happened_join
[
Assign "dragon_what_happened" = Val (Bool True)
,
Assign "dragon_start_count" += Val (Int 1)
,
[If Var "dragon_intro_explore" == Val (Bool False) && Var "dragon_start_count" == Val (Int 0) [
Assign "dragon_intro_explore" = Val (Bool True)
,
[If "spectre_hostile" [,]]
,
[Else [,]]
]]
,
[If "spectre_hostile" [
[If "spectre_death_shared" [,]]
,
[Else [,]]
]]
,
[Else [
[If "spectre_death_shared" [,]]
,
[Else [,]]
,,]]
,
Jump to dragon_start_menu
]}
],Choice - (Explore) You're not mad at...If Var "dragon_still_mad" == Val (Bool False) && Var "dragon_tone_different" == Val (Bool False) []
[
Assign "dragon_start_count" += Val (Int 1)
,
Assign "dragon_still_mad" = Val (Bool True)
,
[If Var "dragon_intro_explore" == Val (Bool False) && Var "dragon_start_count" == Val (Int 0) [
Assign "dragon_intro_explore" = Val (Bool True)
,
[If "spectre_hostile" [,]]
,
[Else [,]]
]]
,
[If "spectre_hostile" [,]]
,
[Else [,]]
,
Jump to dragon_start_menu
],Choice - (Explore) You're different....If Var "dragon_start_count" != Val (Int 0) && Var "dragon_tone_different" == Val (Bool False) []
[
Assign "dragon_start_count" += Val (Int 1)
,
Assign "dragon_tone_different" = Val (Bool True)
,
[If Var "dragon_intro_explore" == Val (Bool False) && Var "dragon_start_count" == Val (Int 0) [
Assign "dragon_intro_explore" = Val (Bool True)
,
[If "spectre_hostile" [,]]
,
[Else [,]]
]]
,
[If "spectre_hostile" [
[If "dragon_still_mad" [,]]
,,,,]]
,
[Else [,,,]]
,
{Choice Branch: [Choice - I killed you, though. And I...
[
[If "spectre_hostile" [,]]
,
[Else [,]]
,
Jump to dragon_start_menu
],Choice - [[Let it go, just like she ...
[
Jump to dragon_start_menu
]]}
],Choice - (Explore) Sorry I stabbed us.If Var "dragon_apologize" == Val (Bool False) []
[
Assign "dragon_start_count" += Val (Int 1)
,
Assign "dragon_apologize" = Val (Bool True)
,
[If "spectre_hostile" [,,,,]]
,
[Else [,]]
,
Jump to dragon_start_menu
],Choice - (Explore) How are we suppos...If Var "dragon_how_leave" == Val (Bool False) && Var "dragon_start_count" != Val (Int 1) []
[
Assign "dragon_how_leave" = Val (Bool True)
,
Assign "dragon_start_count" += Val (Int 1)
,
[If "spectre_hostile" [,]]
,
[Else [,]]
,
Jump to dragon_start_menu
],Choice - (Explore) If we're both her...If Var "dragon_where_others" == Val (Bool False) []
[
Assign "dragon_where_others" = Val (Bool True)
,
Assign "dragon_start_count" += Val (Int 1)
,
[If "spectre_hostile" [,,,,,]]
,
[Else [,,,]]
,
Jump to dragon_start_menu
],Choice - (Explore) Are we still a gh...If Var "dragon_ghost_explore" == Val (Bool False) []
[
Assign "dragon_ghost_explore" = Val (Bool True)
,
Assign "dragon_start_count" += Val (Int 1)
,
Assign "dragon_hands_observe" = Val (Bool True)
,
[If Var "dragon_intro_explore" == Val (Bool False) && Var "dragon_start_count" == Val (Int 0) [
Assign "dragon_intro_explore" = Val (Bool True)
,
[If "spectre_hostile" [,]]
,
[Else [,]]
]]
,,,,,,,,,
[If "spectre_hostile" [,,,]]
,
[Else [,]]
,,,,,
Jump to dragon_start_menu
],Choice - (Explore) So what are we su...If Var "dragon_loop_joke_count" == Val (Int 0) && "dragon_wait_first_explore" []
[
Jump to dragon_start_wait_join
],Choice - (Explore) What are we suppo...If Var "dragon_loop_joke_count" == Val (Int 0) && Var "dragon_wait_first_explore" == Val (Bool False) []
[
{Label: dragon_start_wait_join
[
Assign "dragon_start_count" += Val (Int 1)
,
Assign "dragon_wait_first_explore" = Val (Bool True)
,
Assign "dragon_loop_joke_count" += Val (Int 1)
,
[If "spectre_hostile" [,]]
,
[Else [,]]
,
Jump to dragon_start_menu
]}
],Choice - (Explore) What happened to ...If Var "dragon_start_count" != Val (Int 0) && Var "dragon_what_happened" == Val (Bool False) []
[
Jump to dragon_what_happened_join
],Choice - (Explore) [[Wait.]If Var "dragon_second_wait" == Val (Bool False) []
[,
Assign "dragon_wait_attempt" = Val (Bool True)
,
Assign "dragon_start_count" += Val (Int 1)
,,
[If Var "dragon_start_count" == Val (Int 0) [
[If "spectre_hostile" [,]]
,
[Else [,]]
]]
,
[Else [
Assign "dragon_second_wait" = Val (Bool True)
,
[If "spectre_hostile" [,]]
,
[Else [,]]
,
Jump to dragon_start_menu
]]
],Choice - (Explore) [[Say nothing.]If Var "dragon_start_count" == Val (Int 0) []
[
Assign "dragon_start_count" += Val (Int 1)
,
[If "spectre_hostile" [,]]
,
[Else [,]]
,
Jump to dragon_start_menu
],Choice - This isn't what it was like...If "dragon_what_happened" && Var "dragon_title_card" == Val (Bool False) []
[
Assign "dragon_start_count" += Val (Int 1)
,
[If "spectre_hostile" [,]]
,
[Else [,]]
,
{Label: dragon_title_card_menu
[,,,
{Choice Branch: [Choice - (Explore) No, this is stupi...If Var "dragon_title_card_no_laugh_exp" == Val (Bool False) []
[
Assign "dragon_title_card_no_laugh_exp" = Val (Bool True)
,
[If "spectre_hostile" [,]]
,
[Else [
Assign "dragon_title_card_laugh_promise" = Val (Bool True)
,,]]
,
Jump to dragon_title_card_menu
],Choice - (Explore) If I'm going to t...If "dragon_title_card_no_laugh_exp" && "spectre_hostile" && Var "dragon_title_card_laugh_promise" == Val (Bool False) []
[
Assign "dragon_title_card_laugh_promise" = Val (Bool True)
,,,
Jump to dragon_title_card_menu
],Choice - The first one I got said 'C...
[
Assign "dragon_title_card_shared" = Val (Bool True)
,
[If "spectre_hostile" [
[If "dragon_title_card_laugh_promise" [,]]
,
[Else [,]]
]]
,
[Else [,]]
,
{Choice Branch: [Choice - You promised you wouldn't l...If "dragon_title_card_laugh_promise" []
[
{Label: dragon_no_laugh_join
[
[If "spectre_hostile" [,,
{Choice Branch: [Choice - You were laughing at me.
[,],Choice - The futility of our lives?
[,],Choice - Mhm.
[,],Choice - [[Say nothing.]
[,]]}
,,,,,,,,]]
,
[Else [,,,,,,,,]]
]}
,
{Label: princess_dragon_title_reveal
[
{Choice Branch: [Choice - Oooh. Reversing the order! ...
[,
[If "spectre_hostile" [,]]
,
[Else [,]]
],Choice - Casting yourself as the mai...
[,
[If "spectre_hostile" [
[If "dragon_title_card_shared" [,]]
,
[Else [,]]
]]
,
[Else [,]]
],Choice - The Princess and the {b}Dra...
[,
[If "spectre_hostile" [,]]
,
[Else [,]]
],Choice - Wait, am I a dragon? Hell y...
[,
[If "spectre_hostile" [
Assign "dragon_look_like" = Val (Bool True)
,,]]
,
[Else [,]]
],Choice - I... don't actually know wh...
[,
Assign "dragon_look_like" = Val (Bool True)
,
[If "spectre_hostile" [,]]
,
[Else [,]]
],Choice - [[Say nothing.]
[,
[If "spectre_hostile" [,]]
,
[Else [,]]
]]}
]}
],Choice - Har har. Get your laughs out.
[
Jump to dragon_no_laugh_join
],Choice - I'm still a hero! I've been...If Var "dragon_title_card_laugh_promise" == Val (Bool False) || Var "spectre_hostile" == Val (Bool False) []
[
[If "spectre_hostile" [,,,,,,,
Jump to princess_dragon_title_reveal
]]
,
[Else [,,,,,
Jump to princess_dragon_title_reveal
]]
],Choice - [[Say nothing.]
[
[If "dragon_title_card_laugh_promise" [
Jump to dragon_no_laugh_join
]]
,
[Else [
Jump to dragon_title_avoid
]]
]]}
],Choice - Nevermind. Forget I said an...
[
Jump to dragon_title_avoid
],Choice - [[Say nothing.]
[
{Label: dragon_title_avoid
[
[If "spectre_hostile" [,,,,,,]]
,
[Else [,,,,,,]]
,
Jump to princess_dragon_title_reveal
]}
]]}
]}
],Choice - Now that I think about it, ...If Var "dragon_loop_joke_count" == Val (Int 2) || "dragon_second_wait" []
[
Assign "dragon_start_count" += Val (Int 1)
,
[If "spectre_hostile" [,]]
,
[Else [,]]
,
Jump to dragon_title_card_menu
]]}
]}
,
{Label: dragon_arrival
[,,,,,,
[If Var "dragon_hands_observe" == Val (Bool False) [,,,,,,
[If "spectre_hostile" [,,,]]
,
[Else [,]]
]]
,
[Else [
[If "spectre_hostile" [,]]
,
[Else [,]]
,,,,,,,
[If "spectre_hostile" [,]]
,
[Else [,]]
]]
,,,,,,,
[If "spectre_hostile" [,,,,,]]
,
[Else [,,,,,]]
,,,,
{Choice Branch: [Choice - ''Hello?''
[
Assign "dragon_speech_attempt" = Val (Bool True)
,,
[If "spectre_hostile" [,]]
,
[Else [,]]
],Choice - ''Hey! Listen to me! I'm st...
[
Assign "dragon_speech_attempt" = Val (Bool True)
,,
[If "spectre_hostile" [,,,]]
,
[Else [,,,]]
],Choice - Am I going to say anything?
[,
[If "spectre_hostile" [,]]
,
[Else [,]]
],Choice - So... what do I look like?If Var "dragon_look_like" == Val (Bool False) []
[
Assign "dragon_look_like" = Val (Bool True)
,
[If "spectre_hostile" [,]]
,
[Else [,]]
],Choice - [[Say nothing.]
[,
[If "spectre_hostile" [,]]
,
[Else [,]]
]]}
,,,,,
[If "spectre_hostile" [,,,,]]
,
[Else [,,,,]]
,,,,,,,,,,]}
,
{Label: dragon_menu_pre_talk
[,,
{Choice Branch: [Choice - (Explore) What the hell am I?If Var "dragon_what_am_i" == Val (Bool False) []
[
Assign "dragon_what_am_i" = Val (Bool True)
,
[If "spectre_hostile" [,]]
,
[Else [,]]
,
Jump to dragon_menu_pre_talk
],Choice - ''Hello?''If Var "dragon_speech_attempt" == Val (Bool False) []
[
Assign "dragon_speech_attempt" = Val (Bool True)
,,
[If "spectre_hostile" [,]]
,
[Else [,]]
],Choice - ''Hey! Listen to me! I'm st...If Var "dragon_speech_attempt" == Val (Bool False) []
[
Assign "dragon_speech_attempt" = Val (Bool True)
,,
[If "spectre_hostile" [,,,]]
,
[Else [,,,]]
,
{Label: dragon_menu_pre_talk_share_join
[
Assign "dragon_body_made_aware" = Val (Bool True)
,
[If "spectre_hostile" [,]]
,
[Else [,]]
]}
],Choice - Quick. Tell them I'm in here!
[
Assign "dragon_body_made_aware" = Val (Bool True)
,
[If "spectre_hostile" [,]]
,
[Else [,]]
],Choice - Don't let them know I'm here!
[
[If "spectre_hostile" [,]]
,
[Else [,]]
],Choice - What do you want to do?
[
[If "spectre_hostile" [
Assign "dragon_body_made_aware" = Val (Bool True)
,,]]
,
[Else [,]]
],Choice - [[Say nothing.]
[
[If "spectre_hostile" [
Assign "dragon_body_made_aware" = Val (Bool True)
]]
]]}
,
[If "dragon_body_made_aware" [,,
[If "spectre_hostile" [,]]
,
[Else [,]]
,,,,
[If "spectre_hostile" [,]]
,
[Else [,]]
]]
,
[Else [,,
[If "spectre_hostile" [,]]
,
[Else [,]]
,,,,
[If "spectre_hostile" [,]]
,
[Else [,]]
]]
,]}
,
{Label: dragon_final_menu_pre_action
[
{Choice Branch: [Choice - Why am I being so quiet? Is...
[
[If "spectre_hostile" [,]]
,
[Else [,]]
],Choice - I hate this silence. It's p...
[
[If "spectre_hostile" [,]]
,
[Else [,]]
],Choice - Am I arguing with myself in...
[
[If "spectre_hostile" [,]]
,
[Else [,]]
],Choice - [[Say nothing.]
[
[If "spectre_hostile" [,]]
,
[Else [,]]
]]}
,
[If "spectre_hostile" [,]]
,
[Else [,]]
]}
,
{Label: dragon_opportunist_start
[,,,,,,,,,,,,,
[If "dragon_body_made_aware" [,,,,,
{Label: dragon_opportunist_sidebar_join
[,,,,,,,,,,,,,,,,
[If "spectre_hostile" [,]]
,
[Else [,]]
,
{Choice Branch: [Choice - We can wait for them to fin...If "spectre_hostile" []
[,],Choice - Yeah, I guess there's nothi...If Var "spectre_hostile" == Val (Bool False) []
[
Jump to dragon_opportunist_soft_quiet
],Choice - Right? How rude.If "spectre_hostile" []
[
[If "spectre_hostile" [,]]
],Choice - It's rude, though.If Var "spectre_hostile" == Val (Bool False) []
[,,
Jump to dragon_opportunist_soft_quiet
],Choice - I think you'll have to make...
[
[If "spectre_hostile" [,]]
,
[Else [,,,]]
],Choice - [[Say nothing.]
[
[If "spectre_hostile" [,]]
,
[Else [
Jump to dragon_opportunist_soft_quiet
]]
]]}
,
[If "spectre_hostile" [,]]
,
[Else [,]]
,,,,,,,,,,,,
[If "spectre_hostile" [,,,,,,,,,]]
,
[Else [,,,,,,,,,]]
,
Jump to dragon_opportunist_attack
]}
]]
,
[Else [
[If "spectre_hostile" [,,,,,,,,,,,
Jump to dragon_opportunist_sidebar_join
]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - We can wait for them to fin...
[,,
Jump to dragon_opportunist_soft_quiet
],Choice - Right? How rude.
[,,
Jump to dragon_opportunist_soft_speak_up
],Choice - I think you'll have to make...
[,,
{Label: dragon_opportunist_soft_speak_up
[,,,
Assign "dragon_learn_late" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to dragon_opportunist_attack
]}
],Choice - [[Say nothing.]
[,,
{Label: dragon_opportunist_soft_quiet
[,,,,,,,,,,,,,,,,,,,,,,,,,
[If "dragon_body_made_aware" [,,,]]
,
[Else [,,,]]
,
Jump to dragon_opportunist_attack
]}
]]}
]]
,
{Label: dragon_opportunist_attack
[,,,,,,,,,,,,,,
[If "spectre_hostile" [,,,,,,,,,,,,,,,]]
,
[Else [,,,,,,,]]
,
[If "spectre_hostile" [,,,,,,,]]
,
[Else [,,,,,,,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "spectre_hostile" [,,,
Jump to dragon_opportunist_fight_hostile
]]
,
[Else [,,,
Jump to dragon_opportunist_fight_soft
]]
]}
]}
,
{Label: dragon_opportunist_fight_hostile
[,,,,,,,,,,,,,,,,,,,,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "dragon_arm_gone" = Val (Bool True)
,,
{Choice Branch: [Choice - ''Wait wait wait I'm back i...
[,,,,,,,,,,,,,,
{Label: dragon_harsh_opportunist_violent_end
[,,
Assign "dragon_harsh_stab_end" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: dragon_harsh_opp_split_join
[,,
Assign "default_mouse" = Val (String "fusion")
,,
[If "dragon_harsh_stab_end" [,,,,,,,,]]
,
[Else [,,,,,,,,,,]]
,,
[If "spectre_hostile" [
[If "dragon_harsh_opp_no_comment_fight" [,
[If "dragon_harsh_stab_end" []]
,
[Else []]
,,]]
,
[Else [,
[If "dragon_harsh_stab_end" []]
,
[Else []]
,,]]
]]
,
[Elif "dragon_opp_soft_leave_keep_blade" [,,,]]
,
[Else [,,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "dragon_arm_gone" []]
,
[Else []]
,,
[If "dragon_arm_gone" []]
,
[Else []]
,,,,,,,,,,,,,,
[If "dragon_arm_gone" []]
,
[Else []]
,,
[If "dragon_arm_gone" []]
,
[Else []]
,,
[If "spectre_hostile" [,]]
,
[Else [,]]
,,,,,,
[If "spectre_hostile" [,,,,]]
,
[Else [,,,,]]
,,
[If "spectre_hostile" [,]]
,
[Else [,]]
,,,,,,
[If "spectre_hostile" [,]]
,
[Else [,]]
,,,,,
[If "dragon_arm_gone" []]
,
[Else []]
,,,,,,
[If "dragon_arm_gone" []]
,
[Else []]
,,,
[If "dragon_arm_gone" []]
,
[Else []]
,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "dragon_end" = Val (String "fusion")
,,
Assign "current_princess" = Val (String "dragonfused")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 1)
,
Jump to mirror_start
]}
]}
],Choice - ''I'm back in here, but you...
[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - [[Take her hand in yours.]
[,,,,,,,,,,,,
{Label: dragon_opp_harsh_leave_together
[,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
{Label: dragon_opp_leave_together_join
[,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,
[If "spectre_hostile" []]
,
[Else []]
,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,
[If "spectre_hostile" [,,,,,]]
,
[Else [,,,,,,,,,]]
,
{Choice Branch: [Choice - [[Step into your freedom.]
[
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,
[If "spectre_hostile" [,,,,,,,,,,,,,]]
,
[Else [,,,,,,,,,,,,,]]
,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,,
Assign "dragon_end" = Val (String "free")
,
Assign "princess_free" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 1)
,
Jump to mirror_start
]]}
]}
]}
],Choice - ''Now what?''
[,,,,
{Label: dragon_opp_alt_hand
[,,,,,,,,
Jump to dragon_opp_harsh_leave_together
]}
],Choice - ''I guess the only thing fo...
[,,,,
Jump to dragon_opp_alt_hand
],Choice - [[Say nothing.]
[,,,,
Jump to dragon_opp_alt_hand
]]}
],Choice - [[Say nothing.]
[,
Assign "dragon_harsh_opp_no_comment_fight" = Val (Bool True)
,
Jump to dragon_harsh_opportunist_violent_end
]]}
]}
,
{Label: dragon_opportunist_fight_soft
[,,,,,,,,,,,,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{Label: dragon_soft_opp_choice_join
[,
{Choice Branch: [Choice - (Explore) ''Oh no! I am so ...If Var "dragon_soft_opp_choice_explore" == Val (Bool False) []
[,,,,,,,,,,,,,,,
Jump to dragon_soft_opp_choice_sub
],Choice - (Explore) ''Oh, hey. I'm ba...If Var "dragon_soft_opp_choice_explore" == Val (Bool False) []
[
Assign "dragon_soft_opp_choice_explore" = Val (Bool True)
,,,,,,,,,,,,,,,,,
{Label: dragon_soft_opp_choice_sub
[
{Choice Branch: [Choice - ''Yeah. Sorry about that.''...
[
Jump to dragon_soft_opp_slay_join
],Choice - ''I'm obviously not going t...
[,,,,
Jump to dragon_soft_leave_late_join
],Choice - ''I don't know what I want ...
[
Jump to dragon_opp_soft_leave_suggest
],Choice - [[Say nothing.]
[
Jump to dragon_opp_soft_leave_silent
]]}
]}
],Choice - Good to be back boys. [[Fin...
[,,,,,,
{Label: dragon_soft_opp_slay_join
[,,,,,,,,,,,,
[If Var "dragon_soft_opp_choice_explore" == Val (Bool False) [,,,]]
,
[Elif "dragon_opp_soft_leave_betray" [,,,]]
,
[Else [,,,]]
,,,,,,,,,,
Jump to dragon_harsh_opp_split_join
]}
],Choice - [[Drop the blade.]
[,
Assign "dragon_dropped_blade" = Val (Bool True)
,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,
{Choice Branch: [Choice - ''We do it right this time....
[
{Label: dragon_opp_soft_leave_join
[,,,,,,,,,,,,,,
{Label: dragon_soft_leave_late_join
[
[If "dragon_dropped_blade" [,,,,,,,]]
,
[Else [,,,]]
,,,,,,,,,
{Choice Branch: [Choice - [[Slay the Princess.]
[
Assign "dragon_opp_soft_leave_betray" = Val (Bool True)
,,,
[If Var "blade_held" == Val (Bool False) [,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blood")
]]
,
Jump to dragon_soft_opp_slay_join
],Choice - [[Cut her free on your own.]
[
Assign "dragon_opp_soft_leave_keep_blade" = Val (Bool True)
,
{Label: dragon_opp_soft_free_oops
[,,
[If Var "blade_held" == Val (Bool False) [,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blood")
]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jump to dragon_harsh_opp_split_join
]}
],Choice - [[Give her the blade.]
[
{Label: dragon_opp_soft_free_join
[
[If Var "blade_held" == Val (Bool False) [,,
Assign "blade_held" = Val (Bool True)
,
Assign "default_mouse" = Val (String "blood")
,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,]]
,
[Else [,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
Jump to dragon_opp_leave_together_join
]}
]]}
]}
]}
],Choice - ''I don't know.''
[
{Label: dragon_opp_soft_leave_suggest
[,,,,
Jump to dragon_opp_soft_leave_join
]}
],Choice - [[Say nothing.]
[
{Label: dragon_opp_soft_leave_silent
[,,,,
Jump to dragon_opp_soft_leave_suggest
]}
]]}
],Choice - [[Turn around and leave.]
[,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,,,,,,,
{Choice Branch: [Choice - ''You can figure that out o...
[,,
Jump to dragon_soft_leave
],Choice - ''I just wanted my body bac...
[,,
Jump to dragon_soft_leave
],Choice - [[Say nothing.]
[,
Assign "dragon_leave_silent" = Val (Bool True)
,
{Label: dragon_soft_leave
[,,,,,,,,,,,,,,
[If Var "dragon_leave_silent" == Val (Bool False) [,]]
,
[Else [,]]
,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
Assign "dragon_end" = Val (String "abandon")
,
Assign "current_princess" = Val (String "dragonhand")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_deny" += Val (Int 1)
,,
Jump to mirror_start
]}
]]}
]]}
]}
]}
,
{Label: happy_start
[,,
[If "damsel_1_cabin_mirror_ask" || "damsel_1_cabin_mirror_approached" [
Assign "happy_mirror_prev" = Val (Bool True)
]]
,,,,
Assign "default_mouse" = Val (String "default")
,
Assign "blade_held" = Val (Bool False)
,
Assign "current_loop" = Val (Int 2)
,
Assign "quick_menu" = Val (Bool False)
,
Assign "config.menu_include_disabled" = Val (Bool False)
,
Assign "trait_smitten" = Val (Bool False)
,,,,,,,,,
Assign "current_princess" = Val (String "happy")
,
Assign "happy_encountered" = Val (Bool True)
,,,
Assign "trait_smitten" = Val (Bool False)
,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,,,,
[If "trait_opportunist" [,]]
,
[Elif "trait_paranoid" [,]]
,,,
[If "trait_opportunist" [,]]
,
[Elif "trait_paranoid" [,]]
,,,
[If "trait_opportunist" [,]]
,
[If "trait_paranoid" [
Assign "happy_smitten_gone_noticed" = Val (Bool True)
,,,,,,,,,,,,]]
,,,,,,]}
,
{Label: happy_down_menu
[,,,,
{Choice Branch: [Choice - (Explore) Does it matter if...If Var "happy_down_blade_explore" == Val (Bool False) []
[
Assign "happy_down_blade_explore" = Val (Bool True)
,
Assign "happy_down_count" += Val (Int 1)
,
[If "trait_paranoid" [,,,]]
,
[If "trait_opportunist" [,,,]]
,,,,,
Jump to happy_down_menu
],Choice - (Explore) Hey, where's 'The...If Var "happy_smitten_gone_noticed" == Val (Bool False) []
[
Assign "happy_down_count" += Val (Int 1)
,
Assign "happy_smitten_gone_noticed" = Val (Bool True)
,,,,,,,
Jump to happy_down_menu
],Choice - (Explore) ''So none of you ...If Var "happy_down_mirror_explore" == Val (Bool False) []
[
Assign "happy_down_mirror_explore" = Val (Bool True)
,
[If "trait_opportunist" [,,,,,,
[If "happy_mirror_prev" [,]]
,
[Else [,]]
,,]]
,
[Elif "trait_paranoid" [,,,,,,,,
[If "happy_mirror_prev" [,,,]]
,
[Else [,,,]]
]]
,,,
Jump to happy_down_menu
],Choice - [[Approach the mirror.]
[
Assign "quick_menu" = Val (Bool False)
,,
[If "happy_down_mirror_explore" [,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
[If "happy_mirror_prev" [,]]
,
[Else [,]]
]]
,
[Else [,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
[If "happy_mirror_prev" [,,
[If "trait_paranoid" [,,,,,,,]]
,
[Else [,,,,,,,]]
]]
,
[Else [,,,,
[If "trait_paranoid" [,,,]]
,
[Else [,,,]]
]]
]]
,
{Choice Branch: [Choice - [[Reach forward.]
[,,,,,
[If "happy_mirror_prev" [,]]
,
[Else [,,
[If "trait_opportunist" [,]]
,
[Else [,,,]]
]]
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,
Jump to happy_stairs
]]}
],Choice - [[Turn around and leave.]If Var "happy_down_leave_attempt" == Val (Bool False) []
[
Assign "happy_down_leave_attempt" = Val (Bool True)
,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
[If "trait_paranoid" [,,,]]
,
[Elif "trait_opportunist" [,,,,,,,]]
,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,
Jump to happy_down_menu
]]}
]}
,
{Label: happy_stairs
[,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,
[If "trait_opportunist" [,,,]]
,,,
[If "happy_down_leave_attempt" [,]]
,
[Else [,]]
,
[If "trait_paranoid" [,,,,,,,,,,,]]
,,,,,,,,,
[If "trait_opportunist" [,]]
,,,
[If "trait_paranoid" [,]]
,
{Choice Branch: [Choice - [[Proceed up the stairs.]
[
Jump to happy_encounter
]]}
]}
,
{Label: happy_encounter
[,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,,,,,
[If "trait_paranoid" [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,,,,,,,]}
,
{Label: happy_menu
[,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "happy_defensive_flag" && Var "happy_defensive_spoken" == Val (Bool False) [
Assign "happy_defensive_spoken" = Val (Bool True)
,
[If "trait_opportunist" [,]]
]]
,
{Choice Branch: [Choice - (Explore) ''Hey! Smitten! Y...If "happy_paranoid_deduce" && Var "happy_shadow_talk_attempt" == Val (Bool False) []
[
Assign "happy_shadow_talk_attempt" = Val (Bool True)
,
Assign "happy_torch_comment_immediate" = Val (Bool False)
,
Assign "happy_torch_shadow_known" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,
[If "happy_him_explore" [,,,,,,,,,
[If "trait_opportunist" [,]]
]]
,
[Else [,,,,
[If "trait_paranoid" [,,]]
,
Jump to happy_him_join
]]
,
Jump to happy_menu
],Choice - (Explore) ''Hey! Shadow! Do...If Var "trait_paranoid" == Val (Bool False) && Var "happy_shadow_talk_attempt" == Val (Bool False) && "happy_him_explore" []
[
Assign "happy_shadow_talk_attempt" = Val (Bool True)
,
Assign "happy_torch_comment_immediate" = Val (Bool False)
,
Assign "happy_torch_shadow_known" = Val (Bool True)
,,,,,,,,,,,,,,,,
[If "happy_him_explore" [,,,,,,,,,
[If "trait_opportunist" [,]]
]]
,
Jump to happy_menu
],Choice - (Explore) ''What just happe...If "happy_torch_comment_immediate" && Var "happy_torches" == Val (Int 3) && Var "happy_torch_first_comm" == Val (Bool False) []
[
Assign "happy_torch_first_comm" = Val (Bool True)
,
Assign "happy_defensive_flag" = Val (Bool True)
,,,,,,,,,,,,,
Jump to happy_menu
],Choice - (Explore) ''I don't think y...If "happy_torch_comment_immediate" && Var "happy_torches" == Val (Int 3) && Var "happy_torch_first_comm" == Val (Bool False) []
[
Assign "happy_torch_first_comm" = Val (Bool True)
,
Assign "happy_him_mentioned" = Val (Bool True)
,,,,,,
Jump to happy_menu
],Choice - (Explore) ''It's just a tor...If "happy_torch_comment_immediate" && Var "happy_torch_just_explore" == Val (Bool False) && Var "happy_torches" <= Val (Int 3) []
[
Assign "happy_torch_just_explore" = Val (Bool True)
,,,,,,,,,,,,,
{Label: happy_distraction_tree
[
[If Var "happy_eaten" == Val (Bool False) && Var "happy_refused_food" == Val (Bool False) [
Jump to happy_dinner_join
]]
,
[Elif Var "happy_played" == Val (Bool False) [,,,,
[If "trait_opportunist" [,,,]]
,
[If "trait_paranoid" [,,,]]
,
Jump to happy_game_join
]]
,
[Else [,,,,,,,,,,,,
Jump to happy_torches
]]
,
Jump to happy_menu
]}
],Choice - (Explore) ''This place isn'...If "happy_torch_comment_immediate" && Var "happy_torches" <= Val (Int 3) && Var "happy_torch_leave_explore" == Val (Bool False) && "happy_torch_shadow_known" []
[
Assign "happy_torch_leave_explore" = Val (Bool True)
,,,,,,,,,,,,,
Jump to happy_distraction_tree
],Choice - (Explore) ''We need the tru...If "happy_happy_asked" && Var "happy_truth_explore" == Val (Bool False) []
[
Assign "happy_truth_explore" = Val (Bool True)
,,,,,
Jump to happy_torches
],Choice - (Explore) ''Do we actually ...If "happy_everything_we_need_can_comment" && Var "happy_everything_we_need_explore" == Val (Bool False) && "happy_eaten" || "happy_played" []
[
Assign "happy_everything_we_need_explore" = Val (Bool True)
,
Assign "happy_torch_leave_explore" = Val (Bool True)
,,,,,
Jump to happy_torches
],Choice - (Explore) ''Are you actuall...If Var "happy_torches" <= Val (Int 2) && Var "happy_happy_asked" == Val (Bool False) []
[
Assign "happy_happy_asked" = Val (Bool True)
,
Assign "happy_defensive_flag" = Val (Bool True)
,
Assign "happy_torch_comment_immediate" = Val (Bool False)
,,,,,,,,,,
Jump to happy_menu
],Choice - (Explore) ''The shadow hold...If "happy_set_table" && Var "happy_shadow_commented" == Val (Bool False) && "happy_get_up_attempt" []
[
{Label: happy_shadow_discuss_join
[,
Assign "happy_torch_shadow_known" = Val (Bool True)
,
Assign "happy_shadow_commented" = Val (Bool True)
,
Assign "happy_defensive_flag" = Val (Bool True)
,
Assign "happy_him_mentioned" = Val (Bool True)
,
Assign "happy_torch_comment_immediate" = Val (Bool False)
,,,,,,,,,,,,
Jump to happy_menu
]}
],Choice - (Explore) ''The shadow that...If "happy_set_table" && Var "happy_shadow_commented" == Val (Bool False) []
[
Jump to happy_shadow_discuss_join
],Choice - (Explore) ''You said 'he.' ...If "happy_him_mentioned" && Var "happy_him_explore" == Val (Bool False) []
[
{Label: happy_him_join
[
Assign "happy_him_explore" = Val (Bool True)
,
Assign "happy_torch_comment_immediate" = Val (Bool False)
,
Assign "happy_what_do_explore" = Val (Bool True)
,,,,,,
[If "trait_paranoid" [
[If Var "happy_paranoid_deduce" == Val (Bool False) [
Assign "happy_paranoid_deduce" = Val (Bool True)
,,,,,,,]]
,
[Else [
Assign "happy_paranoid_deduce" = Val (Bool True)
,,]]
]]
,
[If "trait_opportunist" [,,
[If "happy_get_up_attempt" [,]]
]]
,
Jump to happy_menu
]}
],Choice - (Explore) ''What is this pl...If Var "happy_what_place_explore" == Val (Bool False) []
[
Assign "happy_what_place_explore" = Val (Bool True)
,
Assign "happy_torch_comment_immediate" = Val (Bool False)
,
[If Var "happy_torches" == Val (Int 4) [,,]]
,
[Else [,,]]
,,
[If Var "happy_torches" == Val (Int 4) []]
,
[Else []]
,
Jump to happy_menu
],Choice - (Explore) ''What are we sup...If Var "happy_what_do_explore" == Val (Bool False) && Var "happy_eaten" == Val (Bool False) && Var "happy_refused_food" == Val (Bool False) []
[
Assign "happy_torch_comment_immediate" = Val (Bool False)
,
Assign "happy_what_do_explore" = Val (Bool True)
,
Jump to happy_dinner_join
],Choice - (Explore) ''You mentioned d...If Var "happy_eaten" == Val (Bool False) && Var "happy_refused_food" == Val (Bool False) []
[,
Assign "happy_directly_asked_dinner" = Val (Bool True)
,
Assign "happy_torch_comment_immediate" = Val (Bool False)
,
{Label: happy_dinner_join
[
[If Var "happy_torches" == Val (Int 4) [,,,]]
,
[Elif Var "happy_torches" == Val (Int 3) [,,,]]
,
[Else [,,,]]
,,,,,,,,,,,,,,,,,,,,,
[If "trait_paranoid" [,,,,,,,]]
,
[Elif "trait_opportunist" [,,,,,]]
,
{Choice Branch: [Choice - [[Refuse her hospitality.]
[,
Assign "happy_refused_food" = Val (Bool True)
,
[If "happy_directly_asked_dinner" [,,,,,,,]]
,,,,,,,,,,,,,
Jump to happy_torches
],Choice - [[Eat.]
[
Assign "happy_eaten" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "trait_opportunist" [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "trait_paranoid" [,,,,,,,]]
,
[Elif "trait_opportunist" [,,,,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "trait_opportunist" [,]]
,,,,,,,,,
Jump to happy_torches
]]}
]}
],Choice - (Explore) ''Well, we ate. W...If Var "happy_post_eat_explore" == Val (Bool False) && "happy_eaten" && Var "happy_played" == Val (Bool False) []
[
{Label: happy_game_early_join
[
Assign "happy_post_eat_explore" = Val (Bool True)
,
Assign "happy_torch_comment_immediate" = Val (Bool False)
,,,,,
{Label: happy_game_join
[
Assign "happy_played" = Val (Bool True)
,,,,,,,,,,,,,
[If "happy_eaten" []]
,
[Else []]
,,,,,,,,,,,
[If "trait_opportunist" [,,,,,]]
,
[If "trait_paranoid" [,,,]]
,,,,,,,,,,,,,,,,,,,
[If "trait_opportunist" [,]]
,,,,,,,,
[If "trait_opportunist" [,,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "trait_paranoid" [,]]
,,,,,
Assign "happy_torches" -= Val (Int 1)
,,
Assign "happy_torches" += Val (Int 1)
,,
Assign "happy_torches" -= Val (Int 1)
,,
Assign "happy_torches" += Val (Int 1)
,,
Assign "happy_torches" -= Val (Int 1)
,,
Assign "happy_torches" += Val (Int 1)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[If "trait_opportunist" [,]]
,,,,,,,
Jump to happy_torches
]}
]}
],Choice - (Explore) ''Forget about th...If Var "happy_post_eat_explore" == Val (Bool False) && "happy_refused_food" && Var "happy_played" == Val (Bool False) []
[
Jump to happy_game_early_join
],Choice - (Explore) ''Okay, so... we'...If Var "happy_final_activity_explore" == Val (Bool False) && "happy_refused_food" && "happy_played" []
[
Jump to happy_final_activity_join
],Choice - (Explore) ''Okay, so... we'...If Var "happy_final_activity_explore" == Val (Bool False) && "happy_eaten" && "happy_played" []
[
{Label: happy_final_activity_join
[
Assign "happy_post_eat_explore" = Val (Bool True)
,
Assign "happy_torch_comment_immediate" = Val (Bool False)
,,,,,,,,,,,,,,,
[If "trait_paranoid" [,]]
,
[Elif "trait_opportunist" [,]]
,,,,,
[If "trait_paranoid" [,]]
,
[Elif "trait_opportunist" [,]]
,,,,,,,,,,,,,
Jump to happy_torches
]}
],Choice - (Explore) ''I can't get up....If "happy_get_up_attempt" && Var "happy_cant_up_explore" == Val (Bool False) []
[
Assign "happy_cant_up_explore" = Val (Bool True)
,
Assign "happy_everything_we_need_can_comment" = Val (Bool True)
,
Assign "happy_torch_comment_immediate" = Val (Bool False)
,
Assign "happy_him_mentioned" = Val (Bool True)
,,,,,
[If Var "happy_torches" == Val (Int 4) []]
,
[Else []]
,,,,,,,,,
Jump to happy_menu
],Choice - ''Excuse me.'' [[Get up.]If Var "happy_get_up_attempt" == Val (Bool False) []
[
Jump to happy_get_up_attempt_join
],Choice - [[Silently push yourself fr...If Var "happy_get_up_attempt" == Val (Bool False) []
[
Jump to happy_get_up_attempt_join
],Choice - [[Slay the Princess.]If Var "happy_slay_explore" == Val (Bool False) && Var "happy_get_up_attempt" == Val (Bool False) []
[
Assign "happy_slay_explore" = Val (Bool True)
,
{Label: happy_get_up_attempt_join
[
Assign "happy_torch_comment_immediate" = Val (Bool False)
,
Assign "happy_get_up_attempt" = Val (Bool True)
,,,,,,,,
[If "happy_slay_explore" [,,,,]]
,
[Else [,,,,]]
,
Jump to happy_menu
]}
]]}
]}
,
{Label: happy_torches
[
[If Var "happy_torches" == Val (Int 4) [
Assign "happy_torch_comment_immediate" = Val (Bool True)
,,,,
Assign "happy_torches" -= Val (Int 1)
,,
Assign "happy_torches" += Val (Int 1)
,,
Assign "happy_torches" -= Val (Int 1)
,,
Assign "happy_torches" += Val (Int 1)
,,
Assign "happy_torches" -= Val (Int 1)
,,,,,,,,,
[If "trait_paranoid" [,,
[If "happy_get_up_attempt" [,]]
,
[Elif "happy_shadow_acted" [,]]
,
[If "happy_shadow_acted" || "happy_get_up_attempt" [,,,,
[If "happy_get_up_attempt" [,]]
]]
]]
,
[Elif "trait_opportunist" [,]]
,,,,,,,,,
Jump to happy_menu
]]
,
[Elif Var "happy_torches" == Val (Int 3) [
Assign "happy_torch_comment_immediate" = Val (Bool True)
,,,
Assign "happy_torches" -= Val (Int 1)
,,
Assign "happy_torches" += Val (Int 1)
,,
Assign "happy_torches" -= Val (Int 1)
,,
Assign "happy_torches" += Val (Int 1)
,,
Assign "happy_torches" -= Val (Int 1)
,,,,,,,,,,,,,
[If "trait_paranoid" [
[If Var "happy_paranoid_deduce" == Val (Bool False) [
Assign "happy_paranoid_deduce" = Val (Bool True)
,,,,,,,]]
,
[Else [,]]
]]
,
[Else [,,,]]
,
Jump to happy_menu
]]
,
[Else [,,,
Assign "happy_torches" -= Val (Int 1)
,,
Assign "happy_torches" += Val (Int 1)
,,
Assign "happy_torches" -= Val (Int 1)
,,
Assign "happy_torches" += Val (Int 1)
,,
Assign "happy_torches" -= Val (Int 1)
,,,,,,,,,,
{Label: happy_torches_final
[
{Choice Branch: [Choice - ''What do you think will ha...
[,,,,,
{Choice Branch: [Choice - ''If you could do anything ...
[
{Label: happy_dance_comment_join
[,
Assign "happy_dance_mentioned" = Val (Bool True)
,,,,,,,,,,,,,,,,,,,,,,,,]}
],Choice - ''If your answer would blow...
[,,,],Choice - ''Then don't say it. We don...
[
Jump to happy_torch_end
],Choice - [[Say nothing.]
[,,,]]}
],Choice - ''Don't worry about what's ...
[
Jump to happy_dance_comment_join
],Choice - ''Whatever the shadows have...
[,,,,,,,],Choice - ''We don't have to let it g...
[
{Label: happy_torch_end
[,,,,,,,,,,,,,,,,,,,,,,,
[If "trait_paranoid" [,,,]]
,
[Else [,,,,,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,,
Assign "current_princess" = Val (String "happydry")
,
Assign "happy_end" = Val (String "tend")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_deny" += Val (Int 1)
,
Jump to mirror_start
]}
],Choice - [[Say nothing.]
[,,,]]}
]}
,,,
Assign "happy_torches" = Val (Int 0)
,,,,,,,,,,,,,,
Jump to happy_climax
]]
]}
,
{Label: happy_climax
[,,,
{Choice Branch: [Choice - ''I feel empty.''
[,,,,,,,,
Jump to happy_climax_silent
],Choice - ''So that's that, huh?''
[,,,,,,,,
Jump to happy_climax_silent
],Choice - ''Why are you crying?''
[,,,,,,,,
Jump to happy_climax_silent
],Choice - ''Are you okay?''
[,,,,,,,,
Jump to happy_climax_silent
],Choice - ''Well this sucks.''
[,,,,,,,,
Jump to happy_climax_silent
],Choice - ''You can open your eyes. I...
[,,,,,,,,
Jump to happy_climax_silent
],Choice - ''Nothing's changed. We're ...
[,,,,,,,,,,,,
Jump to happy_climax_silent
],Choice - ''I'm sorry, I feel like al...
[,,,,,,,,,,,,
Jump to happy_climax_silent
],Choice - [[Slay the Princess.]If Var "happy_slay_attempted" == Val (Bool False) []
[
{Label: happy_slay
[,
Assign "happy_slay_attempted" = Val (Bool True)
,,,
[If "trait_opportunist" [
Assign "happy_mixed_signals" = Val (Bool True)
,,,,,,,,,,,,]]
,
[Else [,,,,,,,,,]]
,,,
[If "trait_opportunist" [,]]
,
{Choice Branch: [Choice - You're right. What was I th...
[,,
[If "happy_climax_stood" [
Jump to happy_stairs_silent
]]
,
[Else [
Jump to happy_climax_silent
]]
],Choice - Don't get cold feet now. Th...
[
Jump to happy_murder_end
],Choice - I know what I decided to do...
[
Jump to happy_murder_end
]]}
,
{Label: happy_murder_end
[
[If "happy_climax_stood" [,,,,,
Assign "default_mouse" = Val (String "blade")
,
Assign "blade_held" = Val (Bool True)
,,,,,]]
,
[Else [,,,,,,,,,,,
Assign "default_mouse" = Val (String "blade")
,
Assign "blade_held" = Val (Bool True)
,,,,,]]
,,,
Assign "default_mouse" = Val (String "blood")
,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,
[If "trait_opportunist" [,]]
,
[Else [,]]
,,,,,,,,,,,,,,,,,,,,,,,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,,
Assign "happy_end" = Val (String "slay")
,
Assign "princess_kept" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 1)
,
Jump to mirror_start
]}
]}
],Choice - [[Say nothing.]
[
{Label: happy_climax_silent
[,,,,,,,]}
]]}
,
Assign "happy_climax_stood" = Val (Bool True)
,,,,,,,,,,
Assign "quick_menu" = Val (Bool False)
,,,,,,,,,,
[If "persistent.quick_menu" [
Assign "quick_menu" = Val (Bool True)
]]
,,,
{Label: happy_climax_stair
[
{Choice Branch: [Choice - ''Of course I do. I don't t...
[,,,,,,,,,
Jump to happy_stairs_leaving
],Choice - ''Whatever we had between u...
[,,,,,
{Choice Branch: [Choice - ''I'd like to find out.''
[,,,,],Choice - ''It's us.''
[,,,,],Choice - ''Neither do I.''
[,,,,],Choice - [[Say nothing.]
[,,,,]]}
,
Jump to happy_stairs_leaving
],Choice - ''I don't know if I ever ha...
[,,,,,,,,,
Jump to happy_stairs_leaving
],Choice - ''I'm not sure I've ever ha...
[,,,,,
Jump to happy_stairs_leaving
],Choice - ''No.''
[,,,,,,,,,
Jump to happy_stairs_leaving
],Choice - [[Slay the Princess.]If Var "happy_slay_attempted" == Val (Bool False) []
[
Jump to happy_slay
],Choice - [[Say nothing.]
[
{Label: happy_stairs_silent
[,,,,,,,,,,,,,
{Label: happy_stairs_leaving
[,
{Choice Branch: [Choice - [[Offer her your hand.]
[,,
Assign "happy_leaving_hand_hold" = Val (Bool True)
,,,,,,,,,,,,,,
Jump to happy_leave_finale
],Choice - [[Leave.]
[,
Jump to happy_leave_finale
]]}
]}
]}
]]}
]}
]}
,
{Label: happy_leave_finale
[,,
[If "happy_slay_attempted" [,,,]]
,
[Else [,,
[If "trait_paranoid" [,]]
,
[Else [
[If Var "happy_mixed_signals" == Val (Bool False) [,]]
]]
,,,
[If "trait_opportunist" [,]]
,
[Else [,]]
,,]]
,,,,,
[If "happy_leaving_hand_hold" []]
,
[Else []]
,,,,,,,,
[If Var "happy_leaving_hand_hold" == Val (Bool False) [,]]
,,,,,,,
[If "happy_leaving_hand_hold" []]
,
[Else []]
,,,,,
[If "trait_paranoid" [,]]
,
[Elif "trait_opportunist" [,]]
,,,
[If "happy_leaving_hand_hold" []]
,
[Else []]
,,,
[If "happy_leaving_hand_hold" []]
,
[Else []]
,,,
[If "happy_leaving_hand_hold" || "happy_dance_mentioned" [,
Assign "happy_danced" = Val (Bool True)
,
[If "happy_dance_mentioned" [,
[If "happy_leaving_hand_hold" []]
,
[Else []]
,,]]
,
[Else [,,,]]
,,,
[If Var "happy_leaving_hand_hold" == Val (Bool False) []]
,,,,,,,,,,,,,,,,,,,,,,,,,,,]]
,,,,,,
[If "happy_danced" [,]]
,
[Else [,]]
,,,
[If "happy_danced" [,,,,,,,,,,,,,,,,,]]
,
[Else [,,,,,,,,,,,,,,,,]]
,,,,
Assign "blade_held" = Val (Bool False)
,
Assign "default_mouse" = Val (String "default")
,,,,,,,,,,,,,,,,,,,
[If Var "loops_finished" != Val (Int 0) []]
,
[Else []]
,
[If "happy_danced" [
Assign "happy_end" = Val (String "dance")
,
Assign "princess_free" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 2)
]]
,
[Else [
Assign "happy_end" = Val (String "free")
,
Assign "princess_free" += Val (Int 1)
,
Assign "princess_satisfy" += Val (Int 1)
]]
,
Jump to mirror_start
]}
]